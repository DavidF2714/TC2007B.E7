import {
  require_baseDifference
} from "./chunk-CU7DSIAI.js";
import {
  require_baseGetTag,
  require_baseRest,
  require_get,
  require_isArray,
  require_isArrayLikeObject,
  require_isEqual,
  require_isFunction,
  require_isObjectLike,
  require_isPlainObject,
  require_last,
  require_merge,
  require_pick,
  require_set
} from "./chunk-I3APSZHF.js";
import {
  require_react_dom
} from "./chunk-GSZ7ISAW.js";
import {
  require_prop_types
} from "./chunk-2IIAOMQH.js";
import {
  require_jsx_runtime
} from "./chunk-VTQ2JCVL.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e6) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array4, setter, iteratee, accumulator) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        while (++index4 < length) {
          var value = array4[index4];
          setter(accumulator, value, iteratee(value), array4);
        }
        return accumulator;
      }
      function arrayEach(array4, iteratee) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        while (++index4 < length) {
          if (iteratee(array4[index4], index4, array4) === false) {
            break;
          }
        }
        return array4;
      }
      function arrayEachRight(array4, iteratee) {
        var length = array4 == null ? 0 : array4.length;
        while (length--) {
          if (iteratee(array4[length], length, array4) === false) {
            break;
          }
        }
        return array4;
      }
      function arrayEvery(array4, predicate) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        while (++index4 < length) {
          if (!predicate(array4[index4], index4, array4)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array4, predicate) {
        var index4 = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
        while (++index4 < length) {
          var value = array4[index4];
          if (predicate(value, index4, array4)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array4, value) {
        var length = array4 == null ? 0 : array4.length;
        return !!length && baseIndexOf(array4, value, 0) > -1;
      }
      function arrayIncludesWith(array4, value, comparator) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        while (++index4 < length) {
          if (comparator(value, array4[index4])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array4, iteratee) {
        var index4 = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
        while (++index4 < length) {
          result[index4] = iteratee(array4[index4], index4, array4);
        }
        return result;
      }
      function arrayPush(array4, values) {
        var index4 = -1, length = values.length, offset = array4.length;
        while (++index4 < length) {
          array4[offset + index4] = values[index4];
        }
        return array4;
      }
      function arrayReduce(array4, iteratee, accumulator, initAccum) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        if (initAccum && length) {
          accumulator = array4[++index4];
        }
        while (++index4 < length) {
          accumulator = iteratee(accumulator, array4[index4], index4, array4);
        }
        return accumulator;
      }
      function arrayReduceRight(array4, iteratee, accumulator, initAccum) {
        var length = array4 == null ? 0 : array4.length;
        if (initAccum && length) {
          accumulator = array4[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array4[length], length, array4);
        }
        return accumulator;
      }
      function arraySome(array4, predicate) {
        var index4 = -1, length = array4 == null ? 0 : array4.length;
        while (++index4 < length) {
          if (predicate(array4[index4], index4, array4)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array4, predicate, fromIndex, fromRight) {
        var length = array4.length, index4 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index4-- : ++index4 < length) {
          if (predicate(array4[index4], index4, array4)) {
            return index4;
          }
        }
        return -1;
      }
      function baseIndexOf(array4, value, fromIndex) {
        return value === value ? strictIndexOf(array4, value, fromIndex) : baseFindIndex(array4, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array4, value, fromIndex, comparator) {
        var index4 = fromIndex - 1, length = array4.length;
        while (++index4 < length) {
          if (comparator(array4[index4], value)) {
            return index4;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array4, iteratee) {
        var length = array4 == null ? 0 : array4.length;
        return length ? baseSum(array4, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index4, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index4, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array4, comparer) {
        var length = array4.length;
        array4.sort(comparer);
        while (length--) {
          array4[length] = array4[length].value;
        }
        return array4;
      }
      function baseSum(array4, iteratee) {
        var result, index4 = -1, length = array4.length;
        while (++index4 < length) {
          var current = iteratee(array4[index4]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n3, iteratee) {
        var index4 = -1, result = Array(n3);
        while (++index4 < n3) {
          result[index4] = iteratee(index4);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index4 = -1, length = strSymbols.length;
        while (++index4 < length && baseIndexOf(chrSymbols, strSymbols[index4], 0) > -1) {
        }
        return index4;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index4 = strSymbols.length;
        while (index4-- && baseIndexOf(chrSymbols, strSymbols[index4], 0) > -1) {
        }
        return index4;
      }
      function countHolders(array4, placeholder) {
        var length = array4.length, result = 0;
        while (length--) {
          if (array4[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map10) {
        var index4 = -1, result = Array(map10.size);
        map10.forEach(function(value, key) {
          result[++index4] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array4, placeholder) {
        var index4 = -1, length = array4.length, resIndex = 0, result = [];
        while (++index4 < length) {
          var value = array4[index4];
          if (value === placeholder || value === PLACEHOLDER) {
            array4[index4] = PLACEHOLDER;
            result[resIndex++] = index4;
          }
        }
        return result;
      }
      function setToArray(set4) {
        var index4 = -1, result = Array(set4.size);
        set4.forEach(function(value) {
          result[++index4] = value;
        });
        return result;
      }
      function setToPairs(set4) {
        var index4 = -1, result = Array(set4.size);
        set4.forEach(function(value) {
          result[++index4] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array4, value, fromIndex) {
        var index4 = fromIndex - 1, length = array4.length;
        while (++index4 < length) {
          if (array4[index4] === value) {
            return index4;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array4, value, fromIndex) {
        var index4 = fromIndex + 1;
        while (index4--) {
          if (array4[index4] === value) {
            return index4;
          }
        }
        return index4;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index4 = string.length;
        while (index4-- && reWhitespace.test(string.charAt(index4))) {
        }
        return index4;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e6) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array4 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array4), isRight = dir < 0, arrLength = isArr ? array4.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end = view.end, length = end - start2, index4 = isRight ? end : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array4, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index4 += dir;
              var iterIndex = -1, value = array4[index4];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index4 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index4 < length) {
            var entry = entries[index4];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index4 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index4 < length) {
            var entry = entries[index4];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index4 = assocIndexOf(data, key);
          if (index4 < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index4 == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index4, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index4 = assocIndexOf(data, key);
          return index4 < 0 ? undefined2 : data[index4][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index4 = assocIndexOf(data, key);
          if (index4 < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index4][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index4 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index4 < length) {
            var entry = entries[index4];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index4 = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index4 < length) {
            this.add(values2[index4]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs4 = data.__data__;
            if (!Map2 || pairs4.length < LARGE_ARRAY_SIZE - 1) {
              pairs4.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs4);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array4) {
          var length = array4.length;
          return length ? array4[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array4, n3) {
          return shuffleSelf(copyArray(array4), baseClamp(n3, 0, array4.length));
        }
        function arrayShuffle(array4) {
          return shuffleSelf(copyArray(array4));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array4, key) {
          var length = array4.length;
          while (length--) {
            if (eq(array4[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index4 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index4 < length) {
            result2[index4] = skip ? undefined2 : get(object, paths[index4]);
          }
          return result2;
        }
        function baseClamp(number4, lower, upper) {
          if (number4 === number4) {
            if (upper !== undefined2) {
              number4 = number4 <= upper ? number4 : upper;
            }
            if (lower !== undefined2) {
              number4 = number4 >= lower ? number4 : lower;
            }
          }
          return number4;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array4, values2, iteratee2, comparator) {
          var index4 = -1, includes2 = arrayIncludes, isCommon = true, length = array4.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index4 < length) {
              var value = array4[index4], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index4, collection2) {
            result2 = !!predicate(value, index4, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array4, iteratee2, comparator) {
          var index4 = -1, length = array4.length;
          while (++index4 < length) {
            var value = array4[index4], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array4, value, start2, end) {
          var length = array4.length;
          start2 = toInteger(start2);
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start2 > end ? 0 : toLength(end);
          while (start2 < end) {
            array4[start2++] = value;
          }
          return array4;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index4, collection2) {
            if (predicate(value, index4, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array4, depth, predicate, isStrict, result2) {
          var index4 = -1, length = array4.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index4 < length) {
            var value = array4[index4];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path2) {
          path2 = castPath(path2, object);
          var index4 = 0, length = path2.length;
          while (object != null && index4 < length) {
            object = object[toKey(path2[index4++])];
          }
          return index4 && index4 == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number4, start2, end) {
          return number4 >= nativeMin(start2, end) && number4 < nativeMax(start2, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array4 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array4 = arrayMap(array4, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array4.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array4.length >= 120) ? new SetCache(othIndex && array4) : undefined2;
          }
          array4 = arrays[0];
          var index4 = -1, seen = caches[0];
          outer:
            while (++index4 < length && result2.length < maxLength) {
              var value = array4[index4], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path2, args) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          var func = object == null ? object : object[toKey(last(path2))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index4 = matchData.length, length = index4, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index4--) {
            var data = matchData[index4];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index4 < length) {
            data = matchData[index4];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity11;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index4 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index4] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path2, srcValue) {
          if (isKey(path2) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path2), srcValue);
          }
          return function(object) {
            var objValue = get(object, path2);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array4, n3) {
          var length = array4.length;
          if (!length) {
            return;
          }
          n3 += n3 < 0 ? length : 0;
          return isIndex(n3, length) ? array4[n3] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity11];
          }
          var index4 = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index4, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path2) {
            return hasIn(object, path2);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index4 = -1, length = paths.length, result2 = {};
          while (++index4 < length) {
            var path2 = paths[index4], value = baseGet(object, path2);
            if (predicate(value, path2)) {
              baseSet(result2, castPath(path2, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path2) {
          return function(object) {
            return baseGet(object, path2);
          };
        }
        function basePullAll(array4, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index4 = -1, length = values2.length, seen = array4;
          if (array4 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array4, baseUnary(iteratee2));
          }
          while (++index4 < length) {
            var fromIndex = 0, value = values2[index4], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array4) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array4, fromIndex, 1);
            }
          }
          return array4;
        }
        function basePullAt(array4, indexes4) {
          var length = array4 ? indexes4.length : 0, lastIndex = length - 1;
          while (length--) {
            var index4 = indexes4[length];
            if (length == lastIndex || index4 !== previous) {
              var previous = index4;
              if (isIndex(index4)) {
                splice.call(array4, index4, 1);
              } else {
                baseUnset(array4, index4);
              }
            }
          }
          return array4;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start2, end, step, fromRight) {
          var index4 = -1, length = nativeMax(nativeCeil((end - start2) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index4] = start2;
            start2 += step;
          }
          return result2;
        }
        function baseRepeat(string, n3) {
          var result2 = "";
          if (!string || n3 < 1 || n3 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n3 % 2) {
              result2 += string;
            }
            n3 = nativeFloor(n3 / 2);
            if (n3) {
              string += string;
            }
          } while (n3);
          return result2;
        }
        function baseRest(func, start2) {
          return setToString(overRest(func, start2, identity11), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n3) {
          var array4 = values(collection);
          return shuffleSelf(array4, baseClamp(n3, 0, array4.length));
        }
        function baseSet(object, path2, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path2 = castPath(path2, object);
          var index4 = -1, length = path2.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index4 < length) {
            var key = toKey(path2[index4]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index4 != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path2[index4 + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity11 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity11 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array4, start2, end) {
          var index4 = -1, length = array4.length;
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start2 > end ? 0 : end - start2 >>> 0;
          start2 >>>= 0;
          var result2 = Array2(length);
          while (++index4 < length) {
            result2[index4] = array4[index4 + start2];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index4, collection2) {
            result2 = predicate(value, index4, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array4, value, retHighest) {
          var low = 0, high = array4 == null ? low : array4.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array4[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array4, value, identity11, retHighest);
        }
        function baseSortedIndexBy(array4, value, iteratee2, retHighest) {
          var low = 0, high = array4 == null ? 0 : array4.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array4[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array4, iteratee2) {
          var index4 = -1, length = array4.length, resIndex = 0, result2 = [];
          while (++index4 < length) {
            var value = array4[index4], computed = iteratee2 ? iteratee2(value) : value;
            if (!index4 || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array4, iteratee2, comparator) {
          var index4 = -1, includes2 = arrayIncludes, length = array4.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set5 = iteratee2 ? null : createSet(array4);
            if (set5) {
              return setToArray(set5);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index4 < length) {
              var value = array4[index4], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path2) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          return object == null || delete object[toKey(last(path2))];
        }
        function baseUpdate(object, path2, updater, customizer) {
          return baseSet(object, path2, updater(baseGet(object, path2)), customizer);
        }
        function baseWhile(array4, predicate, isDrop, fromRight) {
          var length = array4.length, index4 = fromRight ? length : -1;
          while ((fromRight ? index4-- : ++index4 < length) && predicate(array4[index4], index4, array4)) {
          }
          return isDrop ? baseSlice(array4, fromRight ? 0 : index4, fromRight ? index4 + 1 : length) : baseSlice(array4, fromRight ? index4 + 1 : 0, fromRight ? length : index4);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index4 = -1, result2 = Array2(length);
          while (++index4 < length) {
            var array4 = arrays[index4], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index4) {
                result2[index4] = baseDifference(result2[index4] || array4, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index4 = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index4 < length) {
            var value = index4 < valsLength ? values2[index4] : undefined2;
            assignFunc(result2, props[index4], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity11;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array4, start2, end) {
          var length = array4.length;
          end = end === undefined2 ? length : end;
          return !start2 && end >= length ? array4 : baseSlice(array4, start2, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index4 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index4 < length) {
            var result2 = compareAscending(objCriteria[index4], othCriteria[index4]);
            if (result2) {
              if (index4 >= ordersLength) {
                return result2;
              }
              var order = orders[index4];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array4) {
          var index4 = -1, length = source.length;
          array4 || (array4 = Array2(length));
          while (++index4 < length) {
            array4[index4] = source[index4];
          }
          return array4;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index4 = -1, length = props.length;
          while (++index4 < length) {
            var key = props[index4];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index4 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index4 < length) {
              var source = sources[index4];
              if (source) {
                assigner(object, source, index4, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index4 = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index4-- : ++index4 < length) {
              if (iteratee2(iterable[index4], index4, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index4 = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index4];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index4 = length, placeholder = getHolder(wrapper);
            while (index4--) {
              args[index4] = arguments[index4];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index4 = findIndexFunc(collection, predicate, fromIndex);
            return index4 > -1 ? iterable[iteratee2 ? collection[index4] : index4] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index4 = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index4--) {
              var func = funcs[index4];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index4 = wrapper ? index4 : length;
            while (++index4 < length) {
              func = funcs[index4];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index5 = 0, result2 = length ? funcs[index5].apply(this, args) : value;
              while (++index5 < length) {
                result2 = funcs[index5].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index4 = length;
            while (index4--) {
              args[index4] = arguments[index4];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start2, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start2, end, step)) {
              end = step = undefined2;
            }
            start2 = toFinite(start2);
            if (end === undefined2) {
              end = start2;
              start2 = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start2 < end ? 1 : -1 : toFinite(step);
            return baseRange(start2, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number4, precision) {
            number4 = toNumber(number4);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number4)) {
              var pair = (toString(number4) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number4);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array4.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array4);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array4;
          }
          var index4 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array4, other);
          stack.set(other, array4);
          while (++index4 < arrLength) {
            var arrValue = array4[index4], othValue = other[index4];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index4, other, array4, stack) : customizer(arrValue, othValue, index4, array4, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array4);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index4 = objLength;
          while (index4--) {
            var key = objProps[index4];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index4 < objLength) {
            key = objProps[index4];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array4 = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array4.length : 0;
          while (length--) {
            var data = array4[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map11, key) {
          var data = map11.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e6) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start2, end, transforms) {
          var index4 = -1, length = transforms.length;
          while (++index4 < length) {
            var data = transforms[index4], size2 = data.size;
            switch (data.type) {
              case "drop":
                start2 += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start2 + size2);
                break;
              case "takeRight":
                start2 = nativeMax(start2, end - size2);
                break;
            }
          }
          return { "start": start2, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path2, hasFunc) {
          path2 = castPath(path2, object);
          var index4 = -1, length = path2.length, result2 = false;
          while (++index4 < length) {
            var key = toKey(path2[index4]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index4 != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array4) {
          var length = array4.length, result2 = new array4.constructor(length);
          if (length && typeof array4[0] == "string" && hasOwnProperty.call(array4, "index")) {
            result2.index = array4.index;
            result2.input = array4.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index4, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index4;
          if (type == "number" ? isArrayLike(object) && isIndex(index4, object.length) : type == "string" && index4 in object) {
            return eq(object[index4], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start2, transform2) {
          start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
          return function() {
            var args = arguments, index4 = -1, length = nativeMax(args.length - start2, 0), array4 = Array2(length);
            while (++index4 < length) {
              array4[index4] = args[start2 + index4];
            }
            index4 = -1;
            var otherArgs = Array2(start2 + 1);
            while (++index4 < start2) {
              otherArgs[index4] = args[index4];
            }
            otherArgs[start2] = transform2(array4);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path2) {
          return path2.length < 2 ? object : baseGet(object, baseSlice(path2, 0, -1));
        }
        function reorder(array4, indexes4) {
          var arrLength = array4.length, length = nativeMin(indexes4.length, arrLength), oldArray = copyArray(array4);
          while (length--) {
            var index4 = indexes4[length];
            array4[length] = isIndex(index4, arrLength) ? oldArray[index4] : undefined2;
          }
          return array4;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count4 = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count4 >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count4 = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array4, size2) {
          var index4 = -1, length = array4.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index4 < size2) {
            var rand = baseRandom(index4, lastIndex), value = array4[rand];
            array4[rand] = array4[index4];
            array4[index4] = value;
          }
          array4.length = size2;
          return array4;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number4, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number4 || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e6) {
            }
            try {
              return func + "";
            } catch (e6) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array4, size2, guard) {
          if (guard ? isIterateeCall(array4, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array4 == null ? 0 : array4.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index4 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index4 < length) {
            result2[resIndex++] = baseSlice(array4, index4, index4 += size2);
          }
          return result2;
        }
        function compact(array4) {
          var index4 = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result2 = [];
          while (++index4 < length) {
            var value = array4[index4];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array4 = arguments[0], index4 = length;
          while (index4--) {
            args[index4 - 1] = arguments[index4];
          }
          return arrayPush(isArray(array4) ? copyArray(array4) : [array4], baseFlatten(args, 1));
        }
        var difference4 = baseRest(function(array4, values2) {
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array4, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array4, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array4, n3, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
          return baseSlice(array4, n3 < 0 ? 0 : n3, length);
        }
        function dropRight(array4, n3, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
          n3 = length - n3;
          return baseSlice(array4, 0, n3 < 0 ? 0 : n3);
        }
        function dropRightWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), true) : [];
        }
        function fill(array4, value, start2, end) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          if (start2 && typeof start2 != "number" && isIterateeCall(array4, value, start2)) {
            start2 = 0;
            end = length;
          }
          return baseFill(array4, value, start2, end);
        }
        function findIndex2(array4, predicate, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index4 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index4 < 0) {
            index4 = nativeMax(length + index4, 0);
          }
          return baseFindIndex(array4, getIteratee(predicate, 3), index4);
        }
        function findLastIndex(array4, predicate, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index4 = length - 1;
          if (fromIndex !== undefined2) {
            index4 = toInteger(fromIndex);
            index4 = fromIndex < 0 ? nativeMax(length + index4, 0) : nativeMin(index4, length - 1);
          }
          return baseFindIndex(array4, getIteratee(predicate, 3), index4, true);
        }
        function flatten(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseFlatten(array4, 1) : [];
        }
        function flattenDeep(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseFlatten(array4, INFINITY) : [];
        }
        function flattenDepth(array4, depth) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array4, depth);
        }
        function fromPairs(pairs4) {
          var index4 = -1, length = pairs4 == null ? 0 : pairs4.length, result2 = {};
          while (++index4 < length) {
            var pair = pairs4[index4];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array4) {
          return array4 && array4.length ? array4[0] : undefined2;
        }
        function indexOf(array4, value, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index4 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index4 < 0) {
            index4 = nativeMax(length + index4, 0);
          }
          return baseIndexOf(array4, value, index4);
        }
        function initial(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseSlice(array4, 0, -1) : [];
        }
        var intersection4 = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array4, separator) {
          return array4 == null ? "" : nativeJoin.call(array4, separator);
        }
        function last(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? array4[length - 1] : undefined2;
        }
        function lastIndexOf(array4, value, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index4 = length;
          if (fromIndex !== undefined2) {
            index4 = toInteger(fromIndex);
            index4 = index4 < 0 ? nativeMax(length + index4, 0) : nativeMin(index4, length - 1);
          }
          return value === value ? strictLastIndexOf(array4, value, index4) : baseFindIndex(array4, baseIsNaN, index4, true);
        }
        function nth(array4, n3) {
          return array4 && array4.length ? baseNth(array4, toInteger(n3)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array4, values2) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2) : array4;
        }
        function pullAllBy(array4, values2, iteratee2) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2, getIteratee(iteratee2, 2)) : array4;
        }
        function pullAllWith(array4, values2, comparator) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2, undefined2, comparator) : array4;
        }
        var pullAt = flatRest(function(array4, indexes4) {
          var length = array4 == null ? 0 : array4.length, result2 = baseAt(array4, indexes4);
          basePullAt(array4, arrayMap(indexes4, function(index4) {
            return isIndex(index4, length) ? +index4 : index4;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array4, predicate) {
          var result2 = [];
          if (!(array4 && array4.length)) {
            return result2;
          }
          var index4 = -1, indexes4 = [], length = array4.length;
          predicate = getIteratee(predicate, 3);
          while (++index4 < length) {
            var value = array4[index4];
            if (predicate(value, index4, array4)) {
              result2.push(value);
              indexes4.push(index4);
            }
          }
          basePullAt(array4, indexes4);
          return result2;
        }
        function reverse4(array4) {
          return array4 == null ? array4 : nativeReverse.call(array4);
        }
        function slice5(array4, start2, end) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array4, start2, end)) {
            start2 = 0;
            end = length;
          } else {
            start2 = start2 == null ? 0 : toInteger(start2);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array4, start2, end);
        }
        function sortedIndex(array4, value) {
          return baseSortedIndex(array4, value);
        }
        function sortedIndexBy(array4, value, iteratee2) {
          return baseSortedIndexBy(array4, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array4, value) {
          var length = array4 == null ? 0 : array4.length;
          if (length) {
            var index4 = baseSortedIndex(array4, value);
            if (index4 < length && eq(array4[index4], value)) {
              return index4;
            }
          }
          return -1;
        }
        function sortedLastIndex(array4, value) {
          return baseSortedIndex(array4, value, true);
        }
        function sortedLastIndexBy(array4, value, iteratee2) {
          return baseSortedIndexBy(array4, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array4, value) {
          var length = array4 == null ? 0 : array4.length;
          if (length) {
            var index4 = baseSortedIndex(array4, value, true) - 1;
            if (eq(array4[index4], value)) {
              return index4;
            }
          }
          return -1;
        }
        function sortedUniq(array4) {
          return array4 && array4.length ? baseSortedUniq(array4) : [];
        }
        function sortedUniqBy(array4, iteratee2) {
          return array4 && array4.length ? baseSortedUniq(array4, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseSlice(array4, 1, length) : [];
        }
        function take(array4, n3, guard) {
          if (!(array4 && array4.length)) {
            return [];
          }
          n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
          return baseSlice(array4, 0, n3 < 0 ? 0 : n3);
        }
        function takeRight(array4, n3, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
          n3 = length - n3;
          return baseSlice(array4, n3 < 0 ? 0 : n3, length);
        }
        function takeRightWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3)) : [];
        }
        var union4 = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array4) {
          return array4 && array4.length ? baseUniq(array4) : [];
        }
        function uniqBy(array4, iteratee2) {
          return array4 && array4.length ? baseUniq(array4, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array4, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array4 && array4.length ? baseUniq(array4, undefined2, comparator) : [];
        }
        function unzip(array4) {
          if (!(array4 && array4.length)) {
            return [];
          }
          var length = 0;
          array4 = arrayFilter(array4, function(group4) {
            if (isArrayLikeObject(group4)) {
              length = nativeMax(group4.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index4) {
            return arrayMap(array4, baseProperty(index4));
          });
        }
        function unzipWith(array4, iteratee2) {
          if (!(array4 && array4.length)) {
            return [];
          }
          var result2 = unzip(array4);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group4) {
            return apply(iteratee2, undefined2, group4);
          });
        }
        var without = baseRest(function(array4, values2) {
          return isArrayLikeObject(array4) ? baseDifference(array4, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start2 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
            return this.thru(interceptor);
          }
          value = value.slice(start2, +start2 + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array4) {
            if (length && !array4.length) {
              array4.push(undefined2);
            }
            return array4;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse4],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse4);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every4(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter4(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex2);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map10(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map10(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map10(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path2, args) {
          var index4 = -1, isFunc = typeof path2 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index4] = isFunc ? apply(path2, value, args) : baseInvoke(value, path2, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map10(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce4(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n3, guard) {
          if (guard ? isIterateeCall(collection, n3, guard) : n3 === undefined2) {
            n3 = 1;
          } else {
            n3 = toInteger(n3);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n3);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some4(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n3, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n3 = toInteger(n3);
          return function() {
            if (--n3 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n3, guard) {
          n3 = guard ? undefined2 : n3;
          n3 = func && n3 == null ? func.length : n3;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n3);
        }
        function before(n3, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n3 = toInteger(n3);
          return function() {
            if (--n3 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n3 <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time4) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time4;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time4) {
            lastInvokeTime = time4;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time4) : result2;
          }
          function remainingWait(time4) {
            var timeSinceLastCall = time4 - lastCallTime, timeSinceLastInvoke = time4 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time4) {
            var timeSinceLastCall = time4 - lastCallTime, timeSinceLastInvoke = time4 - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time4 = now();
            if (shouldInvoke(time4)) {
              return trailingEdge(time4);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time4));
          }
          function trailingEdge(time4) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time4);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush2() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time4 = now(), isInvoking = shouldInvoke(time4);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time4;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush2;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once2(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index4 = -1, length = nativeMin(args.length, funcsLength);
            while (++index4 < length) {
              args[index4] = transforms[index4].call(this, args[index4]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes4) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes4);
        });
        function rest(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 === undefined2 ? start2 : toInteger(start2);
          return baseRest(func, start2);
        }
        function spread(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
          return baseRest(function(args) {
            var array4 = args[start2], otherArgs = castSlice(args, 0, start2);
            if (array4) {
              arrayPush(otherArgs, array4);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign2 = value < 0 ? -1 : 1;
            return sign2 * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults2 = baseRest(function(object, sources) {
          object = Object2(object);
          var index4 = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index4 < length) {
            var source = sources[index4];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path2, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path2);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path2) {
          return object != null && hasPath(object, path2, baseHas);
        }
        function hasIn(object, path2) {
          return object != null && hasPath(object, path2, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity11));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge4 = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path2) {
            path2 = castPath(path2, object);
            isDeep || (isDeep = path2.length > 1);
            return path2;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path2) {
            return predicate(value, path2[0]);
          });
        }
        function result(object, path2, defaultValue) {
          path2 = castPath(path2, object);
          var index4 = -1, length = path2.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index4 < length) {
            var value = object == null ? undefined2 : object[toKey(path2[index4])];
            if (value === undefined2) {
              index4 = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set4(object, path2, value) {
          return object == null ? object : baseSet(object, path2, value);
        }
        function setWith(object, path2, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path2, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index4, object2) {
            return iteratee2(accumulator, value, index4, object2);
          });
          return accumulator;
        }
        function unset(object, path2) {
          return object == null ? true : baseUnset(object, path2);
        }
        function update3(object, path2, updater) {
          return object == null ? object : baseUpdate(object, path2, castFunction(updater));
        }
        function updateWith(object, path2, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path2, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp2(number4, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number4), lower, upper);
        }
        function inRange(number4, start2, end) {
          start2 = toFinite(start2);
          if (end === undefined2) {
            end = start2;
            start2 = 0;
          } else {
            end = toFinite(end);
          }
          number4 = toNumber(number4);
          return baseInRange(number4, start2, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index4) {
          word = word.toLowerCase();
          return result2 + (index4 ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index4) {
          return result2 + (index4 ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index4) {
          return result2 + (index4 ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad4(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n3, guard) {
          if (guard ? isIterateeCall(string, n3, guard) : n3 === undefined2) {
            n3 = 1;
          } else {
            n3 = toInteger(n3);
          }
          return baseRepeat(toString(string), n3);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index4) {
          return result2 + (index4 ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index4) {
          return result2 + (index4 ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index4 = 0, interpolate2 = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate2.source + "|" + (interpolate2 === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index4, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index4 = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start2, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start2 = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start2).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index4 = result2.lastIndexOf(separator);
            if (index4 > -1) {
              result2 = result2.slice(0, index4);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index4) {
          return result2 + (index4 ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e6) {
            return isError(e6) ? e6 : new Error2(e6);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs4) {
          var length = pairs4 == null ? 0 : pairs4.length, toIteratee = getIteratee();
          pairs4 = !length ? [] : arrayMap(pairs4, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index4 = -1;
            while (++index4 < length) {
              var pair = pairs4[index4];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity11(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path2, srcValue) {
          return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path2, args) {
          return function(object) {
            return baseInvoke(object, path2, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path2) {
            return baseInvoke(object, path2, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n3) {
          n3 = toInteger(n3);
          return baseRest(function(args) {
            return baseNth(args, n3);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path2) {
          return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
        }
        function propertyOf(object) {
          return function(path2) {
            return object == null ? undefined2 : baseGet(object, path2);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n3, iteratee2) {
          n3 = toInteger(n3);
          if (n3 < 1 || n3 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index4 = MAX_ARRAY_LENGTH, length = nativeMin(n3, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n3 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index4 < n3) {
            iteratee2(index4);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix2) {
          var id = ++idCounter;
          return toString(prefix2) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max5(array4) {
          return array4 && array4.length ? baseExtremum(array4, identity11, baseGt) : undefined2;
        }
        function maxBy(array4, iteratee2) {
          return array4 && array4.length ? baseExtremum(array4, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean4(array4) {
          return baseMean(array4, identity11);
        }
        function meanBy(array4, iteratee2) {
          return baseMean(array4, getIteratee(iteratee2, 2));
        }
        function min5(array4) {
          return array4 && array4.length ? baseExtremum(array4, identity11, baseLt) : undefined2;
        }
        function minBy(array4, iteratee2) {
          return array4 && array4.length ? baseExtremum(array4, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum5(array4) {
          return array4 && array4.length ? baseSum(array4, identity11) : 0;
        }
        function sumBy(array4, iteratee2) {
          return array4 && array4.length ? baseSum(array4, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign2;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults2;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference4;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter4;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection4;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map10;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge4;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once2;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse4;
        lodash.sampleSize = sampleSize;
        lodash.set = set4;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice5;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray2;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union4;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update3;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp2;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every4;
        lodash.find = find;
        lodash.findIndex = findIndex2;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt2;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity11;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual2;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max5;
        lodash.maxBy = maxBy;
        lodash.mean = mean4;
        lodash.meanBy = meanBy;
        lodash.min = min5;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now;
        lodash.pad = pad4;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce4;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some4;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum5;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index4) {
          LazyWrapper.prototype[methodName] = function(n3) {
            n3 = n3 === undefined2 ? 1 : nativeMax(toInteger(n3), 0);
            var result2 = this.__filtered__ && !index4 ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n3, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n3, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n3) {
            return this.reverse()[methodName](n3).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index4) {
          var type = index4 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index4) {
          var takeName = "take" + (index4 ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index4) {
          var dropName = "drop" + (index4 ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity11);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
          if (typeof path2 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path2, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start2, end) {
          start2 = toInteger(start2);
          var result2 = this;
          if (result2.__filtered__ && (start2 > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start2 < 0) {
            result2 = result2.takeRight(-start2);
          } else if (start2) {
            result2 = result2.drop(start2);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start2);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array4, values) {
      return isArrayLikeObject(array4) ? baseDifference(array4, values) : [];
    });
    module.exports = without;
  }
});

// node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var globals_exports = {};
__export(globals_exports, {
  assign: () => assign,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to,
  willAdvance: () => willAdvance
});
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time4 = raf.now() + ms;
  const cancel = () => {
    const i3 = timeouts.findIndex((t6) => t6.cancel == cancel);
    if (~i3)
      timeouts.splice(i3, 1);
    pendingCount -= ~i3 ? 1 : 0;
  };
  const timeout = { time: time4, handler, cancel };
  timeouts.splice(findTimeout(time4), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time4) => ~(~timeouts.findIndex((t6) => t6.time > time4) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  () => {
  }
);
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn(
      "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
    );
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count4 = findTimeout(ts);
  if (count4) {
    eachSafely(timeouts.splice(0, count4), (t6) => t6.handler());
    pendingCount -= count4;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e6) {
      raf.catch(e6);
    }
  });
}
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a4) => !!a4 && a4.constructor.name === "Object",
  fun: (a4) => typeof a4 === "function",
  str: (a4) => typeof a4 === "string",
  num: (a4) => typeof a4 === "number",
  und: (a4) => a4 === void 0
};
function isEqual(a4, b3) {
  if (is.arr(a4)) {
    if (!is.arr(b3) || a4.length !== b3.length)
      return false;
    for (let i3 = 0; i3 < a4.length; i3++) {
      if (a4[i3] !== b3[i3])
        return false;
    }
    return true;
  }
  return a4 === b3;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i3 = 0; i3 < obj.length; i3++) {
      fn.call(ctx2, obj[i3], `${i3}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a4) => is.und(a4) ? [] : is.arr(a4) ? a4 : [a4];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to;
var colors = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals) => {
  if (globals.to)
    to = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== void 0)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  /** Advance the given animation on every frame until idle. */
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  /** Advance all animations by the given time. */
  advance,
  /** Call this when an animation's priority changes. */
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  /**
   * Clear all animations. For testing purposes.
   *
   * ☠️ Never call this from within the frameloop.
   */
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(
    findIndex(currentFrame, (other) => other.priority > animation.priority),
    0,
    animation
  );
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i3 = 0; i3 < currentFrame.length; i3++) {
    const animation = currentFrame[i3];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index4 = arr.findIndex(test);
  return index4 < 0 ? arr.length : index4;
}
var clamp = (min5, max5, v4) => Math.min(Math.max(v4, min5), max5);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp(
  "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
);
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color6) {
  let match;
  if (typeof color6 === "number") {
    return color6 >>> 0 === color6 && color6 >= 0 && color6 <= 4294967295 ? color6 : null;
  }
  if (match = hex6.exec(color6))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors && colors[color6] !== void 0) {
    return colors[color6];
  }
  if (match = rgb.exec(color6)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match = rgba.exec(color6)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    parse1(match[4])) >>> // a
    0;
  }
  if (match = hex3.exec(color6)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match = hex8.exec(color6))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color6)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      match[4] + match[4],
      // a
      16
    ) >>> 0;
  }
  if (match = hsl.exec(color6)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match = hsla.exec(color6)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | parse1(match[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p3, q, t6) {
  if (t6 < 0)
    t6 += 1;
  if (t6 > 1)
    t6 -= 1;
  if (t6 < 1 / 6)
    return p3 + (q - p3) * 6 * t6;
  if (t6 < 1 / 2)
    return q;
  if (t6 < 2 / 3)
    return p3 + (q - p3) * (2 / 3 - t6) * 6;
  return p3;
}
function hslToRgb(h2, s4, l3) {
  const q = l3 < 0.5 ? l3 * (1 + s4) : l3 + s4 - l3 * s4;
  const p3 = 2 * l3 - q;
  const r3 = hue2rgb(p3, q, h2 + 1 / 3);
  const g3 = hue2rgb(p3, q, h2);
  const b3 = hue2rgb(p3, q, h2 - 1 / 3);
  return Math.round(r3 * 255) << 24 | Math.round(g3 * 255) << 16 | Math.round(b3 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  const r3 = (int32Color & 4278190080) >>> 24;
  const g3 = (int32Color & 16711680) >>> 16;
  const b3 = (int32Color & 65280) >>> 8;
  const a4 = (int32Color & 255) / 255;
  return `rgba(${r3}, ${g3}, ${b3}, ${a4})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t6) => t6);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(
      input,
      inputRange[range2],
      inputRange[range2 + 1],
      outputRange[range2],
      outputRange[range2 + 1],
      easing,
      extrapolateLeft,
      extrapolateRight,
      config2.map
    );
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map10) {
  let result = map10 ? map10(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i3 = 1; i3 < inputRange.length - 1; ++i3)
    if (inputRange[i3] >= input)
      break;
  return i3 - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x5) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x5 < 1 / d1) {
    return n1 * x5 * x5;
  } else if (x5 < 2 / d1) {
    return n1 * (x5 -= 1.5 / d1) * x5 + 0.75;
  } else if (x5 < 2.5 / d1) {
    return n1 * (x5 -= 2.25 / d1) * x5 + 0.9375;
  } else {
    return n1 * (x5 -= 2.625 / d1) * x5 + 0.984375;
  }
};
var easings = {
  linear: (x5) => x5,
  easeInQuad: (x5) => x5 * x5,
  easeOutQuad: (x5) => 1 - (1 - x5) * (1 - x5),
  easeInOutQuad: (x5) => x5 < 0.5 ? 2 * x5 * x5 : 1 - Math.pow(-2 * x5 + 2, 2) / 2,
  easeInCubic: (x5) => x5 * x5 * x5,
  easeOutCubic: (x5) => 1 - Math.pow(1 - x5, 3),
  easeInOutCubic: (x5) => x5 < 0.5 ? 4 * x5 * x5 * x5 : 1 - Math.pow(-2 * x5 + 2, 3) / 2,
  easeInQuart: (x5) => x5 * x5 * x5 * x5,
  easeOutQuart: (x5) => 1 - Math.pow(1 - x5, 4),
  easeInOutQuart: (x5) => x5 < 0.5 ? 8 * x5 * x5 * x5 * x5 : 1 - Math.pow(-2 * x5 + 2, 4) / 2,
  easeInQuint: (x5) => x5 * x5 * x5 * x5 * x5,
  easeOutQuint: (x5) => 1 - Math.pow(1 - x5, 5),
  easeInOutQuint: (x5) => x5 < 0.5 ? 16 * x5 * x5 * x5 * x5 * x5 : 1 - Math.pow(-2 * x5 + 2, 5) / 2,
  easeInSine: (x5) => 1 - Math.cos(x5 * Math.PI / 2),
  easeOutSine: (x5) => Math.sin(x5 * Math.PI / 2),
  easeInOutSine: (x5) => -(Math.cos(Math.PI * x5) - 1) / 2,
  easeInExpo: (x5) => x5 === 0 ? 0 : Math.pow(2, 10 * x5 - 10),
  easeOutExpo: (x5) => x5 === 1 ? 1 : 1 - Math.pow(2, -10 * x5),
  easeInOutExpo: (x5) => x5 === 0 ? 0 : x5 === 1 ? 1 : x5 < 0.5 ? Math.pow(2, 20 * x5 - 10) / 2 : (2 - Math.pow(2, -20 * x5 + 10)) / 2,
  easeInCirc: (x5) => 1 - Math.sqrt(1 - Math.pow(x5, 2)),
  easeOutCirc: (x5) => Math.sqrt(1 - Math.pow(x5 - 1, 2)),
  easeInOutCirc: (x5) => x5 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x5, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x5 + 2, 2)) + 1) / 2,
  easeInBack: (x5) => c3 * x5 * x5 * x5 - c1 * x5 * x5,
  easeOutBack: (x5) => 1 + c3 * Math.pow(x5 - 1, 3) + c1 * Math.pow(x5 - 1, 2),
  easeInOutBack: (x5) => x5 < 0.5 ? Math.pow(2 * x5, 2) * ((c2 + 1) * 2 * x5 - c2) / 2 : (Math.pow(2 * x5 - 2, 2) * ((c2 + 1) * (x5 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x5) => x5 === 0 ? 0 : x5 === 1 ? 1 : -Math.pow(2, 10 * x5 - 10) * Math.sin((x5 * 10 - 10.75) * c4),
  easeOutElastic: (x5) => x5 === 0 ? 0 : x5 === 1 ? 1 : Math.pow(2, -10 * x5) * Math.sin((x5 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x5) => x5 === 0 ? 0 : x5 === 1 ? 1 : x5 < 0.5 ? -(Math.pow(2, 20 * x5 - 10) * Math.sin((20 * x5 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x5 + 10) * Math.sin((20 * x5 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x5) => 1 - bounceOut(1 - x5),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x5) => x5 < 0.5 ? (1 - bounceOut(1 - 2 * x5)) / 2 : (1 + bounceOut(2 * x5 - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count4 = observers.size - 1;
    if (count4) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count4, observer2);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value2) {
      return value2;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p22, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator2 = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? (
      // match color names, ignore partial matches
      new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g")
    ) : (
      // never match
      /^\b$/
    );
  const output = config2.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map(
    (_, i3) => keyframes.map((values) => {
      if (!(i3 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i3];
    })
  );
  const interpolators = outputRanges.map(
    (output2) => createInterpolator({ ...config2, output: output2 })
  );
  return (input) => {
    var _a;
    const missingUnit = !unitRegex.test(output[0]) && ((_a = output.find((value) => unitRegex.test(value))) == null ? void 0 : _a.replace(numberRegex, ""));
    let i3 = 0;
    return output[0].replace(
      numberRegex,
      () => `${interpolators[i3++](input)}${missingUnit || ""}`
    ).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(
    `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`
  );
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(
    `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`
  );
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR
  !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));
}
var useIsomorphicLayoutEffect = isSSR() ? import_react4.useEffect : import_react4.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react3.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update22 = (0, import_react2.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update22(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react5.useState)(
    () => ({
      inputs,
      result: getResult()
    })
  );
  const committed = (0, import_react5.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(
      inputs && cache.inputs && areInputsEqual(inputs, cache.inputs)
    );
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react5.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i3 = 0; i3 < next.length; i3++) {
    if (next[i3] !== prev[i3]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react6.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react7.useRef)();
  (0, import_react7.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
var React = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  /** Get every `AnimatedValue` used by this node. */
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  /** @internal */
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  /** @internal */
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    const value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  /** Replace the raw object data */
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  /** Create a payload set. */
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  /** Add to a payload set. */
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  /** @internal */
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i3) => node.setValue(source[i3])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component, host2) => {
  const hasInstance = (
    // Function components must use "forwardRef" to avoid being
    // re-rendered on every animation frame.
    !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent
  );
  return (0, import_react9.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react9.useRef)(null);
    const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, import_react9.useCallback)(
      (value) => {
        instanceRef.current = updateRef(givenRef, value);
      },
      [givenRef]
    );
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react9.useRef)();
    useIsomorphicLayoutEffect(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(
            observerRef.current.deps,
            (dep) => removeFluidObserver(dep, observerRef.current)
          );
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react9.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React.createElement(Component, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host2.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: applyAnimatedValues2 = () => false,
  createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle,
    getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated2[key] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var React2 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_react14 = __toESM(require_react(), 1);
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  // Transition props
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  // Internal props
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count4 = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count4++;
    }
  });
  if (count4) {
    return forward;
  }
}
function inferTo(props) {
  const to22 = getForwardProps(props);
  if (to22) {
    const out = { to: to22 };
    eachProp(props, (val, key) => key in to22 || (out[key] = val));
    return out;
  }
  return { ...props };
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to22) {
  return is.fun(to22) || is.arr(to22) && is.obj(to22[0]);
}
function detachRefs(ctrl, ref) {
  var _a;
  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  var _a;
  if (ref && ctrl.ref !== ref) {
    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, { key, props, defaultProps, state, actions }) {
  return new Promise((resolve, reject) => {
    let delay;
    let timeout;
    let cancel = matchProp(props.cancel ?? (defaultProps == null ? void 0 : defaultProps.cancel), key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
  target.get(),
  results.every((result) => result.finished)
);
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to22, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to22 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to22;
    const defaultProps = getDefaultProps(
      props,
      (value, key) => (
        // The `onRest` prop is only called when the `runAsync` promise is resolved.
        key === "onRest" ? void 0 : value
      )
    );
    let preventBail;
    let bail;
    const bailPromise = new Promise(
      (resolve, reject) => (preventBail = resolve, bail = reject)
    );
    const bailIfEnded = (bailSignal) => {
      const bailResult = (
        // The `cancel` prop or `stop` method was used.
        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
        callId !== state.asyncId && getFinishedResult(target, false)
      );
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to22)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to22);
      } else {
        animating = Promise.resolve(to22(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t6) => t6.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super(
      "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
    );
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  /** Get the current value */
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  /** Create a spring that maps our value to another value */
  to(...args) {
    return globals_exports.to(this, args);
  }
  /** @deprecated Use the `to` method instead. */
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count4) {
    if (count4 == 1)
      this._attach();
  }
  observerRemoved(count4) {
    if (count4 == 0)
      this._detach();
  }
  /** Called when the first child is added. */
  _attach() {
  }
  /** Called when the last child is removed. */
  _detach() {
  }
  /** Tell our children about our new value */
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  /** Tell our children about our new priority */
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation();
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  /** Equals true when not advancing on each frame. */
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  /**
   * When true, this value has been animated at least once.
   */
  get hasAnimated() {
    return hasAnimated(this);
  }
  /**
   * When true, this value has an unfinished animation,
   * which is either active or paused.
   */
  get isAnimating() {
    return isAnimating(this);
  }
  /**
   * When true, all current and future animations are paused.
   */
  get isPaused() {
    return isPaused(this);
  }
  /**
   *
   *
   */
  get isDelayed() {
    return this._state.delayed;
  }
  /** Advance the current animation by a number of milliseconds */
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i3) => {
      if (node2.done)
        return;
      const to22 = (
        // Animated strings always go from 0 to 1.
        node2.constructor == AnimatedString ? 1 : payload ? payload[i3].lastPosition : toValues[i3]
      );
      let finished = anim.immediate;
      let position = to22;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i3];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i3] : config2.velocity;
        let velocity;
        const precision = config2.precision || (from == to22 ? 5e-3 : Math.min(1, Math.abs(to22 - from) * 1e-3));
        if (!is.und(config2.duration)) {
          let p3 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p3 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p3 = p3 > 1 ? 1 : p3 < 0 ? 0 : p3;
            node2.durationProgress = p3;
          }
          position = from + config2.easing(p3) * (to22 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p3 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e6 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e6);
          finished = Math.abs(node2.lastPosition - position) <= precision;
          velocity = v0 * e6;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to22 ? node2.v0 > 0 : from < to22;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n3 = 0; n3 < numSteps; ++n3) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to22 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to22 || position > to22 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to22;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to22);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i3].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  /** Set the current value, while stopping the current animation */
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  /**
   * Freeze the active animation in time, as well as any updates merged
   * before `resume` is called.
   */
  pause() {
    this._update({ pause: true });
  }
  /** Resume the animation if paused. */
  resume() {
    this._update({ pause: false });
  }
  /** Skip to the end of the current animation. */
  finish() {
    if (isAnimating(this)) {
      const { to: to22, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to22, false);
        }
        this._stop();
      });
    }
    return this;
  }
  /** Push props into the pending queue. */
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to22, arg2) {
    let queue;
    if (!is.und(to22)) {
      queue = [is.obj(to22) ? to22 : { ...arg2, to: to22 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(
      queue.map((props) => {
        const up = this._update(props);
        return up;
      })
    ).then((results) => getCombinedResult(this, results));
  }
  /**
   * Stop the current animation, and cancel any delayed updates.
   *
   * Pass `true` to call `onRest` with `cancelled: true`.
   */
  stop(cancel) {
    const { to: to22 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to22, cancel));
    return this;
  }
  /** Restart the animation. */
  reset() {
    this._update({ reset: true });
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  /**
   * Parse the `to` and `from` range from the given `props` object.
   *
   * This also ensures the initial value is available to animated components
   * during the render phase.
   */
  _prepareNode(props) {
    const key = this.key || "";
    let { to: to22, from } = props;
    to22 = is.obj(to22) ? to22[key] : to22;
    if (to22 == null || isAsyncTo(to22)) {
      to22 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = { to: to22, from };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to22, from] = [from, to22];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to22);
      }
    }
    return range;
  }
  /** Every update is processed by this method before merging. */
  _update({ ...props }, isLoop) {
    const { key, defaultProps } = this;
    if (props.default)
      Object.assign(
        defaultProps,
        getDefaultProps(
          props,
          (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value
        )
      );
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error(
        "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
      );
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(
              this,
              "onPause",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(
              this,
              "onResume",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  /** Merge props into the current animation */
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const { key, defaultProps, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to22 = prevTo, from = prevFrom } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to22))) {
      to22 = from;
    }
    if (props.reverse)
      [to22, from] = [from, to22];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to22, prevTo);
    if (hasToChanged) {
      this._focus(to22);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(
        config2,
        callProp(props.config, key),
        // Avoid calling the same "config" prop twice.
        props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0
      );
    }
    let node = getAnimated(this);
    if (!node || is.und(to22)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = (
      // When `reset` is undefined, the `from` prop implies `reset: true`,
      // except for declarative updates. When `reset` is defined, there
      // must exist a value to animate from.
      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key)
    );
    const value = reset ? from : this.get();
    const goal = computeGoal(to22);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to22);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(
            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
          );
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to22);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to22) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            var _a;
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  /** Update the `animation.to` value, which might be a `FluidValue` */
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      addFluidObserver(to22, this);
      if (isFrameValue(to22)) {
        priority2 = to22.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      removeFluidObserver(to22, this);
    }
  }
  /**
   * Update the current value from outside the frameloop,
   * and return the `Animated` node.
   */
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(
        this,
        "onStart",
        getFinishedResult(this, checkFinished(this, anim.to)),
        this
      );
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  // This method resets the animation state (even if already animating) to
  // ensure the latest from/to range is used, and it also ensures this spring
  // is added to the frameloop.
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  /**
   * Exit the frameloop and notify `onRest` listeners.
   *
   * Always wrap `_stop` calls with `batchedUpdates`.
   */
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to22) {
  const goal = computeGoal(to22);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to22 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse4 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      // Avoid updating default props when looping.
      default: false,
      // Never loop the `pause` prop.
      pause: void 0,
      // For the "reverse" prop to loop as expected, the "to" prop
      // must be undefined. The "reverse" prop is ignored when the
      // "to" prop is an array or function.
      to: !reverse4 || isAsyncTo(to22) ? to22 : void 0,
      // Ignore the "from" prop except on reset.
      from: reset ? props.from : void 0,
      reset,
      // The "loop" prop can return a "useSpring" props object to
      // override any of the original props.
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to22, from } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to22))
    findDefined(to22, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update22 = createUpdate(props);
  if (is.und(update22.default)) {
    update22.default = getDefaultProps(update22);
  }
  return update22;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _a, _b, _c, _d;
  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);
  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  /**
   * Equals `true` when no spring values are in the frameloop, and
   * no async animation is currently active.
   */
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  /** Get the current values of our springs */
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  /** Set the current values without animating. */
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  /** Push an update onto the queue of each value. */
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  /**
   * Start the queued animations for every spring, and resolve the returned
   * promise once all queued animations have finished or been cancelled.
   *
   * When you pass a queue (instead of nothing), that queue is used instead of
   * the queued animations added with the `update` method, which are left alone.
   */
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  /** @internal */
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  /** Freeze the active animation in time */
  pause(keys) {
    if (is.und(keys)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  /** Resume the animation if paused. */
  resume(keys) {
    if (is.und(keys)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  /** Call a function once per spring value */
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  /** @internal Called at the end of every animation frame */
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
    (results) => getCombinedResult(ctrl, results)
  );
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys, to: to22, from, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to22 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to22) || is.fun(to22) ? to22 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({ finished, cancelled }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map(
    (key) => ctrl.springs[key].start(props)
  );
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(
      scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop,
          resume: noop,
          start(props2, resolve) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(
                runAsync(
                  asyncTo,
                  props2,
                  state,
                  ctrl
                )
              );
            }
          }
        }
      })
    );
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to22);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: void 0 };
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = (0, import_react11.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return React2.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React2.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = _getProps(props, ctrl, i3);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i3 = current.indexOf(ctrl);
    if (~i3)
      current.splice(i3, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl, i3) => {
      const update22 = is.fun(values) ? values(i3, ctrl) : values;
      if (update22) {
        ctrl.set(update22);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = this._getProps(props, ctrl, i3);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i3) => ctrl.update(this._getProps(props, ctrl, i3)));
    return this;
  };
  const _getProps = function(arg, ctrl, index4) {
    return is.fun(arg) ? arg(index4, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react10.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const layoutId = (0, import_react10.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react10.useMemo)(
    () => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }),
    []
  );
  const ctrls = (0, import_react10.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react10.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react10.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i3 = startIndex; i3 < endIndex; i3++) {
      const ctrl = ctrls.current[i3] || (ctrls.current[i3] = new Controller(null, state.flush));
      const update22 = propsFn ? propsFn(i3, ctrl) : props[i3];
      if (update22) {
        updates[i3] = declareUpdate(update22);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i3) => getSprings(ctrl, updates[i3]));
  const context = (0, import_react10.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i3) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update22 = updates[i3];
      if (update22) {
        replaceRef(ctrl, update22.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update22);
        } else {
          ctrl.start(update22);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x5) => ({ ...x5 }));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(
    1,
    isFn ? props : [props],
    isFn ? deps || [] : deps
  );
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort: sort4,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react13.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react13.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useIsomorphicLayoutEffect(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(transitions, (t6) => {
      ref == null ? void 0 : ref.add(t6.ctrl);
      t6.ctrl.ref = ref;
    });
    return () => {
      each(usedTransitions.current, (t6) => {
        if (t6.expired) {
          clearTimeout(t6.expirationId);
        }
        detachRefs(t6.ctrl, ref);
        t6.ctrl.stop(true);
      });
    };
  });
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useIsomorphicLayoutEffect(
    () => each(expired, ({ ctrl, item, key }) => {
      detachRefs(ctrl, ref);
      callProp(onDestroyed, item, key);
    })
  );
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t6, i3) => {
      if (t6.expired) {
        clearTimeout(t6.expirationId);
        expired.push(t6);
      } else {
        i3 = reused[i3] = keys.indexOf(t6.key);
        if (~i3)
          transitions[i3] = t6;
      }
    });
  each(items, (item, i3) => {
    if (!transitions[i3]) {
      transitions[i3] = {
        key: keys[i3],
        item,
        phase: "mount",
        ctrl: new Controller()
      };
      transitions[i3].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i3 = -1;
    const { leave } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t6 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i3 = transitions.indexOf(t6);
        transitions[i3] = { ...t6, item: items[keyIndex] };
      } else if (leave) {
        transitions.splice(++i3, 0, t6);
      }
    });
  }
  if (is.fun(sort4)) {
    transitions.sort((a4, b3) => sort4(a4.item, b3.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = (0, import_react13.useRef)(/* @__PURE__ */ new Map());
  const forceChange = (0, import_react13.useRef)(false);
  each(transitions, (t6, i3) => {
    const key = t6.key;
    const prevPhase = t6.phase;
    const p3 = propsFn ? propsFn() : props;
    let to22;
    let phase;
    const propsDelay = callProp(p3.delay || 0, key);
    if (prevPhase == "mount") {
      to22 = p3.enter;
      phase = "enter";
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != "leave") {
        if (isLeave) {
          to22 = p3.leave;
          phase = "leave";
        } else if (to22 = p3.update) {
          phase = "update";
        } else
          return;
      } else if (!isLeave) {
        to22 = p3.enter;
        phase = "enter";
      } else
        return;
    }
    to22 = callProp(to22, t6.item, i3);
    to22 = is.obj(to22) ? inferTo(to22) : { to: to22 };
    if (!to22.config) {
      const config2 = propsConfig || defaultProps.config;
      to22.config = callProp(config2, t6.item, i3, phase);
    }
    delay += trail;
    const payload = {
      ...defaultProps,
      // we need to add our props.delay value you here.
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p3.immediate,
      // This prevents implied resets.
      reset: false,
      // Merge any phase-specific props.
      ...to22
    };
    if (phase == "enter" && is.und(payload.from)) {
      const p22 = propsFn ? propsFn() : props;
      const from = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
      payload.from = callProp(from, t6.item, i3);
    }
    const { onResolve } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t26 = transitions2.find((t36) => t36.key === key);
      if (!t26)
        return;
      if (result.cancelled && t26.phase != "update") {
        return;
      }
      if (t26.ctrl.idle) {
        const idle = transitions2.every((t36) => t36.ctrl.idle);
        if (t26.phase == "leave") {
          const expiry = callProp(expires, t26.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t26.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t26.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t36) => t36.expired)) {
          exitingTransitions.current.delete(t26);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t6.ctrl, payload);
    if (phase === "leave" && exitBeforeEnter) {
      exitingTransitions.current.set(t6, { phase, springs, payload });
    } else {
      changes.set(t6, { phase, springs, payload });
    }
  });
  const context = (0, import_react13.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    if (hasContext) {
      each(transitions, (t6) => {
        t6.ctrl.start({ default: context });
      });
    }
  }, [context]);
  each(changes, (_, t6) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t6.key);
      transitions.splice(ind, 1);
    }
  });
  useIsomorphicLayoutEffect(
    () => {
      each(
        exitingTransitions.current.size ? exitingTransitions.current : changes,
        ({ phase, payload }, t6) => {
          const { ctrl } = t6;
          t6.phase = phase;
          ref == null ? void 0 : ref.add(ctrl);
          if (hasContext && phase == "enter") {
            ctrl.start({ default: context });
          }
          if (payload) {
            replaceRef(ctrl, payload.ref);
            if ((ctrl.ref || ref) && !forceChange.current) {
              ctrl.update(payload);
            } else {
              ctrl.start(payload);
              if (forceChange.current) {
                forceChange.current = false;
              }
            }
          }
        }
      );
    },
    reset ? void 0 : deps
  );
  const renderTransitions = (render) => React22.createElement(React22.Fragment, null, transitions.map((t6, i3) => {
    const { springs } = changes.get(t6) || t6.ctrl;
    const elem = render({ ...springs }, t6.item, t6, i3);
    return elem && elem.type ? React22.createElement(
      elem.type,
      {
        ...elem.props,
        key: is.str(t6.key) || is.num(t6.key) ? t6.key : t6.ctrl.id,
        ref: elem.ref
      }
    ) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, { key, keys = key }, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t6 = prevTransitions && prevTransitions.find(
        (t26) => t26.item === item && t26.phase !== "leave" && !reused.has(t26)
      );
      if (t6) {
        reused.add(t6);
        return t6.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set();
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  // Observe our sources only when we're observed.
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  // Stop observing our sources once we have no observers.
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce(
        (highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),
        0
      );
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const { style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map(
    (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(
      /([A-Z])/g,
      // Attributes are written in dash case
      (n3) => "-" + n3.toLowerCase()
    ))
  );
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i3) => {
    instance.setAttribute(name, values[i3]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x: x5, y: y4, z: z3, ...style }) {
    const inputs = [];
    const transforms = [];
    if (x5 || y4 || z3) {
      inputs.push([x5 || 0, y4 || 0, z3 || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v4) => addUnit(v4, "px")).join(",")})`,
        // prettier-ignore
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(
          key === "rotate3d" ? ([x22, y22, z22, deg]) => [
            `rotate3d(${x22},${y22},${z22},${addUnit(deg, unit)})`,
            isValueIdentity(deg, 0)
          ] : (input) => [
            `${key}(${input.map((v4) => addUnit(v4, unit)).join(",")})`,
            isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
          ]
        );
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity11 = true;
    each(this.inputs, (input, i3) => {
      const arg1 = getFluidValue(input[0]);
      const [t6, id] = this.transforms[i3](
        is.arr(arg1) ? arg1 : input.map(getFluidValue)
      );
      transform += " " + t6;
      identity11 = identity11 && id;
    });
    return identity11 ? "none" : transform;
  }
  // Start observing our inputs once we have an observer.
  observerAdded(count4) {
    if (count4 == 1)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && addFluidObserver(value, this)
        )
      );
  }
  // Stop observing our inputs once we have no observers.
  observerRemoved(count4) {
    if (count4 == 0)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && removeFluidObserver(value, this)
        )
      );
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host.animated;

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_react16 = __toESM(require_react());

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_react15 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_merge2 = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_set2 = __toESM(require_set());

// node_modules/@nivo/core/node_modules/d3-interpolate/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/@nivo/core/node_modules/d3-interpolate/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn(m4) : l3 === 3 ? new Rgb(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba2(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba2(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger.exec(format4)) ? new Rgb(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent.exec(format4)) ? new Rgb(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger.exec(format4)) ? rgba2(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent.exec(format4)) ? rgba2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent.exec(format4)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent.exec(format4)) ? hsla2(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named.hasOwnProperty(format4) ? rgbn(named[format4]) : format4 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n3) {
  return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba2(r3, g3, b3, a4) {
  if (a4 <= 0)
    r3 = g3 = b3 = NaN;
  return new Rgb(r3, g3, b3, a4);
}
function rgbConvert(o3) {
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Rgb();
  o3 = o3.rgb();
  return new Rgb(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb2(r3, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert(r3) : new Rgb(r3, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb(r3, g3, b3, opacity) {
  this.r = +r3;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default(Rgb, rgb2, extend(Color, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter : Math.pow(brighter, k4);
    return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker : Math.pow(darker, k4);
    return new Rgb(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h2, s4, l3, a4) {
  if (a4 <= 0)
    h2 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s4 = NaN;
  else if (s4 <= 0)
    h2 = NaN;
  return new Hsl(h2, s4, l3, a4);
}
function hslConvert(o3) {
  if (o3 instanceof Hsl)
    return new Hsl(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Hsl();
  if (o3 instanceof Hsl)
    return o3;
  o3 = o3.rgb();
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, min5 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h2 = NaN, s4 = max5 - min5, l3 = (max5 + min5) / 2;
  if (s4) {
    if (r3 === max5)
      h2 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max5)
      h2 = (b3 - r3) / s4 + 2;
    else
      h2 = (r3 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h2 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl(h2, s4, l3, o3.opacity);
}
function hsl2(h2, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default(Hsl, hsl2, extend(Color, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter : Math.pow(brighter, k4);
    return new Hsl(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker : Math.pow(darker, k4);
    return new Hsl(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb(h2, m1, m22),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/@nivo/core/node_modules/d3-interpolate/node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/@nivo/core/node_modules/d3-interpolate/node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o3) {
  if (o3 instanceof Lab)
    return new Lab(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl)
    return hcl2lab(o3);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r3 = rgb2lrgb(o3.r), g3 = rgb2lrgb(o3.g), b3 = rgb2lrgb(o3.b), y4 = xyz2lab((0.2225045 * r3 + 0.7168786 * g3 + 0.0606169 * b3) / Yn), x5, z3;
  if (r3 === g3 && g3 === b3)
    x5 = z3 = y4;
  else {
    x5 = xyz2lab((0.4360747 * r3 + 0.3850649 * g3 + 0.1430804 * b3) / Xn);
    z3 = xyz2lab((0.0139322 * r3 + 0.0971045 * g3 + 0.7141733 * b3) / Zn);
  }
  return new Lab(116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z3), o3.opacity);
}
function lab(l3, a4, b3, opacity) {
  return arguments.length === 1 ? labConvert(l3) : new Lab(l3, a4, b3, opacity == null ? 1 : opacity);
}
function Lab(l3, a4, b3, opacity) {
  this.l = +l3;
  this.a = +a4;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter: function(k4) {
    return new Lab(this.l + K * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  darker: function(k4) {
    return new Lab(this.l - K * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y4 : y4 + this.a / 500, z3 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x5 = Xn * lab2xyz(x5);
    y4 = Yn * lab2xyz(y4);
    z3 = Zn * lab2xyz(z3);
    return new Rgb(
      lrgb2rgb(3.1338561 * x5 - 1.6168667 * y4 - 0.4906146 * z3),
      lrgb2rgb(-0.9787684 * x5 + 1.9161415 * y4 + 0.033454 * z3),
      lrgb2rgb(0.0719453 * x5 - 0.2289914 * y4 + 1.4052427 * z3),
      this.opacity
    );
  }
}));
function xyz2lab(t6) {
  return t6 > t3 ? Math.pow(t6, 1 / 3) : t6 / t2 + t0;
}
function lab2xyz(t6) {
  return t6 > t1 ? t6 * t6 * t6 : t2 * (t6 - t0);
}
function lrgb2rgb(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert(o3) {
  if (o3 instanceof Hcl)
    return new Hcl(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab))
    o3 = labConvert(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl(h2, c9, l3, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c9, l3, opacity == null ? 1 : opacity);
}
function Hcl(h2, c9, l3, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab(o3) {
  if (isNaN(o3.h))
    return new Lab(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians;
  return new Lab(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter: function(k4) {
    return new Hcl(this.h, this.c, this.l + K * (k4 == null ? 1 : k4), this.opacity);
  },
  darker: function(k4) {
    return new Hcl(this.h, this.c, this.l - K * (k4 == null ? 1 : k4), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/@nivo/core/node_modules/d3-interpolate/node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o3) {
  if (o3 instanceof Cubehelix)
    return new Cubehelix(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA * b3 + ED * r3 - EB * g3) / (BC_DA + ED - EB), bl = b3 - l3, k4 = (E * (g3 - l3) - C * bl) / D, s4 = Math.sqrt(k4 * k4 + bl * bl) / (E * l3 * (1 - l3)), h2 = s4 ? Math.atan2(k4, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s4, l3, o3.opacity);
}
function cubehelix(h2, s4, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter : Math.pow(brighter, k4);
    return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker : Math.pow(darker, k4);
    return new Cubehelix(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l3 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh5 = Math.cos(h2), sinh5 = Math.sin(h2);
    return new Rgb(
      255 * (l3 + a4 * (A * cosh5 + B * sinh5)),
      255 * (l3 + a4 * (C * cosh5 + D * sinh5)),
      255 * (l3 + a4 * (E * cosh5)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/core/node_modules/d3-interpolate/src/basis.js
function basis(t19, v0, v1, v22, v32) {
  var t26 = t19 * t19, t36 = t26 * t19;
  return ((1 - 3 * t19 + 3 * t26 - t36) * v0 + (4 - 6 * t26 + 3 * t36) * v1 + (1 + 3 * t19 + 3 * t26 - 3 * t36) * v22 + t36 * v32) / 6;
}
function basis_default(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v32 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v32 = values[(i3 + 2) % n3];
    return basis((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/constant.js
var constant_default = (x5) => () => x5;

// node_modules/@nivo/core/node_modules/d3-interpolate/src/color.js
function linear(a4, d3) {
  return function(t6) {
    return a4 + t6 * d3;
  };
}
function exponential(a4, b3, y4) {
  return a4 = Math.pow(a4, y4), b3 = Math.pow(b3, y4) - a4, y4 = 1 / y4, function(t6) {
    return Math.pow(a4 + t6 * b3, y4);
  };
}
function hue(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear(a4, d3 > 180 || d3 < -180 ? d3 - 360 * Math.round(d3 / 360) : d3) : constant_default(isNaN(a4) ? b3 : a4);
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a4, b3) {
    return b3 - a4 ? exponential(a4, b3, y4) : constant_default(isNaN(a4) ? b3 : a4);
  };
}
function nogamma(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear(a4, d3) : constant_default(isNaN(a4) ? b3 : a4);
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y4) {
  var color6 = gamma(y4);
  function rgb7(start2, end) {
    var r3 = color6((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g3 = color6(start2.g, end.g), b3 = color6(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t6) {
      start2.r = r3(t6);
      start2.g = g3(t6);
      start2.b = b3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  }
  rgb7.gamma = rgbGamma;
  return rgb7;
}(1);
function rgbSpline(spline) {
  return function(colors3) {
    var n3 = colors3.length, r3 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i3, color6;
    for (i3 = 0; i3 < n3; ++i3) {
      color6 = rgb2(colors3[i3]);
      r3[i3] = color6.r || 0;
      g3[i3] = color6.g || 0;
      b3[i3] = color6.b || 0;
    }
    r3 = spline(r3);
    g3 = spline(g3);
    b3 = spline(b3);
    color6.opacity = 1;
    return function(t6) {
      color6.r = r3(t6);
      color6.g = g3(t6);
      color6.b = b3(t6);
      return color6 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/@nivo/core/node_modules/d3-interpolate/src/number.js
function number_default(a4, b3) {
  return a4 = +a4, b3 = +b3, function(t6) {
    return a4 * (1 - t6) + b3 * t6;
  };
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b3) {
  return function() {
    return b3;
  };
}
function one(b3) {
  return function(t6) {
    return b3(t6) + "";
  };
}
function string_default(a4, b3) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i3 = -1, s4 = [], q = [];
  a4 = a4 + "", b3 = b3 + "";
  while ((am = reA.exec(a4)) && (bm = reB.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s4[i3])
        s4[i3] += bs;
      else
        s4[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s4[i3])
        s4[i3] += bm;
      else
        s4[++i3] = bm;
    } else {
      s4[++i3] = null;
      q.push({ i: i3, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s4[i3])
      s4[i3] += bs;
    else
      s4[++i3] = bs;
  }
  return s4.length < 2 ? q[0] ? one(q[0].x) : zero(b3) : (b3 = q.length, function(t6) {
    for (var i4 = 0, o3; i4 < b3; ++i4)
      s4[(o3 = q[i4]).i] = o3.x(t6);
    return s4.join("");
  });
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a4, b3, c9, d3, e6, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b3 * b3))
    a4 /= scaleX, b3 /= scaleX;
  if (skewX = a4 * c9 + b3 * d3)
    c9 -= a4 * skewX, d3 -= b3 * skewX;
  if (scaleY = Math.sqrt(c9 * c9 + d3 * d3))
    c9 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a4 * d3 < b3 * c9)
    a4 = -a4, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e6,
    translateY: f3,
    rotate: Math.atan2(b3, a4) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m4.isIdentity ? identity : decompose_default(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s4) {
    return s4.length ? s4.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s4.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a4, b3, s4, q) {
    if (a4 !== b3) {
      if (a4 - b3 > 180)
        b3 += 360;
      else if (b3 - a4 > 180)
        a4 += 360;
      q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a4, b3, s4, q) {
    if (a4 !== b3) {
      q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b3) {
    var s4 = [], q = [];
    a4 = parse(a4), b3 = parse(b3);
    translate(a4.translateX, a4.translateY, b3.translateX, b3.translateY, s4, q);
    rotate(a4.rotate, b3.rotate, s4, q);
    skewX(a4.skewX, b3.skewX, s4, q);
    scale(a4.scaleX, a4.scaleY, b3.scaleX, b3.scaleY, s4, q);
    a4 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s4[(o3 = q[i3]).i] = o3.x(t6);
      return s4.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/@nivo/core/node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i3, S2;
    if (d22 < epsilon2) {
      S2 = Math.log(w1 / w0) / rho;
      i3 = function(t6) {
        return [
          ux0 + t6 * dx,
          uy0 + t6 * dy,
          w0 * Math.exp(rho * t6 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i3 = function(t6) {
        var s4 = t6 * S2, coshr0 = cosh(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s4 + r0) - sinh(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh(rho * s4 + r0)
        ];
      };
    }
    i3.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/@nivo/core/node_modules/d3-interpolate/src/hsl.js
function hsl3(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hsl2(start2)).h, (end = hsl2(end)).h), s4 = nogamma(start2.s, end.s), l3 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.s = s4(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hsl_default = hsl3(hue);
var hslLong = hsl3(nogamma);

// node_modules/@nivo/core/node_modules/d3-interpolate/src/hcl.js
function hcl2(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hcl(start2)).h, (end = hcl(end)).h), c9 = nogamma(start2.c, end.c), l3 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.c = c9(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/@nivo/core/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue5) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix10(start2, end) {
      var h2 = hue5((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s4 = nogamma(start2.s, end.s), l3 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t6) {
        start2.h = h2(t6);
        start2.s = s4(t6);
        start2.l = l3(Math.pow(t6, y4));
        start2.opacity = opacity(t6);
        return start2 + "";
      };
    }
    cubehelix10.gamma = cubehelixGamma;
    return cubehelix10;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_lodash = __toESM(require_lodash());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_last = __toESM(require_last());
var import_isArray = __toESM(require_isArray());
var import_isString = __toESM(require_isString());

// node_modules/@nivo/core/node_modules/d3-array/src/ascending.js
function ascending_default(a4, b3) {
  return a4 < b3 ? -1 : a4 > b3 ? 1 : a4 >= b3 ? 0 : NaN;
}

// node_modules/@nivo/core/node_modules/d3-array/src/bisector.js
function bisector_default(f3) {
  let delta = f3;
  let compare = f3;
  if (f3.length === 1) {
    delta = (d3, x5) => f3(d3) - x5;
    compare = ascendingComparator(f3);
  }
  function left(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    const i3 = left(a4, x5, lo, hi - 1);
    return i3 > lo && delta(a4[i3 - 1], x5) > -delta(a4[i3], x5) ? i3 - 1 : i3;
  }
  return { left, center, right };
}
function ascendingComparator(f3) {
  return (d3, x5) => ascending_default(f3(d3), x5);
}

// node_modules/@nivo/core/node_modules/d3-array/src/number.js
function number_default2(x5) {
  return x5 === null ? NaN : +x5;
}

// node_modules/@nivo/core/node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default2).center;
var bisect_default = bisectRight;

// node_modules/@nivo/core/node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/@nivo/core/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start2, stop2, count4) {
  var reverse4, i3 = -1, n3, ticks, step;
  stop2 = +stop2, start2 = +start2, count4 = +count4;
  if (start2 === stop2 && count4 > 0)
    return [start2];
  if (reverse4 = stop2 < start2)
    n3 = start2, start2 = stop2, stop2 = n3;
  if ((step = tickIncrement(start2, stop2, count4)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop2 / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop2)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i3 < n3)
      ticks[i3] = (r0 + i3) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop2 * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop2)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i3 < n3)
      ticks[i3] = (r0 + i3) / step;
  }
  if (reverse4)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start2, stop2, count4) {
  var step = (stop2 - start2) / Math.max(0, count4), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start2, stop2, count4) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count4), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/core/node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array4, i0 = 0, i1 = array4.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i3 = random() * m4-- | 0, t6 = array4[m4 + i0];
      array4[m4 + i0] = array4[i3 + i0];
      array4[i3 + i0] = t6;
    }
    return array4;
  };
}

// node_modules/@nivo/core/node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/@nivo/core/node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index4 = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
  function scale(d3) {
    var key = d3 + "", i3 = index4.get(key);
    if (!i3) {
      if (unknown !== implicit)
        return unknown;
      index4.set(key, i3 = domain.push(d3));
    }
    return range[(i3 - 1) % range.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index4 = /* @__PURE__ */ new Map();
    for (const value of _) {
      const key = value + "";
      if (index4.has(key))
        continue;
      index4.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts(x5, p3) {
  if ((i3 = (x5 = p3 ? x5.toExponential(p3 - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x5.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i3 + 1)
  ];
}

// node_modules/@nivo/core/node_modules/d3-format/src/exponent.js
function exponent_default(x5) {
  return x5 = formatDecimalParts(Math.abs(x5)), x5 ? x5[1] : NaN;
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t6 = [], j3 = 0, g3 = grouping[0], length = 0;
    while (i3 > 0 && g3 > 0) {
      if (length + g3 + 1 > width)
        g3 = Math.max(1, width - length);
      t6.push(value.substring(i3 -= g3, i3 + g3));
      if ((length += g3 + 1) > width)
        break;
      g3 = grouping[j3 = (j3 + 1) % grouping.length];
    }
    return t6.reverse().join(thousands);
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i3) {
      return numerals[+i3];
    });
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/core/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s4) {
  out:
    for (var n3 = s4.length, i3 = 1, i0 = -1, i1; i3 < n3; ++i3) {
      switch (s4[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        default:
          if (!+s4[i3])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x5, p3) {
  var d3 = formatDecimalParts(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1], i3 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i3 === n3 ? coefficient : i3 > n3 ? coefficient + new Array(i3 - n3 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts(x5, Math.max(0, p3 + i3 - 1))[0];
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x5, p3) {
  var d3 = formatDecimalParts(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/core/node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x5, p3) {
    return (x5 * 100).toFixed(p3);
  },
  "b": function(x5) {
    return Math.round(x5).toString(2);
  },
  "c": function(x5) {
    return x5 + "";
  },
  "d": formatDecimal_default,
  "e": function(x5, p3) {
    return x5.toExponential(p3);
  },
  "f": function(x5, p3) {
    return x5.toFixed(p3);
  },
  "g": function(x5, p3) {
    return x5.toPrecision(p3);
  },
  "o": function(x5) {
    return Math.round(x5).toString(8);
  },
  "p": function(x5, p3) {
    return formatRounded_default(x5 * 100, p3);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x5) {
    return Math.round(x5).toString(16).toUpperCase();
  },
  "x": function(x5) {
    return Math.round(x5).toString(16);
  }
};

// node_modules/@nivo/core/node_modules/d3-format/src/identity.js
function identity_default2(x5) {
  return x5;
}

// node_modules/@nivo/core/node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale7) {
  var group4 = locale7.grouping === void 0 || locale7.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale7.grouping, Number), locale7.thousands + ""), currencyPrefix = locale7.currency === void 0 ? "" : locale7.currency[0] + "", currencySuffix = locale7.currency === void 0 ? "" : locale7.currency[1] + "", decimal = locale7.decimal === void 0 ? "." : locale7.decimal + "", numerals = locale7.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale7.numerals, String)), percent = locale7.percent === void 0 ? "%" : locale7.percent + "", minus = locale7.minus === void 0 ? "-" : locale7.minus + "", nan = locale7.nan === void 0 ? "NaN" : locale7.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i3, n3, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n3 = value.length;
          while (++i3 < n3) {
            if (c9 = value.charCodeAt(i3), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group4(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group4(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e6 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k4 = Math.pow(10, -e6), prefix2 = prefixes2[8 + e6 / 3];
    return function(value2) {
      return f3(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}

// node_modules/@nivo/core/node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/@nivo/core/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/@nivo/core/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/@nivo/core/node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max5) {
  step = Math.abs(step), max5 = Math.abs(max5) - step;
  return Math.max(0, exponent_default(max5) - exponent_default(step)) + 1;
}

// node_modules/@nivo/core/node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop2, count4, specifier) {
  var step = tickStep(start2, stop2, count4), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop2));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/@nivo/core/node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count4) {
    var d3 = domain();
    return ticks_default(d3[0], d3[d3.length - 1], count4 == null ? 10 : count4);
  };
  scale.tickFormat = function(count4, specifier) {
    var d3 = domain();
    return tickFormat(d3[0], d3[d3.length - 1], count4 == null ? 10 : count4, specifier);
  };
  scale.nice = function(count4) {
    if (count4 == null)
      count4 = 10;
    var d3 = domain();
    var i0 = 0;
    var i1 = d3.length - 1;
    var start2 = d3[i0];
    var stop2 = d3[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop2 < start2) {
      step = start2, start2 = stop2, stop2 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop2, count4);
      if (step === prestep) {
        d3[i0] = start2;
        d3[i1] = stop2;
        return domain(d3);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}

// node_modules/@nivo/core/node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n3 = 1, domain = [0.5], range = [0, 1], unknown;
  function scale(x5) {
    return x5 != null && x5 <= x5 ? range[bisect_default(domain, x5, 0, n3)] : unknown;
  }
  function rescale() {
    var i3 = -1;
    domain = new Array(n3);
    while (++i3 < n3)
      domain[i3] = ((i3 + 1) * x1 - (i3 - n3) * x0) / (n3 + 1);
    return scale;
  }
  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_) {
    return arguments.length ? (n3 = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  };
  scale.invertExtent = function(y4) {
    var i3 = range.indexOf(y4);
    return i3 < 0 ? [NaN, NaN] : i3 < 1 ? [x0, domain[0]] : i3 >= n3 ? [domain[n3 - 1], x1] : [domain[i3 - 1], domain[i3]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}

// node_modules/@nivo/core/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count4, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count4) {
    interval.count = function(start2, end) {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count4(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/core/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0))
    return null;
  if (!(k4 > 1))
    return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/@nivo/core/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/@nivo/core/node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start2, end) {
  return (end - start2) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/@nivo/core/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/@nivo/core/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/@nivo/core/node_modules/d3-time/src/day.js
var day = newInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var day_default = day;
var days = day.range;

// node_modules/@nivo/core/node_modules/d3-time/src/week.js
function weekday(i3) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i3) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/@nivo/core/node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/@nivo/core/node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default = year;
var years = year.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i3) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i3) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/@nivo/core/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/@nivo/core/node_modules/d3-time/src/ticks.js
function ticker(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute4, 1, durationMinute],
    [minute4, 5, 5 * durationMinute],
    [minute4, 15, 15 * durationMinute],
    [minute4, 30, 30 * durationMinute],
    [hour4, 1, durationHour],
    [hour4, 3, 3 * durationHour],
    [hour4, 6, 6 * durationHour],
    [hour4, 12, 12 * durationHour],
    [day4, 1, durationDay],
    [day4, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month4, 1, durationMonth],
    [month4, 3, 3 * durationMonth],
    [year4, 1, durationYear]
  ];
  function ticks(start2, stop2, count4) {
    const reverse4 = stop2 < start2;
    if (reverse4)
      [start2, stop2] = [stop2, start2];
    const interval = count4 && typeof count4.range === "function" ? count4 : tickInterval(start2, stop2, count4);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse4 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count4) {
    const target = Math.abs(stop2 - start2) / count4;
    const i3 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i3 === tickIntervals.length)
      return year4.every(tickStep(start2 / durationYear, stop2 / durationYear, count4));
    if (i3 === 0)
      return millisecond_default.every(Math.max(tickStep(start2, stop2, count4), 1));
    const [t6, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
    return t6.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/@nivo/core/node_modules/d3-time-format/src/locale.js
function localDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale7) {
  var locale_dateTime = locale7.dateTime, locale_date = locale7.date, locale_time = locale7.time, locale_periods = locale7.periods, locale_weekdays = locale7.days, locale_shortWeekdays = locale7.shortDays, locale_months = locale7.months, locale_shortMonths = locale7.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i3 = -1, j3 = 0, n3 = specifier.length, c9, pad4, format4;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i3 < n3) {
        if (specifier.charCodeAt(i3) === 37) {
          string.push(specifier.slice(j3, i3));
          if ((pad4 = pads[c9 = specifier.charAt(++i3)]) != null)
            c9 = specifier.charAt(++i3);
          else
            pad4 = c9 === "e" ? " " : "0";
          if (format4 = formats2[c9])
            c9 = format4(date, pad4);
          string.push(c9);
          j3 = i3 + 1;
        }
      }
      string.push(specifier.slice(j3, i3));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d3 = newDate(1900, void 0, 1), i3 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i3 != string.length)
        return null;
      if ("Q" in d3)
        return new Date(d3.Q);
      if ("s" in d3)
        return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z && !("Z" in d3))
        d3.Z = 0;
      if ("p" in d3)
        d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0)
        d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53)
          return null;
        if (!("w" in d3))
          d3.w = 1;
        if ("Z" in d3) {
          week = utcDate(newDate(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate(newDate(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3))
          d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate(d3);
      }
      return localDate(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j3) {
    var i3 = 0, n3 = specifier.length, m4 = string.length, c9, parse;
    while (i3 < n3) {
      if (j3 >= m4)
        return -1;
      c9 = specifier.charCodeAt(i3++);
      if (c9 === 37) {
        c9 = specifier.charAt(i3++);
        parse = parses[c9 in pads ? specifier.charAt(i3++) : c9];
        if (!parse || (j3 = parse(d3, string, j3)) < 0)
          return -1;
      } else if (c9 != string.charCodeAt(j3++)) {
        return -1;
      }
    }
    return j3;
  }
  function parsePeriod(d3, string, i3) {
    var n3 = periodRe.exec(string.slice(i3));
    return n3 ? (d3.p = periodLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i3) {
    var n3 = shortWeekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseWeekday(d3, string, i3) {
    var n3 = weekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = weekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortMonth(d3, string, i3) {
    var n3 = shortMonthRe.exec(string.slice(i3));
    return n3 ? (d3.m = shortMonthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseMonth(d3, string, i3) {
    var n3 = monthRe.exec(string.slice(i3));
    return n3 ? (d3.m = monthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i3) {
    return parseSpecifier(d3, locale_dateTime, string, i3);
  }
  function parseLocaleDate(d3, string, i3) {
    return parseSpecifier(d3, locale_date, string, i3);
  }
  function parseLocaleTime(d3, string, i3) {
    return parseSpecifier(d3, locale_time, string, i3);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f3 = newFormat(specifier += "", formats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    parse: function(specifier) {
      var p3 = newParse(specifier += "", false);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    },
    utcFormat: function(specifier) {
      var f3 = newFormat(specifier += "", utcFormats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    utcParse: function(specifier) {
      var p3 = newParse(specifier += "", true);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s4) {
  return s4.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
}
function parseWeekdayNumberSunday(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.w = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.u = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberSunday(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.U = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberISO(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.V = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberMonday(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.W = +n3[0], i3 + n3[0].length) : -1;
}
function parseFullYear(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 4));
  return n3 ? (d3.y = +n3[0], i3 + n3[0].length) : -1;
}
function parseYear(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i3 + n3[0].length) : -1;
}
function parseZone(d3, string, i3) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i3 + n3[0].length) : -1;
}
function parseQuarter(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.q = n3[0] * 3 - 3, i3 + n3[0].length) : -1;
}
function parseMonthNumber(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.m = n3[0] - 1, i3 + n3[0].length) : -1;
}
function parseDayOfMonth(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseDayOfYear(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.m = 0, d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseHour24(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.H = +n3[0], i3 + n3[0].length) : -1;
}
function parseMinutes(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.M = +n3[0], i3 + n3[0].length) : -1;
}
function parseSeconds(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.S = +n3[0], i3 + n3[0].length) : -1;
}
function parseMilliseconds(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.L = +n3[0], i3 + n3[0].length) : -1;
}
function parseMicroseconds(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.L = Math.floor(n3[0] / 1e3), i3 + n3[0].length) : -1;
}
function parseLiteralPercent(d3, string, i3) {
  var n3 = percentRe.exec(string.slice(i3, i3 + 1));
  return n3 ? i3 + n3[0].length : -1;
}
function parseUnixTimestamp(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3));
  return n3 ? (d3.Q = +n3[0], i3 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds(d3, string, i3) {
  var n3 = numberRe.exec(string.slice(i3));
  return n3 ? (d3.s = +n3[0], i3 + n3[0].length) : -1;
}
function formatDayOfMonth(d3, p3) {
  return pad(d3.getDate(), p3, 2);
}
function formatHour24(d3, p3) {
  return pad(d3.getHours(), p3, 2);
}
function formatHour12(d3, p3) {
  return pad(d3.getHours() % 12 || 12, p3, 2);
}
function formatDayOfYear(d3, p3) {
  return pad(1 + day_default.count(year_default(d3), d3), p3, 3);
}
function formatMilliseconds(d3, p3) {
  return pad(d3.getMilliseconds(), p3, 3);
}
function formatMicroseconds(d3, p3) {
  return formatMilliseconds(d3, p3) + "000";
}
function formatMonthNumber(d3, p3) {
  return pad(d3.getMonth() + 1, p3, 2);
}
function formatMinutes(d3, p3) {
  return pad(d3.getMinutes(), p3, 2);
}
function formatSeconds(d3, p3) {
  return pad(d3.getSeconds(), p3, 2);
}
function formatWeekdayNumberMonday(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday(d3, p3) {
  return pad(sunday.count(year_default(d3) - 1, d3), p3, 2);
}
function dISO(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday(d3) : thursday.ceil(d3);
}
function formatWeekNumberISO(d3, p3) {
  d3 = dISO(d3);
  return pad(thursday.count(year_default(d3), d3) + (year_default(d3).getDay() === 4), p3, 2);
}
function formatWeekdayNumberSunday(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday(d3, p3) {
  return pad(monday.count(year_default(d3) - 1, d3), p3, 2);
}
function formatYear(d3, p3) {
  return pad(d3.getFullYear() % 100, p3, 2);
}
function formatYearISO(d3, p3) {
  d3 = dISO(d3);
  return pad(d3.getFullYear() % 100, p3, 2);
}
function formatFullYear(d3, p3) {
  return pad(d3.getFullYear() % 1e4, p3, 4);
}
function formatFullYearISO(d3, p3) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday(d3) : thursday.ceil(d3);
  return pad(d3.getFullYear() % 1e4, p3, 4);
}
function formatZone(d3) {
  var z3 = d3.getTimezoneOffset();
  return (z3 > 0 ? "-" : (z3 *= -1, "+")) + pad(z3 / 60 | 0, "0", 2) + pad(z3 % 60, "0", 2);
}
function formatUTCDayOfMonth(d3, p3) {
  return pad(d3.getUTCDate(), p3, 2);
}
function formatUTCHour24(d3, p3) {
  return pad(d3.getUTCHours(), p3, 2);
}
function formatUTCHour12(d3, p3) {
  return pad(d3.getUTCHours() % 12 || 12, p3, 2);
}
function formatUTCDayOfYear(d3, p3) {
  return pad(1 + utcDay_default.count(utcYear_default(d3), d3), p3, 3);
}
function formatUTCMilliseconds(d3, p3) {
  return pad(d3.getUTCMilliseconds(), p3, 3);
}
function formatUTCMicroseconds(d3, p3) {
  return formatUTCMilliseconds(d3, p3) + "000";
}
function formatUTCMonthNumber(d3, p3) {
  return pad(d3.getUTCMonth() + 1, p3, 2);
}
function formatUTCMinutes(d3, p3) {
  return pad(d3.getUTCMinutes(), p3, 2);
}
function formatUTCSeconds(d3, p3) {
  return pad(d3.getUTCSeconds(), p3, 2);
}
function formatUTCWeekdayNumberMonday(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d3, p3) {
  return pad(utcSunday.count(utcYear_default(d3) - 1, d3), p3, 2);
}
function UTCdISO(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
}
function formatUTCWeekNumberISO(d3, p3) {
  d3 = UTCdISO(d3);
  return pad(utcThursday.count(utcYear_default(d3), d3) + (utcYear_default(d3).getUTCDay() === 4), p3, 2);
}
function formatUTCWeekdayNumberSunday(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday(d3, p3) {
  return pad(utcMonday.count(utcYear_default(d3) - 1, d3), p3, 2);
}
function formatUTCYear(d3, p3) {
  return pad(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCYearISO(d3, p3) {
  d3 = UTCdISO(d3);
  return pad(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCFullYear(d3, p3) {
  return pad(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCFullYearISO(d3, p3) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
  return pad(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d3) {
  return +d3;
}
function formatUnixTimestampSeconds(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/core/node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/@nivo/core/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/@nivo/core/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n3 = specifier.length / 6 | 0, colors3 = new Array(n3), i3 = 0;
  while (i3 < n3)
    colors3[i3] = "#" + specifier.slice(i3 * 6, ++i3 * 6);
  return colors3;
}

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/d3-scale-chromatic/node_modules/d3-color/src/define.js
function define_default2(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-scale-chromatic/node_modules/d3-color/src/color.js
function Color2() {
}
var darker2 = 0.7;
var brighter2 = 1 / darker2;
var reI2 = "\\s*([+-]?\\d+)\\s*";
var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex2 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
var named2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default2(Color2, color2, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex2,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex2,
  formatHsl: color_formatHsl2,
  formatRgb: color_formatRgb2,
  toString: color_formatRgb2
});
function color_formatHex2() {
  return this.rgb().formatHex();
}
function color_formatHsl2() {
  return hslConvert2(this).formatHsl();
}
function color_formatRgb2() {
  return this.rgb().formatRgb();
}
function color2(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex2.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn2(m4) : l3 === 3 ? new Rgb2(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba3(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba3(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger2.exec(format4)) ? new Rgb2(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent2.exec(format4)) ? new Rgb2(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger2.exec(format4)) ? rgba3(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent2.exec(format4)) ? rgba3(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent2.exec(format4)) ? hsla3(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent2.exec(format4)) ? hsla3(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named2.hasOwnProperty(format4) ? rgbn2(named2[format4]) : format4 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
}
function rgbn2(n3) {
  return new Rgb2(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba3(r3, g3, b3, a4) {
  if (a4 <= 0)
    r3 = g3 = b3 = NaN;
  return new Rgb2(r3, g3, b3, a4);
}
function rgbConvert2(o3) {
  if (!(o3 instanceof Color2))
    o3 = color2(o3);
  if (!o3)
    return new Rgb2();
  o3 = o3.rgb();
  return new Rgb2(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb3(r3, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert2(r3) : new Rgb2(r3, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb2(r3, g3, b3, opacity) {
  this.r = +r3;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default2(Rgb2, rgb3, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Rgb2(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex2,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex2,
  formatRgb: rgb_formatRgb2,
  toString: rgb_formatRgb2
}));
function rgb_formatHex2() {
  return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
}
function rgb_formatRgb2() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex2(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla3(h2, s4, l3, a4) {
  if (a4 <= 0)
    h2 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s4 = NaN;
  else if (s4 <= 0)
    h2 = NaN;
  return new Hsl2(h2, s4, l3, a4);
}
function hslConvert2(o3) {
  if (o3 instanceof Hsl2)
    return new Hsl2(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color2))
    o3 = color2(o3);
  if (!o3)
    return new Hsl2();
  if (o3 instanceof Hsl2)
    return o3;
  o3 = o3.rgb();
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, min5 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h2 = NaN, s4 = max5 - min5, l3 = (max5 + min5) / 2;
  if (s4) {
    if (r3 === max5)
      h2 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max5)
      h2 = (b3 - r3) / s4 + 2;
    else
      h2 = (r3 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h2 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl2(h2, s4, l3, o3.opacity);
}
function hsl4(h2, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert2(h2) : new Hsl2(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl2(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Hsl2, hsl4, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Hsl2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb2(
      hsl2rgb2(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb2(h2, m1, m22),
      hsl2rgb2(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb2(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-scale-chromatic/node_modules/d3-color/src/math.js
var radians2 = Math.PI / 180;
var degrees3 = 180 / Math.PI;

// node_modules/d3-scale-chromatic/node_modules/d3-color/src/lab.js
var K2 = 18;
var Xn2 = 0.96422;
var Yn2 = 1;
var Zn2 = 0.82521;
var t03 = 4 / 29;
var t13 = 6 / 29;
var t22 = 3 * t13 * t13;
var t32 = t13 * t13 * t13;
function labConvert2(o3) {
  if (o3 instanceof Lab2)
    return new Lab2(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl2)
    return hcl2lab2(o3);
  if (!(o3 instanceof Rgb2))
    o3 = rgbConvert2(o3);
  var r3 = rgb2lrgb2(o3.r), g3 = rgb2lrgb2(o3.g), b3 = rgb2lrgb2(o3.b), y4 = xyz2lab2((0.2225045 * r3 + 0.7168786 * g3 + 0.0606169 * b3) / Yn2), x5, z3;
  if (r3 === g3 && g3 === b3)
    x5 = z3 = y4;
  else {
    x5 = xyz2lab2((0.4360747 * r3 + 0.3850649 * g3 + 0.1430804 * b3) / Xn2);
    z3 = xyz2lab2((0.0139322 * r3 + 0.0971045 * g3 + 0.7141733 * b3) / Zn2);
  }
  return new Lab2(116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z3), o3.opacity);
}
function lab3(l3, a4, b3, opacity) {
  return arguments.length === 1 ? labConvert2(l3) : new Lab2(l3, a4, b3, opacity == null ? 1 : opacity);
}
function Lab2(l3, a4, b3, opacity) {
  this.l = +l3;
  this.a = +a4;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default2(Lab2, lab3, extend2(Color2, {
  brighter: function(k4) {
    return new Lab2(this.l + K2 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  darker: function(k4) {
    return new Lab2(this.l - K2 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y4 : y4 + this.a / 500, z3 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x5 = Xn2 * lab2xyz2(x5);
    y4 = Yn2 * lab2xyz2(y4);
    z3 = Zn2 * lab2xyz2(z3);
    return new Rgb2(
      lrgb2rgb2(3.1338561 * x5 - 1.6168667 * y4 - 0.4906146 * z3),
      lrgb2rgb2(-0.9787684 * x5 + 1.9161415 * y4 + 0.033454 * z3),
      lrgb2rgb2(0.0719453 * x5 - 0.2289914 * y4 + 1.4052427 * z3),
      this.opacity
    );
  }
}));
function xyz2lab2(t6) {
  return t6 > t32 ? Math.pow(t6, 1 / 3) : t6 / t22 + t03;
}
function lab2xyz2(t6) {
  return t6 > t13 ? t6 * t6 * t6 : t22 * (t6 - t03);
}
function lrgb2rgb2(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb2(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert2(o3) {
  if (o3 instanceof Hcl2)
    return new Hcl2(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab2))
    o3 = labConvert2(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl2(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees3;
  return new Hcl2(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl3(h2, c9, l3, opacity) {
  return arguments.length === 1 ? hclConvert2(h2) : new Hcl2(h2, c9, l3, opacity == null ? 1 : opacity);
}
function Hcl2(h2, c9, l3, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab2(o3) {
  if (isNaN(o3.h))
    return new Lab2(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians2;
  return new Lab2(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default2(Hcl2, hcl3, extend2(Color2, {
  brighter: function(k4) {
    return new Hcl2(this.h, this.c, this.l + K2 * (k4 == null ? 1 : k4), this.opacity);
  },
  darker: function(k4) {
    return new Hcl2(this.h, this.c, this.l - K2 * (k4 == null ? 1 : k4), this.opacity);
  },
  rgb: function() {
    return hcl2lab2(this).rgb();
  }
}));

// node_modules/d3-scale-chromatic/node_modules/d3-color/src/cubehelix.js
var A2 = -0.14861;
var B2 = 1.78277;
var C2 = -0.29227;
var D2 = -0.90649;
var E2 = 1.97294;
var ED2 = E2 * D2;
var EB2 = E2 * B2;
var BC_DA2 = B2 * C2 - D2 * A2;
function cubehelixConvert2(o3) {
  if (o3 instanceof Cubehelix2)
    return new Cubehelix2(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb2))
    o3 = rgbConvert2(o3);
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA2 * b3 + ED2 * r3 - EB2 * g3) / (BC_DA2 + ED2 - EB2), bl = b3 - l3, k4 = (E2 * (g3 - l3) - C2 * bl) / D2, s4 = Math.sqrt(k4 * k4 + bl * bl) / (E2 * l3 * (1 - l3)), h2 = s4 ? Math.atan2(k4, bl) * degrees3 - 120 : NaN;
  return new Cubehelix2(h2 < 0 ? h2 + 360 : h2, s4, l3, o3.opacity);
}
function cubehelix3(h2, s4, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert2(h2) : new Cubehelix2(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Cubehelix2(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Cubehelix2, cubehelix3, extend2(Color2, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter2 : Math.pow(brighter2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker2 : Math.pow(darker2, k4);
    return new Cubehelix2(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians2, l3 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh5 = Math.cos(h2), sinh5 = Math.sin(h2);
    return new Rgb2(
      255 * (l3 + a4 * (A2 * cosh5 + B2 * sinh5)),
      255 * (l3 + a4 * (C2 * cosh5 + D2 * sinh5)),
      255 * (l3 + a4 * (E2 * cosh5)),
      this.opacity
    );
  }
}));

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/basis.js
function basis2(t19, v0, v1, v22, v32) {
  var t26 = t19 * t19, t36 = t26 * t19;
  return ((1 - 3 * t19 + 3 * t26 - t36) * v0 + (4 - 6 * t26 + 3 * t36) * v1 + (1 + 3 * t19 + 3 * t26 - 3 * t36) * v22 + t36 * v32) / 6;
}
function basis_default2(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v32 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis2((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default2(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v32 = values[(i3 + 2) % n3];
    return basis2((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x5) => () => x5;

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/color.js
function linear3(a4, d3) {
  return function(t6) {
    return a4 + t6 * d3;
  };
}
function exponential2(a4, b3, y4) {
  return a4 = Math.pow(a4, y4), b3 = Math.pow(b3, y4) - a4, y4 = 1 / y4, function(t6) {
    return Math.pow(a4 + t6 * b3, y4);
  };
}
function hue2(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear3(a4, d3 > 180 || d3 < -180 ? d3 - 360 * Math.round(d3 / 360) : d3) : constant_default3(isNaN(a4) ? b3 : a4);
}
function gamma2(y4) {
  return (y4 = +y4) === 1 ? nogamma2 : function(a4, b3) {
    return b3 - a4 ? exponential2(a4, b3, y4) : constant_default3(isNaN(a4) ? b3 : a4);
  };
}
function nogamma2(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear3(a4, d3) : constant_default3(isNaN(a4) ? b3 : a4);
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y4) {
  var color6 = gamma2(y4);
  function rgb7(start2, end) {
    var r3 = color6((start2 = rgb3(start2)).r, (end = rgb3(end)).r), g3 = color6(start2.g, end.g), b3 = color6(start2.b, end.b), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t6) {
      start2.r = r3(t6);
      start2.g = g3(t6);
      start2.b = b3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  }
  rgb7.gamma = rgbGamma2;
  return rgb7;
}(1);
function rgbSpline2(spline) {
  return function(colors3) {
    var n3 = colors3.length, r3 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i3, color6;
    for (i3 = 0; i3 < n3; ++i3) {
      color6 = rgb3(colors3[i3]);
      r3[i3] = color6.r || 0;
      g3[i3] = color6.g || 0;
      b3[i3] = color6.b || 0;
    }
    r3 = spline(r3);
    g3 = spline(g3);
    b3 = spline(b3);
    color6.opacity = 1;
    return function(t6) {
      color6.r = r3(t6);
      color6.g = g3(t6);
      color6.b = b3(t6);
      return color6 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default2);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default2);

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/number.js
function number_default3(a4, b3) {
  return a4 = +a4, b3 = +b3, function(t6) {
    return a4 * (1 - t6) + b3 * t6;
  };
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/decompose.js
var degrees4 = 180 / Math.PI;
var identity4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default2(a4, b3, c9, d3, e6, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b3 * b3))
    a4 /= scaleX, b3 /= scaleX;
  if (skewX = a4 * c9 + b3 * d3)
    c9 -= a4 * skewX, d3 -= b3 * skewX;
  if (scaleY = Math.sqrt(c9 * c9 + d3 * d3))
    c9 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a4 * d3 < b3 * c9)
    a4 = -a4, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e6,
    translateY: f3,
    rotate: Math.atan2(b3, a4) * degrees4,
    skewX: Math.atan(skewX) * degrees4,
    scaleX,
    scaleY
  };
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/parse.js
var svgNode2;
function parseCss2(value) {
  const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m4.isIdentity ? identity4 : decompose_default2(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
}
function parseSvg2(value) {
  if (value == null)
    return identity4;
  if (!svgNode2)
    svgNode2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode2.setAttribute("transform", value);
  if (!(value = svgNode2.transform.baseVal.consolidate()))
    return identity4;
  value = value.matrix;
  return decompose_default2(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform2(parse, pxComma, pxParen, degParen) {
  function pop(s4) {
    return s4.length ? s4.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default3(xa, xb) }, { i: i3 - 2, x: number_default3(ya, yb) });
    } else if (xb || yb) {
      s4.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a4, b3, s4, q) {
    if (a4 !== b3) {
      if (a4 - b3 > 180)
        b3 += 360;
      else if (b3 - a4 > 180)
        a4 += 360;
      q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default3(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a4, b3, s4, q) {
    if (a4 !== b3) {
      q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default3(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default3(xa, xb) }, { i: i3 - 2, x: number_default3(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b3) {
    var s4 = [], q = [];
    a4 = parse(a4), b3 = parse(b3);
    translate(a4.translateX, a4.translateY, b3.translateX, b3.translateY, s4, q);
    rotate(a4.rotate, b3.rotate, s4, q);
    skewX(a4.skewX, b3.skewX, s4, q);
    scale(a4.scaleX, a4.scaleY, b3.scaleX, b3.scaleY, s4, q);
    a4 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s4[(o3 = q[i3]).i] = o3.x(t6);
      return s4.join("");
    };
  };
}
var interpolateTransformCss2 = interpolateTransform2(parseCss2, "px, ", "px)", "deg)");
var interpolateTransformSvg2 = interpolateTransform2(parseSvg2, ", ", ")", ")");

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/zoom.js
var epsilon22 = 1e-12;
function cosh2(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh2(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh2(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var zoom_default2 = function zoomRho2(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i3, S2;
    if (d22 < epsilon22) {
      S2 = Math.log(w1 / w0) / rho;
      i3 = function(t6) {
        return [
          ux0 + t6 * dx,
          uy0 + t6 * dy,
          w0 * Math.exp(rho * t6 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i3 = function(t6) {
        var s4 = t6 * S2, coshr0 = cosh2(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh2(rho * s4 + r0) - sinh2(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh2(rho * s4 + r0)
        ];
      };
    }
    i3.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho2(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/hsl.js
function hsl5(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hsl4(start2)).h, (end = hsl4(end)).h), s4 = nogamma2(start2.s, end.s), l3 = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.s = s4(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hsl_default2 = hsl5(hue2);
var hslLong2 = hsl5(nogamma2);

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/hcl.js
function hcl4(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hcl3(start2)).h, (end = hcl3(end)).h), c9 = nogamma2(start2.c, end.c), l3 = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.c = c9(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hcl_default2 = hcl4(hue2);
var hclLong2 = hcl4(nogamma2);

// node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix4(hue5) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix10(start2, end) {
      var h2 = hue5((start2 = cubehelix3(start2)).h, (end = cubehelix3(end)).h), s4 = nogamma2(start2.s, end.s), l3 = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
      return function(t6) {
        start2.h = h2(t6);
        start2.s = s4(t6);
        start2.l = l3(Math.pow(t6, y4));
        start2.opacity = opacity(t6);
        return start2 + "";
      };
    }
    cubehelix10.gamma = cubehelixGamma;
    return cubehelix10;
  }(1);
}
var cubehelix_default2 = cubehelix4(hue2);
var cubehelixLong2 = cubehelix4(nogamma2);

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis2(scheme28[scheme28.length - 1]);

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t6) {
  t6 = Math.max(0, Math.min(1, t6));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t6 * (35.34 - t6 * (2381.73 - t6 * (6402.7 - t6 * (7024.72 - t6 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t6 * (170.73 + t6 * (52.82 - t6 * (131.46 - t6 * (176.58 - t6 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t6 * (442.36 - t6 * (2482.43 - t6 * (6167.24 - t6 * (6614.94 - t6 * 2475.67))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default3 = cubehelixLong2(cubehelix3(300, 0.5, 0), cubehelix3(-240, 0.5, 1));

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong2(cubehelix3(-100, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var cool = cubehelixLong2(cubehelix3(260, 0.75, 0.35), cubehelix3(80, 1.5, 0.8));
var c = cubehelix3();
function rainbow_default(t6) {
  if (t6 < 0 || t6 > 1)
    t6 -= Math.floor(t6);
  var ts2 = Math.abs(t6 - 0.5);
  c.h = 360 * t6 - 100;
  c.s = 1.5 - 1.5 * ts2;
  c.l = 0.8 - 0.9 * ts2;
  return c + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c6 = rgb3();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t6) {
  var x5;
  t6 = (0.5 - t6) * Math.PI;
  c6.r = 255 * (x5 = Math.sin(t6)) * x5;
  c6.g = 255 * (x5 = Math.sin(t6 + pi_1_3)) * x5;
  c6.b = 255 * (x5 = Math.sin(t6 + pi_2_3)) * x5;
  return c6 + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t6) {
  t6 = Math.max(0, Math.min(1, t6));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t6 * (1172.33 - t6 * (10793.56 - t6 * (33300.12 - t6 * (38394.49 - t6 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t6 * (557.33 + t6 * (1225.33 - t6 * (3574.96 - t6 * (1073.77 + t6 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t6 * (3211.1 - t6 * (15327.97 - t6 * (27814 - t6 * (22569.18 - t6 * 6838.66))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range) {
  var n3 = range.length;
  return function(t6) {
    return range[Math.max(0, Math.min(n3 - 1, Math.floor(t6 * n3)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isFunction = __toESM(require_isFunction());
var import_without = __toESM(require_without());

// node_modules/@nivo/core/node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x5, y4) {
    this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y4);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x5, y4) {
    this._ += "L" + (this._x1 = +x5) + "," + (this._y1 = +y4);
  },
  quadraticCurveTo: function(x1, y1, x5, y4) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x5) + "," + (this._y1 = +y4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x5, y4) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x5) + "," + (this._y1 = +y4);
  },
  arcTo: function(x1, y1, x22, y22, r3) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r3 = +r3;
    var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r3 < 0)
      throw new Error("negative radius: " + r3);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r3) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l3 = r3 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l3 / l01, t21 = l3 / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r3 + "," + r3 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x5, y4, r3, a0, a1, ccw) {
    x5 = +x5, y4 = +y4, r3 = +r3, ccw = !!ccw;
    var dx = r3 * Math.cos(a0), dy = r3 * Math.sin(a0), x0 = x5 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r3 < 0)
      throw new Error("negative radius: " + r3);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r3)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r3 + "," + r3 + ",0,1," + cw + "," + (x5 - dx) + "," + (y4 - dy) + "A" + r3 + "," + r3 + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r3 + "," + r3 + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x5 + r3 * Math.cos(a1)) + "," + (this._y1 = y4 + r3 * Math.sin(a1));
    }
  },
  rect: function(x5, y4, w3, h2) {
    this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y4) + "h" + +w3 + "v" + +h2 + "h" + -w3 + "Z";
  },
  toString: function() {
    return this._;
  }
};

// node_modules/@nivo/core/node_modules/d3-shape/src/math.js
var epsilon3 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x5, y4);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a4, r3) {
    this._curve.point(r3 * Math.sin(a4), r3 * -Math.cos(a4));
  }
};
function curveRadial(curve) {
  function radial4(context) {
    return new Radial(curve(context));
  }
  radial4._curve = curve;
  return radial4;
}

// node_modules/@nivo/core/node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;

// node_modules/@nivo/core/node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/@nivo/core/node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// node_modules/@nivo/core/node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// node_modules/@nivo/core/node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/@nivo/core/node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/basis.js
function point2(that, x5, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x5) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basis_default3(context) {
  return new Basis(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x5, this._y2 = y4;
        break;
      case 1:
        this._point = 2;
        this._x3 = x5, this._y3 = y4;
        break;
      case 2:
        this._point = 3;
        this._x4 = x5, this._y4 = y4;
        this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
        break;
      default:
        point2(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisClosed_default3(context) {
  return new BasisClosed(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x5) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisOpen_default(context) {
  return new BasisOpen(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x5 = this._x, y4 = this._y, j3 = x5.length - 1;
    if (j3 > 0) {
      var x0 = x5[0], y0 = y4[0], dx = x5[j3] - x0, dy = y4[j3] - y0, i3 = -1, t6;
      while (++i3 <= j3) {
        t6 = i3 / j3;
        this._basis.point(
          this._beta * x5[i3] + (1 - this._beta) * (x0 + t6 * dx),
          this._beta * y4[i3] + (1 - this._beta) * (y0 + t6 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x5, y4) {
    this._x.push(+x5);
    this._y.push(+y4);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x5, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x5),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
        this._x1 = x5, this._y1 = y4;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x5, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x5, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x5, this._y5 = y4;
        break;
      default:
        point3(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x5, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x5, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a4 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n3 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a4 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n3;
    y1 = (y1 * a4 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n3;
  }
  if (that._l23_a > epsilon3) {
    var b3 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m4 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b3 + that._x1 * that._l23_2a - x5 * that._l12_2a) / m4;
    y22 = (y22 * b3 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m4;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x5, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x5, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x5, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x5, this._y5 = y4;
        break;
      default:
        point4(this, x5, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x5, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    if (this._point)
      this._context.lineTo(x5, y4);
    else
      this._point = 1, this._context.moveTo(x5, y4);
  }
};
function linearClosed_default(context) {
  return new LinearClosed(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/monotone.js
function sign(x5) {
  return x5 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p3 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p3)) || 0;
}
function slope2(that, t6) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t6) / 2 : t6;
}
function point5(that, t09, t19) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t09, x1 - dx, y1 - dx * t19, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    var t19 = NaN;
    x5 = +x5, y4 = +y4;
    if (x5 === this._x1 && y4 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t19 = slope3(this, x5, y4)), t19);
        break;
      default:
        point5(this, this._t0, t19 = slope3(this, x5, y4));
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y4;
    this._t0 = t19;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y4) {
  MonotoneX.prototype.point.call(this, y4, x5);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x5, y4) {
    this._context.moveTo(y4, x5);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x5, y4) {
    this._context.lineTo(y4, x5);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x5, y4) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y4, x5);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x5 = this._x, y4 = this._y, n3 = x5.length;
    if (n3) {
      this._line ? this._context.lineTo(x5[0], y4[0]) : this._context.moveTo(x5[0], y4[0]);
      if (n3 === 2) {
        this._context.lineTo(x5[1], y4[1]);
      } else {
        var px = controlPoints(x5), py = controlPoints(y4);
        for (var i0 = 0, i1 = 1; i1 < n3; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x5[i1], y4[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n3 === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x5, y4) {
    this._x.push(+x5);
    this._y.push(+y4);
  }
};
function controlPoints(x5) {
  var i3, n3 = x5.length - 1, m4, a4 = new Array(n3), b3 = new Array(n3), r3 = new Array(n3);
  a4[0] = 0, b3[0] = 2, r3[0] = x5[0] + 2 * x5[1];
  for (i3 = 1; i3 < n3 - 1; ++i3)
    a4[i3] = 1, b3[i3] = 4, r3[i3] = 4 * x5[i3] + 2 * x5[i3 + 1];
  a4[n3 - 1] = 2, b3[n3 - 1] = 7, r3[n3 - 1] = 8 * x5[n3 - 1] + x5[n3];
  for (i3 = 1; i3 < n3; ++i3)
    m4 = a4[i3] / b3[i3 - 1], b3[i3] -= m4, r3[i3] -= m4 * r3[i3 - 1];
  a4[n3 - 1] = r3[n3 - 1] / b3[n3 - 1];
  for (i3 = n3 - 2; i3 >= 0; --i3)
    a4[i3] = (r3[i3] - a4[i3 + 1]) / b3[i3];
  b3[n3 - 1] = (x5[n3] + a4[n3 - 1]) / 2;
  for (i3 = 0; i3 < n3 - 1; ++i3)
    b3[i3] = 2 * x5[i3 + 1] - a4[i3 + 1];
  return [a4, b3];
}
function natural_default(context) {
  return new Natural(context);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/curve/step.js
function Step(context, t6) {
  this._context = context;
  this._t = t6;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x5, y4) {
    x5 = +x5, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y4) : this._context.moveTo(x5, y4);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y4);
          this._context.lineTo(x5, y4);
        } else {
          var x1 = this._x * (1 - this._t) + x5 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y4);
        }
        break;
      }
    }
    this._x = x5, this._y = y4;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n3 = series.length) > 1))
    return;
  for (var i3 = 1, j3, s0, s1 = series[order[0]], n3, m4 = s1.length; i3 < n3; ++i3) {
    s0 = s1, s1 = series[order[i3]];
    for (j3 = 0; j3 < m4; ++j3) {
      s1[j3][1] += s1[j3][0] = isNaN(s0[j3][1]) ? s0[j3][0] : s0[j3][1];
    }
  }
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n3 = series.length, o3 = new Array(n3);
  while (--n3 >= 0)
    o3[n3] = n3;
  return o3;
}

// node_modules/@nivo/core/node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i3, n3, j3 = 0, m4 = series[0].length, y4; j3 < m4; ++j3) {
    for (y4 = i3 = 0; i3 < n3; ++i3)
      y4 += series[i3][j3][1] || 0;
    if (y4)
      for (i3 = 0; i3 < n3; ++i3)
        series[i3][j3][1] /= y4;
  }
  none_default(series, order);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i3, j3 = 0, d3, dy, yp, yn, n3, m4 = series[order[0]].length; j3 < m4; ++j3) {
    for (yp = yn = 0, i3 = 0; i3 < n3; ++i3) {
      if ((dy = (d3 = series[order[i3]][j3])[1] - d3[0]) > 0) {
        d3[0] = yp, d3[1] = yp += dy;
      } else if (dy < 0) {
        d3[1] = yn, d3[0] = yn += dy;
      } else {
        d3[0] = 0, d3[1] = dy;
      }
    }
  }
}

// node_modules/@nivo/core/node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var j3 = 0, s0 = series[order[0]], n3, m4 = s0.length; j3 < m4; ++j3) {
    for (var i3 = 0, y4 = 0; i3 < n3; ++i3)
      y4 += series[i3][j3][1] || 0;
    s0[j3][1] += s0[j3][0] = -y4 / 2;
  }
  none_default(series, order);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n3 = series.length) > 0) || !((m4 = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y4 = 0, j3 = 1, s0, m4, n3; j3 < m4; ++j3) {
    for (var i3 = 0, s1 = 0, s22 = 0; i3 < n3; ++i3) {
      var si2 = series[order[i3]], sij0 = si2[j3][1] || 0, sij1 = si2[j3 - 1][1] || 0, s32 = (sij0 - sij1) / 2;
      for (var k4 = 0; k4 < i3; ++k4) {
        var sk = series[order[k4]], skj0 = sk[j3][1] || 0, skj1 = sk[j3 - 1][1] || 0;
        s32 += skj0 - skj1;
      }
      s1 += sij0, s22 += s32 * sij0;
    }
    s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
    if (s1)
      y4 -= s22 / s1;
  }
  s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
  none_default(series, order);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a4, b3) {
    return peaks[a4] - peaks[b3];
  });
}
function peak(series) {
  var i3 = -1, j3 = 0, n3 = series.length, vi2, vj = -Infinity;
  while (++i3 < n3)
    if ((vi2 = +series[i3][1]) > vj)
      vj = vi2, j3 = i3;
  return j3;
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/ascending.js
function ascending_default2(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a4, b3) {
    return sums[a4] - sums[b3];
  });
}
function sum2(series) {
  var s4 = 0, i3 = -1, n3 = series.length, v4;
  while (++i3 < n3)
    if (v4 = +series[i3][1])
      s4 += v4;
  return s4;
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/descending.js
function descending_default3(series) {
  return ascending_default2(series).reverse();
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n3 = series.length, i3, j3, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i3 = 0; i3 < n3; ++i3) {
    j3 = order[i3];
    if (top < bottom) {
      top += sums[j3];
      tops.push(j3);
    } else {
      bottom += sums[j3];
      bottoms.push(j3);
    }
  }
  return bottoms.reverse().concat(tops);
}

// node_modules/@nivo/core/node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isPlainObject = __toESM(require_isPlainObject());
var import_pick = __toESM(require_pick());
var import_isEqual = __toESM(require_isEqual());
function Mr() {
  return Mr = Object.assign ? Object.assign.bind() : function(e6) {
    for (var r3 = 1; r3 < arguments.length; r3++) {
      var t6 = arguments[r3];
      for (var i3 in t6)
        Object.prototype.hasOwnProperty.call(t6, i3) && (e6[i3] = t6[i3]);
    }
    return e6;
  }, Mr.apply(this, arguments);
}
function jr(e6, r3) {
  return jr = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e7, r4) {
    return e7.__proto__ = r4, e7;
  }, jr(e6, r3);
}
function Br(e6, r3) {
  if (null == e6)
    return {};
  var t6, i3, n3 = {}, o3 = Object.keys(e6);
  for (i3 = 0; i3 < o3.length; i3++)
    t6 = o3[i3], r3.indexOf(t6) >= 0 || (n3[t6] = e6[t6]);
  return n3;
}
var Gr = { fill: import_prop_types.default.string, fontSize: import_prop_types.default.number, fontFamily: import_prop_types.default.string };
var Lr = import_prop_types.default.shape({ domain: import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired }).isRequired, ticks: import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired, text: import_prop_types.default.shape(Mr({}, Gr)).isRequired }).isRequired, legend: import_prop_types.default.shape({ text: import_prop_types.default.shape(Mr({}, Gr)).isRequired }).isRequired });
var Ir = import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired });
var Dr = import_prop_types.default.shape({ hidden: import_prop_types.default.shape({ symbol: import_prop_types.default.shape({ fill: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number }).isRequired, text: import_prop_types.default.shape(Mr({}, Gr, { opacity: import_prop_types.default.number })).isRequired }).isRequired, text: import_prop_types.default.shape(Mr({}, Gr)).isRequired });
var Yr = import_prop_types.default.shape({ text: import_prop_types.default.shape(Mr({}, Gr)).isRequired });
var Ar = import_prop_types.default.shape({ text: import_prop_types.default.shape(Mr({}, Gr)).isRequired });
var Fr = import_prop_types.default.shape({ text: import_prop_types.default.shape(Mr({}, Gr)).isRequired });
var Er = import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired });
var Ur = import_prop_types.default.shape({ text: import_prop_types.default.shape(Mr({}, Gr, { outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired })).isRequired, link: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired, outline: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired, symbol: import_prop_types.default.shape({ fill: import_prop_types.default.string.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired });
var Xr = import_prop_types.default.shape({ background: import_prop_types.default.string.isRequired, fontFamily: import_prop_types.default.string.isRequired, fontSize: import_prop_types.default.number.isRequired, textColor: import_prop_types.default.string.isRequired, axis: Lr.isRequired, grid: Ir.isRequired, legends: Dr.isRequired, labels: Yr.isRequired, dots: Ar.isRequired, markers: Fr, crosshair: Er.isRequired, annotations: Ur.isRequired });
var Hr = { background: "transparent", fontFamily: "sans-serif", fontSize: 11, textColor: "#333333", axis: { domain: { line: { stroke: "transparent", strokeWidth: 1 } }, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: {} }, legend: { text: { fontSize: 12 } } }, grid: { line: { stroke: "#dddddd", strokeWidth: 1 } }, legends: { hidden: { symbol: { fill: "#333333", opacity: 0.6 }, text: { fill: "#333333", opacity: 0.6 } }, text: {}, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: { fontSize: 10 } }, title: { text: {} } }, labels: { text: {} }, markers: { lineColor: "#000000", lineStrokeWidth: 1, text: {} }, dots: { text: {} }, tooltip: { container: { background: "white", color: "inherit", fontSize: "inherit", borderRadius: "2px", boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)", padding: "5px 9px" }, basic: { whiteSpace: "pre", display: "flex", alignItems: "center" }, chip: { marginRight: 7 }, table: {}, tableCell: { padding: "3px 5px" }, tableCellValue: { fontWeight: "bold" } }, crosshair: { line: { stroke: "#000000", strokeWidth: 1, strokeOpacity: 0.75, strokeDasharray: "6 6" } }, annotations: { text: { fontSize: 13, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, link: { stroke: "#000000", strokeWidth: 1, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, outline: { fill: "none", stroke: "#000000", strokeWidth: 2, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, symbol: { fill: "#000000", outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 } } };
var Kr = ["axis.ticks.text", "axis.legend.text", "legends.title.text", "legends.text", "legends.ticks.text", "legends.title.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
var Nr = function(e6, r3) {
  var t6 = (0, import_merge2.default)({}, e6, r3);
  return Kr.forEach(function(e7) {
    void 0 === (0, import_get.default)(t6, e7 + ".fontFamily") && (0, import_set2.default)(t6, e7 + ".fontFamily", t6.fontFamily), void 0 === (0, import_get.default)(t6, e7 + ".fontSize") && (0, import_set2.default)(t6, e7 + ".fontSize", t6.fontSize), void 0 === (0, import_get.default)(t6, e7 + ".fill") && (0, import_set2.default)(t6, e7 + ".fill", t6.textColor);
  }), t6;
};
var Vr = (0, import_react15.createContext)();
var Jr = function(e6) {
  var t6 = e6.children, i3 = e6.animate, n3 = e6.config, o3 = (0, import_react15.useMemo)(function() {
    var e7 = (0, import_lodash.isString)(n3) ? config[n3] : n3;
    return { animate: i3, config: e7 };
  }, [i3, n3]);
  return (0, import_jsx_runtime.jsx)(Vr.Provider, { value: o3, children: t6 });
};
var Qr = { animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Object.keys(config)), import_prop_types.default.shape({ mass: import_prop_types.default.number, tension: import_prop_types.default.number, friction: import_prop_types.default.number, clamp: import_prop_types.default.bool, precision: import_prop_types.default.number, velocity: import_prop_types.default.number, duration: import_prop_types.default.number, easing: import_prop_types.default.func })]) };
Jr.propTypes = { children: import_prop_types.default.node.isRequired, animate: Qr.animate, config: Qr.motionConfig };
var Zr = { animate: true, config: "default" };
Jr.defaultProps = Zr;
var $r = function() {
  return (0, import_react15.useContext)(Vr);
};
var et = function(e6) {
  var t6 = $r(), o3 = t6.animate, a4 = t6.config, l3 = function(e7) {
    var r3 = (0, import_react15.useRef)();
    return (0, import_react15.useEffect)(function() {
      r3.current = e7;
    }, [e7]), r3.current;
  }(e6), s4 = (0, import_react15.useMemo)(function() {
    return string_default(l3, e6);
  }, [l3, e6]), d3 = useSpring({ from: { value: 0 }, to: { value: 1 }, reset: true, config: a4, immediate: !o3 }).value;
  return to2(d3, s4);
};
var rt = { nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"], BrBG: (0, import_last.default)(scheme), PRGn: (0, import_last.default)(scheme2), PiYG: (0, import_last.default)(scheme3), PuOr: (0, import_last.default)(scheme4), RdBu: (0, import_last.default)(scheme5), RdGy: (0, import_last.default)(scheme6), RdYlBu: (0, import_last.default)(scheme7), RdYlGn: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), BuGn: (0, import_last.default)(scheme10), BuPu: (0, import_last.default)(scheme11), GnBu: (0, import_last.default)(scheme12), OrRd: (0, import_last.default)(scheme13), PuBuGn: (0, import_last.default)(scheme14), PuBu: (0, import_last.default)(scheme15), PuRd: (0, import_last.default)(scheme16), RdPu: (0, import_last.default)(scheme17), YlGnBu: (0, import_last.default)(scheme18), YlGn: (0, import_last.default)(scheme19), YlOrBr: (0, import_last.default)(scheme20), YlOrRd: (0, import_last.default)(scheme21) };
var tt = Object.keys(rt);
var it = function(e6) {
  if ((0, import_isFunction.default)(e6)) {
    if (!(0, import_isFunction.default)(e6.domain))
      throw new Error("Provided colors should be a valid quantize scale providing a 'domain()' function");
    return e6;
  }
  if (rt[e6])
    return quantize().range(rt[e6]);
  if ((0, import_isArray.default)(e6))
    return quantize().range(e6);
  throw new Error("Unable to guess quantize color scale from '" + e6 + "',\nmust be a function or one of:\n'" + tt.join("', '") + "'");
};
var nt = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, brown_blueGreen: (0, import_last.default)(scheme), purpleRed_green: (0, import_last.default)(scheme2), pink_yellowGreen: (0, import_last.default)(scheme3), purple_orange: (0, import_last.default)(scheme4), red_blue: (0, import_last.default)(scheme5), red_grey: (0, import_last.default)(scheme6), red_yellow_blue: (0, import_last.default)(scheme7), red_yellow_green: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), blue_green: (0, import_last.default)(scheme10), blue_purple: (0, import_last.default)(scheme11), green_blue: (0, import_last.default)(scheme12), orange_red: (0, import_last.default)(scheme13), purple_blue_green: (0, import_last.default)(scheme14), purple_blue: (0, import_last.default)(scheme15), purple_red: (0, import_last.default)(scheme16), red_purple: (0, import_last.default)(scheme17), yellow_green_blue: (0, import_last.default)(scheme18), yellow_green: (0, import_last.default)(scheme19), yellow_orange_brown: (0, import_last.default)(scheme20), yellow_orange_red: (0, import_last.default)(scheme21) };
var ut = import_prop_types.default.oneOfType([import_prop_types.default.oneOf(tt), import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string)]);
var ct = { basis: basis_default3, basisClosed: basisClosed_default3, basisOpen: basisOpen_default, bundle: bundle_default, cardinal: cardinal_default, cardinalClosed: cardinalClosed_default, cardinalOpen: cardinalOpen_default, catmullRom: catmullRom_default, catmullRomClosed: catmullRomClosed_default, catmullRomOpen: catmullRomOpen_default, linear: linear_default, linearClosed: linearClosed_default, monotoneX, monotoneY, natural: natural_default, step: step_default, stepAfter, stepBefore };
var ft = Object.keys(ct);
var pt = import_prop_types.default.oneOf(ft);
var ht = ft.filter(function(e6) {
  return e6.endsWith("Closed");
});
var gt = (0, import_without.default)(ft, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var bt = (0, import_without.default)(ft, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var mt = import_prop_types.default.oneOf(bt);
var yt = function(e6) {
  if (!ct[e6])
    throw new TypeError("'" + e6 + "', is not a valid curve interpolator identifier.");
  return ct[e6];
};
var vt = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.string.isRequired })).isRequired, fill: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.string.isRequired, match: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["*"]), import_prop_types.default.object, import_prop_types.default.func]).isRequired })).isRequired };
var Rt = { ascending: ascending_default2, descending: descending_default3, insideOut: insideOut_default, none: none_default2, reverse: reverse_default };
var qt = Object.keys(Rt);
var kt = import_prop_types.default.oneOf(qt);
var wt = { expand: expand_default, diverging: diverging_default, none: none_default, silhouette: silhouette_default, wiggle: wiggle_default };
var xt = Object.keys(wt);
var Ot = import_prop_types.default.oneOf(xt);
var Ct = import_prop_types.default.shape({ top: import_prop_types.default.number, right: import_prop_types.default.number, bottom: import_prop_types.default.number, left: import_prop_types.default.number }).isRequired;
var zt = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
var Pt = import_prop_types.default.oneOf(zt);
var jt = ordinal(Set3_default);
var Bt = { top: 0, right: 0, bottom: 0, left: 0 };
var Gt = function(e6, t6, i3) {
  return void 0 === i3 && (i3 = {}), (0, import_react15.useMemo)(function() {
    var r3 = Mr({}, Bt, i3);
    return { margin: r3, innerWidth: e6 - r3.left - r3.right, innerHeight: t6 - r3.top - r3.bottom, outerWidth: e6, outerHeight: t6 };
  }, [e6, t6, i3.top, i3.right, i3.bottom, i3.left]);
};
var Lt = function() {
  var e6 = (0, import_react15.useRef)(null), r3 = (0, import_react15.useState)({ left: 0, top: 0, width: 0, height: 0 }), t6 = r3[0], a4 = r3[1], l3 = (0, import_react15.useState)(function() {
    return "undefined" == typeof ResizeObserver ? null : new ResizeObserver(function(e7) {
      var r4 = e7[0];
      return a4(r4.contentRect);
    });
  })[0];
  return (0, import_react15.useEffect)(function() {
    return e6.current && null !== l3 && l3.observe(e6.current), function() {
      null !== l3 && l3.disconnect();
    };
  }, []), [e6, t6];
};
var It = function(e6) {
  return (0, import_react15.useMemo)(function() {
    return Nr(Hr, e6);
  }, [e6]);
};
var Dt = function(e6) {
  return "function" == typeof e6 ? e6 : "string" == typeof e6 ? 0 === e6.indexOf("time:") ? timeFormat(e6.slice("5")) : format(e6) : function(e7) {
    return "" + e7;
  };
};
var Yt = function(e6) {
  return (0, import_react15.useMemo)(function() {
    return Dt(e6);
  }, [e6]);
};
var At = (0, import_react15.createContext)();
var Ft = {};
var Et = function(e6) {
  var r3 = e6.theme, t6 = void 0 === r3 ? Ft : r3, i3 = e6.children, n3 = It(t6);
  return (0, import_jsx_runtime.jsx)(At.Provider, { value: n3, children: i3 });
};
Et.propTypes = { children: import_prop_types.default.node.isRequired, theme: import_prop_types.default.object };
var Ut = function() {
  return (0, import_react15.useContext)(At);
};
var Xt = function(e6) {
  var r3 = e6.children, t6 = e6.condition, i3 = e6.wrapper;
  return t6 ? (0, import_react15.cloneElement)(i3, {}, r3) : r3;
};
Xt.propTypes = { children: import_prop_types.default.node.isRequired, condition: import_prop_types.default.bool.isRequired, wrapper: import_prop_types.default.element.isRequired };
var Ht = { position: "relative" };
var Kt = function(e6) {
  var r3 = e6.children, t6 = e6.theme, n3 = e6.renderWrapper, o3 = void 0 === n3 || n3, a4 = e6.isInteractive, l3 = void 0 === a4 || a4, s4 = e6.animate, d3 = e6.motionConfig, u3 = (0, import_react15.useRef)(null);
  return (0, import_jsx_runtime.jsx)(Et, { theme: t6, children: (0, import_jsx_runtime.jsx)(Jr, { animate: s4, config: d3, children: (0, import_jsx_runtime.jsx)(M, { container: u3, children: (0, import_jsx_runtime.jsxs)(Xt, { condition: o3, wrapper: (0, import_jsx_runtime.jsx)("div", { style: Ht, ref: u3 }), children: [r3, l3 && (0, import_jsx_runtime.jsx)(F, {})] }) }) }) });
};
Kt.propTypes = { children: import_prop_types.default.element.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object, animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.string };
var Nt = function() {
};
var Vt = { position: "relative" };
var Jt = function(e6) {
  var t6 = e6.children, n3 = e6.theme, o3 = e6.isInteractive, a4 = void 0 === o3 || o3, s4 = e6.renderWrapper, d3 = void 0 === s4 || s4, u3 = e6.animate, c9 = e6.motionConfig, f3 = (0, import_react15.useRef)(null), m4 = V(f3), y4 = m4.actions, v4 = m4.state, R = (0, import_react15.useCallback)(function(e7, r3) {
    return y4.showTooltipFromEvent(e7, r3);
  }, [y4.showTooltipFromEvent]), q = (0, import_react15.useMemo)(function() {
    return { showTooltip: a4 ? R : Nt, hideTooltip: a4 ? y4.hideTooltip : Nt };
  }, [y4.hideTooltip, a4, R]);
  return (0, import_jsx_runtime.jsx)(Et, { theme: n3, children: (0, import_jsx_runtime.jsx)(Jr, { animate: u3, config: c9, children: (0, import_jsx_runtime.jsx)(j.Provider, { value: y4, children: (0, import_jsx_runtime.jsx)(O.Provider, { value: v4, children: (0, import_jsx_runtime.jsxs)(Xt, { condition: d3, wrapper: (0, import_jsx_runtime.jsx)("div", { style: Vt, ref: f3 }), children: [t6(q), a4 && (0, import_jsx_runtime.jsx)(F, {})] }) }) }) }) });
};
Jt.propTypes = { children: import_prop_types.default.func.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object.isRequired, animate: import_prop_types.default.bool.isRequired, motionConfig: import_prop_types.default.string };
var Qt = function(e6) {
  var r3 = e6.children, t6 = Lt(), i3 = t6[0], n3 = t6[1], o3 = n3.width > 0 && n3.height > 0;
  return (0, import_jsx_runtime.jsx)("div", { ref: i3, style: { width: "100%", height: "100%" }, children: o3 && r3({ width: n3.width, height: n3.height }) });
};
Qt.propTypes = { children: import_prop_types.default.func.isRequired };
var Zt = ["id", "colors"];
var $t = function(e6) {
  var r3 = e6.id, t6 = e6.colors, i3 = Br(e6, Zt);
  return (0, import_jsx_runtime.jsx)("linearGradient", Mr({ id: r3, x1: 0, x2: 0, y1: 0, y2: 1 }, i3, { children: t6.map(function(e7) {
    var r4 = e7.offset, t7 = e7.color, i4 = e7.opacity;
    return (0, import_jsx_runtime.jsx)("stop", { offset: r4 + "%", stopColor: t7, stopOpacity: void 0 !== i4 ? i4 : 1 }, r4);
  }) }));
};
$t.propTypes = { id: import_prop_types.default.string.isRequired, colors: import_prop_types.default.arrayOf(import_prop_types.default.shape({ offset: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number })).isRequired, gradientTransform: import_prop_types.default.string };
var ri = { linearGradient: $t };
var ti = (0, import_react15.memo)(function(e6) {
  var r3 = e6.id, t6 = e6.background, i3 = e6.color, n3 = e6.size, o3 = e6.padding, a4 = e6.stagger, l3 = n3 + o3, s4 = n3 / 2, d3 = o3 / 2;
  return true === a4 && (l3 = 2 * n3 + 2 * o3), (0, import_jsx_runtime.jsxs)("pattern", { id: r3, width: l3, height: l3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: l3, height: l3, fill: t6 }), (0, import_jsx_runtime.jsx)("circle", { cx: d3 + s4, cy: d3 + s4, r: s4, fill: i3 }), a4 && (0, import_jsx_runtime.jsx)("circle", { cx: 1.5 * o3 + n3 + s4, cy: 1.5 * o3 + n3 + s4, r: s4, fill: i3 })] });
});
ti.displayName = "PatternDots", ti.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired }, ti.defaultProps = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var ni = 2 * Math.PI;
var oi = function(e6) {
  return e6 * Math.PI / 180;
};
var ai = function(e6) {
  return 180 * e6 / Math.PI;
};
var si = function(e6, r3) {
  return { x: Math.cos(e6) * r3, y: Math.sin(e6) * r3 };
};
var di = function(e6) {
  var r3 = e6 % 360;
  return r3 < 0 && (r3 += 360), r3;
};
var pi3 = { svg: { align: { left: "start", center: "middle", right: "end", start: "start", middle: "middle", end: "end" }, baseline: { top: "text-before-edge", center: "central", bottom: "alphabetic" } }, canvas: { align: { left: "left", center: "center", right: "right", start: "left", middle: "center", end: "right" }, baseline: { top: "top", center: "middle", bottom: "bottom" } } };
var gi = (0, import_react15.memo)(function(e6) {
  var r3 = e6.id, t6 = e6.spacing, i3 = e6.rotation, n3 = e6.background, o3 = e6.color, a4 = e6.lineWidth, l3 = Math.round(i3) % 360, s4 = Math.abs(t6);
  l3 > 180 ? l3 -= 360 : l3 > 90 ? l3 -= 180 : l3 < -180 ? l3 += 360 : l3 < -90 && (l3 += 180);
  var d3, u3 = s4, c9 = s4;
  return 0 === l3 ? d3 = "\n                M 0 0 L " + u3 + " 0\n                M 0 " + c9 + " L " + u3 + " " + c9 + "\n            " : 90 === l3 ? d3 = "\n                M 0 0 L 0 " + c9 + "\n                M " + u3 + " 0 L " + u3 + " " + c9 + "\n            " : (u3 = Math.abs(s4 / Math.sin(oi(l3))), c9 = s4 / Math.sin(oi(90 - l3)), d3 = l3 > 0 ? "\n                    M 0 " + -c9 + " L " + 2 * u3 + " " + c9 + "\n                    M " + -u3 + " " + -c9 + " L " + u3 + " " + c9 + "\n                    M " + -u3 + " 0 L " + u3 + " " + 2 * c9 + "\n                " : "\n                    M " + -u3 + " " + c9 + " L " + u3 + " " + -c9 + "\n                    M " + -u3 + " " + 2 * c9 + " L " + 2 * u3 + " " + -c9 + "\n                    M 0 " + 2 * c9 + " L " + 2 * u3 + " 0\n                "), (0, import_jsx_runtime.jsxs)("pattern", { id: r3, width: u3, height: c9, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: u3, height: c9, fill: n3, stroke: "rgba(255, 0, 0, 0.1)", strokeWidth: 0 }), (0, import_jsx_runtime.jsx)("path", { d: d3, strokeWidth: a4, stroke: o3, strokeLinecap: "square" })] });
});
gi.displayName = "PatternLines", gi.propTypes = { id: import_prop_types.default.string.isRequired, spacing: import_prop_types.default.number.isRequired, rotation: import_prop_types.default.number.isRequired, background: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, lineWidth: import_prop_types.default.number.isRequired }, gi.defaultProps = { spacing: 5, rotation: 0, color: "#000000", background: "#ffffff", lineWidth: 2 };
var mi = (0, import_react15.memo)(function(e6) {
  var r3 = e6.id, t6 = e6.background, i3 = e6.color, n3 = e6.size, o3 = e6.padding, a4 = e6.stagger, l3 = n3 + o3, s4 = o3 / 2;
  return true === a4 && (l3 = 2 * n3 + 2 * o3), (0, import_jsx_runtime.jsxs)("pattern", { id: r3, width: l3, height: l3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: l3, height: l3, fill: t6 }), (0, import_jsx_runtime.jsx)("rect", { x: s4, y: s4, width: n3, height: n3, fill: i3 }), a4 && (0, import_jsx_runtime.jsx)("rect", { x: 1.5 * o3 + n3, y: 1.5 * o3 + n3, width: n3, height: n3, fill: i3 })] });
});
mi.displayName = "PatternSquares", mi.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired }, mi.defaultProps = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var vi = { patternDots: ti, patternLines: gi, patternSquares: mi };
var Ri = ["type"];
var qi = Mr({}, ri, vi);
var ki = function(e6) {
  var r3 = e6.defs;
  return !r3 || r3.length < 1 ? null : (0, import_jsx_runtime.jsx)("defs", { "aria-hidden": true, children: r3.map(function(e7) {
    var r4 = e7.type, t6 = Br(e7, Ri);
    return qi[r4] ? (0, import_react15.createElement)(qi[r4], Mr({ key: t6.id }, t6)) : null;
  }) });
};
ki.propTypes = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ type: import_prop_types.default.oneOf(Object.keys(qi)).isRequired, id: import_prop_types.default.string.isRequired })) };
var _i = (0, import_react15.memo)(ki);
var wi = function(e6) {
  var r3 = e6.width, t6 = e6.height, i3 = e6.margin, n3 = e6.defs, o3 = e6.children, a4 = e6.role, l3 = e6.ariaLabel, s4 = e6.ariaLabelledBy, d3 = e6.ariaDescribedBy, u3 = e6.isFocusable, c9 = Ut();
  return (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: r3, height: t6, role: a4, "aria-label": l3, "aria-labelledby": s4, "aria-describedby": d3, focusable: u3, tabIndex: u3 ? 0 : void 0, children: [(0, import_jsx_runtime.jsx)(_i, { defs: n3 }), (0, import_jsx_runtime.jsx)("rect", { width: r3, height: t6, fill: c9.background }), (0, import_jsx_runtime.jsx)("g", { transform: "translate(" + i3.left + "," + i3.top + ")", children: o3 })] });
};
wi.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.shape({ top: import_prop_types.default.number.isRequired, left: import_prop_types.default.number.isRequired }).isRequired, defs: import_prop_types.default.array, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]).isRequired, role: import_prop_types.default.string, isFocusable: import_prop_types.default.bool, ariaLabel: import_prop_types.default.string, ariaLabelledBy: import_prop_types.default.string, ariaDescribedBy: import_prop_types.default.string };
var xi = function(e6) {
  var r3 = e6.size, t6 = e6.color, i3 = e6.borderWidth, n3 = e6.borderColor;
  return (0, import_jsx_runtime.jsx)("circle", { r: r3 / 2, fill: t6, stroke: n3, strokeWidth: i3, style: { pointerEvents: "none" } });
};
xi.propTypes = { size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired };
var Oi = (0, import_react15.memo)(xi);
var Wi = function(e6) {
  var r3 = e6.x, t6 = e6.y, i3 = e6.symbol, n3 = void 0 === i3 ? Oi : i3, o3 = e6.size, a4 = e6.datum, l3 = e6.color, s4 = e6.borderWidth, u3 = e6.borderColor, c9 = e6.label, f3 = e6.labelTextAnchor, p3 = void 0 === f3 ? "middle" : f3, h2 = e6.labelYOffset, g3 = void 0 === h2 ? -12 : h2, b3 = Ut(), m4 = $r(), y4 = m4.animate, v4 = m4.config, R = useSpring({ transform: "translate(" + r3 + ", " + t6 + ")", config: v4, immediate: !y4 });
  return (0, import_jsx_runtime.jsxs)(animated.g, { transform: R.transform, style: { pointerEvents: "none" }, children: [(0, import_react15.createElement)(n3, { size: o3, color: l3, datum: a4, borderWidth: s4, borderColor: u3 }), c9 && (0, import_jsx_runtime.jsx)("text", { textAnchor: p3, y: g3, style: b3.dots.text, children: c9 })] });
};
Wi.propTypes = { x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, datum: import_prop_types.default.object.isRequired, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired, symbol: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), labelTextAnchor: import_prop_types.default.oneOf(["start", "middle", "end"]), labelYOffset: import_prop_types.default.number };
var Ci = (0, import_react15.memo)(Wi);
var zi = function(e6) {
  var r3 = e6.width, t6 = e6.height, i3 = e6.axis, n3 = e6.scale, o3 = e6.value, a4 = e6.lineStyle, l3 = e6.textStyle, s4 = e6.legend, d3 = e6.legendPosition, u3 = e6.legendOffsetX, c9 = e6.legendOffsetY, f3 = e6.legendOrientation, p3 = Ut(), h2 = 0, g3 = 0, b3 = 0, m4 = 0;
  "y" === i3 ? (b3 = n3(o3), g3 = r3) : (h2 = n3(o3), m4 = t6);
  var y4 = null;
  if (s4) {
    var v4 = function(e7) {
      var r4 = e7.axis, t7 = e7.width, i4 = e7.height, n4 = e7.position, o4 = e7.offsetX, a5 = e7.offsetY, l4 = e7.orientation, s5 = 0, d4 = 0, u4 = "vertical" === l4 ? -90 : 0, c10 = "start";
      if ("x" === r4)
        switch (n4) {
          case "top-left":
            s5 = -o4, d4 = a5, c10 = "end";
            break;
          case "top":
            d4 = -a5, c10 = "horizontal" === l4 ? "middle" : "start";
            break;
          case "top-right":
            s5 = o4, d4 = a5, c10 = "horizontal" === l4 ? "start" : "end";
            break;
          case "right":
            s5 = o4, d4 = i4 / 2, c10 = "horizontal" === l4 ? "start" : "middle";
            break;
          case "bottom-right":
            s5 = o4, d4 = i4 - a5, c10 = "start";
            break;
          case "bottom":
            d4 = i4 + a5, c10 = "horizontal" === l4 ? "middle" : "end";
            break;
          case "bottom-left":
            d4 = i4 - a5, s5 = -o4, c10 = "horizontal" === l4 ? "end" : "start";
            break;
          case "left":
            s5 = -o4, d4 = i4 / 2, c10 = "horizontal" === l4 ? "end" : "middle";
        }
      else
        switch (n4) {
          case "top-left":
            s5 = o4, d4 = -a5, c10 = "start";
            break;
          case "top":
            s5 = t7 / 2, d4 = -a5, c10 = "horizontal" === l4 ? "middle" : "start";
            break;
          case "top-right":
            s5 = t7 - o4, d4 = -a5, c10 = "horizontal" === l4 ? "end" : "start";
            break;
          case "right":
            s5 = t7 + o4, c10 = "horizontal" === l4 ? "start" : "middle";
            break;
          case "bottom-right":
            s5 = t7 - o4, d4 = a5, c10 = "end";
            break;
          case "bottom":
            s5 = t7 / 2, d4 = a5, c10 = "horizontal" === l4 ? "middle" : "end";
            break;
          case "bottom-left":
            s5 = o4, d4 = a5, c10 = "horizontal" === l4 ? "start" : "end";
            break;
          case "left":
            s5 = -o4, c10 = "horizontal" === l4 ? "end" : "middle";
        }
      return { x: s5, y: d4, rotation: u4, textAnchor: c10 };
    }({ axis: i3, width: r3, height: t6, position: d3, offsetX: u3, offsetY: c9, orientation: f3 });
    y4 = (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + v4.x + ", " + v4.y + ") rotate(" + v4.rotation + ")", textAnchor: v4.textAnchor, dominantBaseline: "central", style: l3, children: s4 });
  }
  return (0, import_jsx_runtime.jsxs)("g", { transform: "translate(" + h2 + ", " + b3 + ")", children: [(0, import_jsx_runtime.jsx)("line", { x1: 0, x2: g3, y1: 0, y2: m4, stroke: p3.markers.lineColor, strokeWidth: p3.markers.lineStrokeWidth, style: a4 }), y4] });
};
zi.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, scale: import_prop_types.default.func.isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object, legend: import_prop_types.default.string, legendPosition: import_prop_types.default.oneOf(["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"]), legendOffsetX: import_prop_types.default.number.isRequired, legendOffsetY: import_prop_types.default.number.isRequired, legendOrientation: import_prop_types.default.oneOf(["horizontal", "vertical"]).isRequired }, zi.defaultProps = { legendPosition: "top-right", legendOffsetX: 14, legendOffsetY: 14, legendOrientation: "horizontal" };
var Pi = (0, import_react15.memo)(zi);
var Ti = function(e6) {
  var r3 = e6.markers, t6 = e6.width, i3 = e6.height, n3 = e6.xScale, o3 = e6.yScale;
  return r3 && 0 !== r3.length ? r3.map(function(e7, r4) {
    return (0, import_jsx_runtime.jsx)(Pi, Mr({}, e7, { width: t6, height: i3, scale: "y" === e7.axis ? o3 : n3 }), r4);
  }) : null;
};
Ti.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, xScale: import_prop_types.default.func.isRequired, yScale: import_prop_types.default.func.isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object })) };
var Si = (0, import_react15.memo)(Ti);
var Mi = ["theme", "renderWrapper", "animate", "motionConfig"];
var ji = function(e6) {
  return function(r3) {
    var t6, i3;
    function n3() {
      return r3.apply(this, arguments) || this;
    }
    return i3 = r3, (t6 = n3).prototype = Object.create(i3.prototype), t6.prototype.constructor = t6, jr(t6, i3), n3.prototype.render = function() {
      var r4 = this.props, t7 = r4.theme, i4 = r4.renderWrapper, n4 = r4.animate, o3 = r4.motionConfig, a4 = Br(r4, Mi);
      return (0, import_jsx_runtime.jsx)(Kt, { theme: t7, renderWrapper: i4, isInteractive: a4.isInteractive, animate: n4, motionConfig: o3, children: (0, import_jsx_runtime.jsx)(e6, Mr({}, a4)) });
    }, n3;
  }(import_react15.Component);
};
var Bi = function(e6, r3) {
  var t6, i3 = (0, import_isFunction.default)(e6) ? e6 : function(r4) {
    return (0, import_get.default)(r4, e6);
  };
  return r3 && (t6 = (0, import_isFunction.default)(r3) ? r3 : format(r3)), t6 ? function(e7) {
    return t6(i3(e7));
  } : i3;
};
var Gi = function(e6) {
  return (0, import_isFunction.default)(e6) ? e6 : function(r3) {
    return (0, import_get.default)(r3, e6);
  };
};
var Li = function(e6) {
  return (0, import_react15.useMemo)(function() {
    return Gi(e6);
  }, [e6]);
};
var Fi = function(e6, r3, t6, i3, n3, o3) {
  return e6 <= n3 && n3 <= e6 + t6 && r3 <= o3 && o3 <= r3 + i3;
};
var Ei = function(e6, r3) {
  var t6, i3 = r3.clientX, n3 = r3.clientY, o3 = e6.getBoundingClientRect(), a4 = (t6 = void 0 !== e6.getBBox ? e6.getBBox() : { width: e6.offsetWidth, height: e6.offsetHeight }).width === o3.width ? 1 : t6.width / o3.width;
  return [(i3 - o3.left) * a4, (n3 - o3.top) * a4];
};
var Ui = Object.keys(ri);
var Xi = Object.keys(vi);
var Hi = function(e6, r3, t6) {
  if ("*" === e6)
    return true;
  if ((0, import_isFunction.default)(e6))
    return e6(r3);
  if ((0, import_isPlainObject.default)(e6)) {
    var i3 = t6 ? (0, import_get.default)(r3, t6) : r3;
    return (0, import_isEqual.default)((0, import_pick.default)(i3, Object.keys(e6)), e6);
  }
  return false;
};
var Ki = function(e6, r3, t6, i3) {
  var n3 = void 0 === i3 ? {} : i3, o3 = n3.dataKey, a4 = n3.colorKey, l3 = void 0 === a4 ? "color" : a4, s4 = n3.targetKey, d3 = void 0 === s4 ? "fill" : s4, u3 = [], c9 = {};
  return e6.length && r3.length && (u3 = [].concat(e6), r3.forEach(function(r4) {
    for (var i4 = function() {
      var i5 = t6[n4], a5 = i5.id, s5 = i5.match;
      if (Hi(s5, r4, o3)) {
        var f3 = e6.find(function(e7) {
          return e7.id === a5;
        });
        if (f3) {
          if (Xi.includes(f3.type))
            if ("inherit" === f3.background || "inherit" === f3.color) {
              var p3 = (0, import_get.default)(r4, l3), h2 = f3.background, g3 = f3.color, b3 = a5;
              "inherit" === f3.background && (b3 = b3 + ".bg." + p3, h2 = p3), "inherit" === f3.color && (b3 = b3 + ".fg." + p3, g3 = p3), (0, import_set2.default)(r4, d3, "url(#" + b3 + ")"), c9[b3] || (u3.push(Mr({}, f3, { id: b3, background: h2, color: g3 })), c9[b3] = 1);
            } else
              (0, import_set2.default)(r4, d3, "url(#" + a5 + ")");
          else if (Ui.includes(f3.type)) {
            if (f3.colors.map(function(e7) {
              return e7.color;
            }).includes("inherit")) {
              var m4 = (0, import_get.default)(r4, l3), R = a5, q = Mr({}, f3, { colors: f3.colors.map(function(e7, r5) {
                return "inherit" !== e7.color ? e7 : (R = R + "." + r5 + "." + m4, Mr({}, e7, { color: "inherit" === e7.color ? m4 : e7.color }));
              }) });
              q.id = R, (0, import_set2.default)(r4, d3, "url(#" + R + ")"), c9[R] || (u3.push(q), c9[R] = 1);
            } else
              (0, import_set2.default)(r4, d3, "url(#" + a5 + ")");
          }
        }
        return "break";
      }
    }, n4 = 0; n4 < t6.length; n4++) {
      if ("break" === i4())
        break;
    }
  })), u3;
};

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function v2() {
  return v2 = Object.assign ? Object.assign.bind() : function(t6) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var o3 = arguments[i3];
      for (var n3 in o3)
        Object.prototype.hasOwnProperty.call(o3, n3) && (t6[n3] = o3[n3]);
    }
    return t6;
  }, v2.apply(this, arguments);
}
var x3 = { pointerEvents: "none", position: "absolute", zIndex: 10, top: 0, left: 0 };
var m2 = function(t6, i3) {
  return "translate(" + t6 + "px, " + i3 + "px)";
};
var b = (0, import_react16.memo)(function(t6) {
  var o3, n3 = t6.position, r3 = t6.anchor, e6 = t6.children, l3 = Ut(), u3 = $r(), p3 = u3.animate, f3 = u3.config, b3 = Lt(), g3 = b3[0], w3 = b3[1], T3 = (0, import_react16.useRef)(false), C9 = void 0, E7 = false, P3 = w3.width > 0 && w3.height > 0, j3 = Math.round(n3[0]), N2 = Math.round(n3[1]);
  P3 && ("top" === r3 ? (j3 -= w3.width / 2, N2 -= w3.height + 14) : "right" === r3 ? (j3 += 14, N2 -= w3.height / 2) : "bottom" === r3 ? (j3 -= w3.width / 2, N2 += 14) : "left" === r3 ? (j3 -= w3.width + 14, N2 -= w3.height / 2) : "center" === r3 && (j3 -= w3.width / 2, N2 -= w3.height / 2), C9 = { transform: m2(j3, N2) }, T3.current || (E7 = true), T3.current = [j3, N2]);
  var O3 = useSpring({ to: C9, config: f3, immediate: !p3 || E7 }), V2 = v2({}, x3, l3.tooltip, { transform: null != (o3 = O3.transform) ? o3 : m2(j3, N2) });
  return (0, import_jsx_runtime2.jsx)(animated.div, { ref: g3, style: V2, children: e6 });
});
b.displayName = "TooltipWrapper";
var g = (0, import_react16.memo)(function(t6) {
  var i3 = t6.size, o3 = void 0 === i3 ? 12 : i3, n3 = t6.color, r3 = t6.style;
  return (0, import_jsx_runtime2.jsx)("span", { style: v2({ display: "block", width: o3, height: o3, background: n3 }, void 0 === r3 ? {} : r3) });
});
var w = (0, import_react16.memo)(function(t6) {
  var i3, o3 = t6.id, n3 = t6.value, r3 = t6.format, e6 = t6.enableChip, l3 = void 0 !== e6 && e6, a4 = t6.color, c9 = t6.renderContent, h2 = Ut(), d3 = Yt(r3);
  if ("function" == typeof c9)
    i3 = c9();
  else {
    var f3 = n3;
    void 0 !== d3 && void 0 !== f3 && (f3 = d3(f3)), i3 = (0, import_jsx_runtime2.jsxs)("div", { style: h2.tooltip.basic, children: [l3 && (0, import_jsx_runtime2.jsx)(g, { color: a4, style: h2.tooltip.chip }), void 0 !== f3 ? (0, import_jsx_runtime2.jsxs)("span", { children: [o3, ": ", (0, import_jsx_runtime2.jsx)("strong", { children: "" + f3 })] }) : o3] });
  }
  return (0, import_jsx_runtime2.jsx)("div", { style: h2.tooltip.container, children: i3 });
});
var T = { width: "100%", borderCollapse: "collapse" };
var C4 = (0, import_react16.memo)(function(t6) {
  var i3, o3 = t6.title, n3 = t6.rows, r3 = void 0 === n3 ? [] : n3, e6 = t6.renderContent, l3 = Ut();
  return r3.length ? (i3 = "function" == typeof e6 ? e6() : (0, import_jsx_runtime2.jsxs)("div", { children: [o3 && o3, (0, import_jsx_runtime2.jsx)("table", { style: v2({}, T, l3.tooltip.table), children: (0, import_jsx_runtime2.jsx)("tbody", { children: r3.map(function(t7, i4) {
    return (0, import_jsx_runtime2.jsx)("tr", { children: t7.map(function(t8, i5) {
      return (0, import_jsx_runtime2.jsx)("td", { style: l3.tooltip.tableCell, children: t8 }, i5);
    }) }, i4);
  }) }) })] }), (0, import_jsx_runtime2.jsx)("div", { style: l3.tooltip.container, children: i3 })) : null;
});
C4.displayName = "TableTooltip";
var E3 = (0, import_react16.memo)(function(t6) {
  var i3 = t6.x0, n3 = t6.x1, r3 = t6.y0, e6 = t6.y1, l3 = Ut(), d3 = $r(), u3 = d3.animate, p3 = d3.config, f3 = (0, import_react16.useMemo)(function() {
    return v2({}, l3.crosshair.line, { pointerEvents: "none" });
  }, [l3.crosshair.line]), x5 = useSpring({ x1: i3, x2: n3, y1: r3, y2: e6, config: p3, immediate: !u3 });
  return (0, import_jsx_runtime2.jsx)(animated.line, v2({}, x5, { fill: "none", style: f3 }));
});
E3.displayName = "CrosshairLine";
var P2 = (0, import_react16.memo)(function(t6) {
  var i3, o3, n3 = t6.width, r3 = t6.height, e6 = t6.type, l3 = t6.x, a4 = t6.y;
  return "cross" === e6 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: r3 }, o3 = { x0: 0, x1: n3, y0: a4, y1: a4 }) : "top-left" === e6 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: a4 }, o3 = { x0: 0, x1: l3, y0: a4, y1: a4 }) : "top" === e6 ? i3 = { x0: l3, x1: l3, y0: 0, y1: a4 } : "top-right" === e6 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: a4 }, o3 = { x0: l3, x1: n3, y0: a4, y1: a4 }) : "right" === e6 ? o3 = { x0: l3, x1: n3, y0: a4, y1: a4 } : "bottom-right" === e6 ? (i3 = { x0: l3, x1: l3, y0: a4, y1: r3 }, o3 = { x0: l3, x1: n3, y0: a4, y1: a4 }) : "bottom" === e6 ? i3 = { x0: l3, x1: l3, y0: a4, y1: r3 } : "bottom-left" === e6 ? (i3 = { x0: l3, x1: l3, y0: a4, y1: r3 }, o3 = { x0: 0, x1: l3, y0: a4, y1: a4 }) : "left" === e6 ? o3 = { x0: 0, x1: l3, y0: a4, y1: a4 } : "x" === e6 ? i3 = { x0: l3, x1: l3, y0: 0, y1: r3 } : "y" === e6 && (o3 = { x0: 0, x1: n3, y0: a4, y1: a4 }), (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [i3 && (0, import_jsx_runtime2.jsx)(E3, { x0: i3.x0, x1: i3.x1, y0: i3.y0, y1: i3.y1 }), o3 && (0, import_jsx_runtime2.jsx)(E3, { x0: o3.x0, x1: o3.x1, y0: o3.y0, y1: o3.y1 })] });
});
P2.displayName = "Crosshair";
var j = (0, import_react16.createContext)({ showTooltipAt: function() {
}, showTooltipFromEvent: function() {
}, hideTooltip: function() {
} });
var N = { isVisible: false, position: [null, null], content: null, anchor: null };
var O = (0, import_react16.createContext)(N);
var V = function(t6) {
  var i3 = (0, import_react16.useState)(N), n3 = i3[0], l3 = i3[1], a4 = (0, import_react16.useCallback)(function(t7, i4, o3) {
    var n4 = i4[0], r3 = i4[1];
    void 0 === o3 && (o3 = "top"), l3({ isVisible: true, position: [n4, r3], anchor: o3, content: t7 });
  }, [l3]), c9 = (0, import_react16.useCallback)(function(i4, o3, n4) {
    void 0 === n4 && (n4 = "top");
    var r3 = t6.current.getBoundingClientRect(), e6 = t6.current.offsetWidth, a5 = e6 === r3.width ? 1 : e6 / r3.width, c10 = (o3.clientX - r3.left) * a5, s5 = (o3.clientY - r3.top) * a5;
    "left" !== n4 && "right" !== n4 || (n4 = c10 < r3.width / 2 ? "right" : "left"), l3({ isVisible: true, position: [c10, s5], anchor: n4, content: i4 });
  }, [t6, l3]), s4 = (0, import_react16.useCallback)(function() {
    l3(N);
  }, [l3]);
  return { actions: (0, import_react16.useMemo)(function() {
    return { showTooltipAt: a4, showTooltipFromEvent: c9, hideTooltip: s4 };
  }, [a4, c9, s4]), state: n3 };
};
var k2 = function() {
  var t6 = (0, import_react16.useContext)(j);
  if (void 0 === t6)
    throw new Error("useTooltip must be used within a TooltipProvider");
  return t6;
};
var z2 = function() {
  var t6 = (0, import_react16.useContext)(O);
  if (void 0 === t6)
    throw new Error("useTooltipState must be used within a TooltipProvider");
  return t6;
};
var A3 = function(t6) {
  return t6.isVisible;
};
var F = function() {
  var t6 = z2();
  return A3(t6) ? (0, import_jsx_runtime2.jsx)(b, { position: t6.position, anchor: t6.anchor, children: t6.content }) : null;
};
var M = function(t6) {
  var i3 = t6.container, o3 = t6.children, n3 = V(i3), r3 = n3.actions, e6 = n3.state;
  return (0, import_jsx_runtime2.jsx)(j.Provider, { value: r3, children: (0, import_jsx_runtime2.jsx)(O.Provider, { value: e6, children: o3 }) });
};

// node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_react17 = __toESM(require_react());
var import_lodash2 = __toESM(require_lodash());

// node_modules/d3-color/src/define.js
function define_default3(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend3(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color3() {
}
var darker3 = 0.7;
var brighter3 = 1 / darker3;
var reI3 = "\\s*([+-]?\\d+)\\s*";
var reN3 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP3 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex3 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger3 = new RegExp(`^rgb\\(${reI3},${reI3},${reI3}\\)$`);
var reRgbPercent3 = new RegExp(`^rgb\\(${reP3},${reP3},${reP3}\\)$`);
var reRgbaInteger3 = new RegExp(`^rgba\\(${reI3},${reI3},${reI3},${reN3}\\)$`);
var reRgbaPercent3 = new RegExp(`^rgba\\(${reP3},${reP3},${reP3},${reN3}\\)$`);
var reHslPercent3 = new RegExp(`^hsl\\(${reN3},${reP3},${reP3}\\)$`);
var reHslaPercent3 = new RegExp(`^hsla\\(${reN3},${reP3},${reP3},${reN3}\\)$`);
var named3 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default3(Color3, color3, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex3,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex3,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl3,
  formatRgb: color_formatRgb3,
  toString: color_formatRgb3
});
function color_formatHex3() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl3() {
  return hslConvert3(this).formatHsl();
}
function color_formatRgb3() {
  return this.rgb().formatRgb();
}
function color3(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex3.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn3(m4) : l3 === 3 ? new Rgb3(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba4(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba4(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger3.exec(format4)) ? new Rgb3(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent3.exec(format4)) ? new Rgb3(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger3.exec(format4)) ? rgba4(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent3.exec(format4)) ? rgba4(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent3.exec(format4)) ? hsla4(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent3.exec(format4)) ? hsla4(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named3.hasOwnProperty(format4) ? rgbn3(named3[format4]) : format4 === "transparent" ? new Rgb3(NaN, NaN, NaN, 0) : null;
}
function rgbn3(n3) {
  return new Rgb3(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba4(r3, g3, b3, a4) {
  if (a4 <= 0)
    r3 = g3 = b3 = NaN;
  return new Rgb3(r3, g3, b3, a4);
}
function rgbConvert3(o3) {
  if (!(o3 instanceof Color3))
    o3 = color3(o3);
  if (!o3)
    return new Rgb3();
  o3 = o3.rgb();
  return new Rgb3(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb4(r3, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert3(r3) : new Rgb3(r3, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb3(r3, g3, b3, opacity) {
  this.r = +r3;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default3(Rgb3, rgb4, extend3(Color3, {
  brighter(k4) {
    k4 = k4 == null ? brighter3 : Math.pow(brighter3, k4);
    return new Rgb3(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker(k4) {
    k4 = k4 == null ? darker3 : Math.pow(darker3, k4);
    return new Rgb3(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb3(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex3,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex3,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb3,
  toString: rgb_formatRgb3
}));
function rgb_formatHex3() {
  return `#${hex5(this.r)}${hex5(this.g)}${hex5(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex5(this.r)}${hex5(this.g)}${hex5(this.b)}${hex5((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb3() {
  const a4 = clampa(this.opacity);
  return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex5(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla4(h2, s4, l3, a4) {
  if (a4 <= 0)
    h2 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s4 = NaN;
  else if (s4 <= 0)
    h2 = NaN;
  return new Hsl3(h2, s4, l3, a4);
}
function hslConvert3(o3) {
  if (o3 instanceof Hsl3)
    return new Hsl3(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color3))
    o3 = color3(o3);
  if (!o3)
    return new Hsl3();
  if (o3 instanceof Hsl3)
    return o3;
  o3 = o3.rgb();
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, min5 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h2 = NaN, s4 = max5 - min5, l3 = (max5 + min5) / 2;
  if (s4) {
    if (r3 === max5)
      h2 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max5)
      h2 = (b3 - r3) / s4 + 2;
    else
      h2 = (r3 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h2 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl3(h2, s4, l3, o3.opacity);
}
function hsl6(h2, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert3(h2) : new Hsl3(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl3(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default3(Hsl3, hsl6, extend3(Color3, {
  brighter(k4) {
    k4 = k4 == null ? brighter3 : Math.pow(brighter3, k4);
    return new Hsl3(this.h, this.s, this.l * k4, this.opacity);
  },
  darker(k4) {
    k4 = k4 == null ? darker3 : Math.pow(darker3, k4);
    return new Hsl3(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb3(
      hsl2rgb3(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb3(h2, m1, m22),
      hsl2rgb3(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl3(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb3(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians3 = Math.PI / 180;
var degrees5 = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K3 = 18;
var Xn3 = 0.96422;
var Yn3 = 1;
var Zn3 = 0.82521;
var t04 = 4 / 29;
var t14 = 6 / 29;
var t23 = 3 * t14 * t14;
var t33 = t14 * t14 * t14;
function labConvert3(o3) {
  if (o3 instanceof Lab3)
    return new Lab3(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl3)
    return hcl2lab3(o3);
  if (!(o3 instanceof Rgb3))
    o3 = rgbConvert3(o3);
  var r3 = rgb2lrgb3(o3.r), g3 = rgb2lrgb3(o3.g), b3 = rgb2lrgb3(o3.b), y4 = xyz2lab3((0.2225045 * r3 + 0.7168786 * g3 + 0.0606169 * b3) / Yn3), x5, z3;
  if (r3 === g3 && g3 === b3)
    x5 = z3 = y4;
  else {
    x5 = xyz2lab3((0.4360747 * r3 + 0.3850649 * g3 + 0.1430804 * b3) / Xn3);
    z3 = xyz2lab3((0.0139322 * r3 + 0.0971045 * g3 + 0.7141733 * b3) / Zn3);
  }
  return new Lab3(116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z3), o3.opacity);
}
function lab5(l3, a4, b3, opacity) {
  return arguments.length === 1 ? labConvert3(l3) : new Lab3(l3, a4, b3, opacity == null ? 1 : opacity);
}
function Lab3(l3, a4, b3, opacity) {
  this.l = +l3;
  this.a = +a4;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default3(Lab3, lab5, extend3(Color3, {
  brighter(k4) {
    return new Lab3(this.l + K3 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  darker(k4) {
    return new Lab3(this.l - K3 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  rgb() {
    var y4 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y4 : y4 + this.a / 500, z3 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x5 = Xn3 * lab2xyz3(x5);
    y4 = Yn3 * lab2xyz3(y4);
    z3 = Zn3 * lab2xyz3(z3);
    return new Rgb3(
      lrgb2rgb3(3.1338561 * x5 - 1.6168667 * y4 - 0.4906146 * z3),
      lrgb2rgb3(-0.9787684 * x5 + 1.9161415 * y4 + 0.033454 * z3),
      lrgb2rgb3(0.0719453 * x5 - 0.2289914 * y4 + 1.4052427 * z3),
      this.opacity
    );
  }
}));
function xyz2lab3(t6) {
  return t6 > t33 ? Math.pow(t6, 1 / 3) : t6 / t23 + t04;
}
function lab2xyz3(t6) {
  return t6 > t14 ? t6 * t6 * t6 : t23 * (t6 - t04);
}
function lrgb2rgb3(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb3(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert3(o3) {
  if (o3 instanceof Hcl3)
    return new Hcl3(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab3))
    o3 = labConvert3(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl3(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees5;
  return new Hcl3(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl5(h2, c9, l3, opacity) {
  return arguments.length === 1 ? hclConvert3(h2) : new Hcl3(h2, c9, l3, opacity == null ? 1 : opacity);
}
function Hcl3(h2, c9, l3, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab3(o3) {
  if (isNaN(o3.h))
    return new Lab3(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians3;
  return new Lab3(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default3(Hcl3, hcl5, extend3(Color3, {
  brighter(k4) {
    return new Hcl3(this.h, this.c, this.l + K3 * (k4 == null ? 1 : k4), this.opacity);
  },
  darker(k4) {
    return new Hcl3(this.h, this.c, this.l - K3 * (k4 == null ? 1 : k4), this.opacity);
  },
  rgb() {
    return hcl2lab3(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A4 = -0.14861;
var B3 = 1.78277;
var C5 = -0.29227;
var D3 = -0.90649;
var E4 = 1.97294;
var ED3 = E4 * D3;
var EB3 = E4 * B3;
var BC_DA3 = B3 * C5 - D3 * A4;
function cubehelixConvert3(o3) {
  if (o3 instanceof Cubehelix3)
    return new Cubehelix3(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb3))
    o3 = rgbConvert3(o3);
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA3 * b3 + ED3 * r3 - EB3 * g3) / (BC_DA3 + ED3 - EB3), bl = b3 - l3, k4 = (E4 * (g3 - l3) - C5 * bl) / D3, s4 = Math.sqrt(k4 * k4 + bl * bl) / (E4 * l3 * (1 - l3)), h2 = s4 ? Math.atan2(k4, bl) * degrees5 - 120 : NaN;
  return new Cubehelix3(h2 < 0 ? h2 + 360 : h2, s4, l3, o3.opacity);
}
function cubehelix5(h2, s4, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert3(h2) : new Cubehelix3(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Cubehelix3(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default3(Cubehelix3, cubehelix5, extend3(Color3, {
  brighter(k4) {
    k4 = k4 == null ? brighter3 : Math.pow(brighter3, k4);
    return new Cubehelix3(this.h, this.s, this.l * k4, this.opacity);
  },
  darker(k4) {
    k4 = k4 == null ? darker3 : Math.pow(darker3, k4);
    return new Cubehelix3(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians3, l3 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh5 = Math.cos(h2), sinh5 = Math.sin(h2);
    return new Rgb3(
      255 * (l3 + a4 * (A4 * cosh5 + B3 * sinh5)),
      255 * (l3 + a4 * (C5 * cosh5 + D3 * sinh5)),
      255 * (l3 + a4 * (E4 * cosh5)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@nivo/colors/node_modules/d3-array/src/ascending.js
function ascending_default3(a4, b3) {
  return a4 < b3 ? -1 : a4 > b3 ? 1 : a4 >= b3 ? 0 : NaN;
}

// node_modules/@nivo/colors/node_modules/d3-array/src/bisector.js
function bisector_default2(f3) {
  let delta = f3;
  let compare = f3;
  if (f3.length === 1) {
    delta = (d3, x5) => f3(d3) - x5;
    compare = ascendingComparator2(f3);
  }
  function left(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    const i3 = left(a4, x5, lo, hi - 1);
    return i3 > lo && delta(a4[i3 - 1], x5) > -delta(a4[i3], x5) ? i3 - 1 : i3;
  }
  return { left, center, right };
}
function ascendingComparator2(f3) {
  return (d3, x5) => ascending_default3(f3(d3), x5);
}

// node_modules/@nivo/colors/node_modules/d3-array/src/number.js
function number_default4(x5) {
  return x5 === null ? NaN : +x5;
}

// node_modules/@nivo/colors/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default2(ascending_default3);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;
var bisectCenter2 = bisector_default2(number_default4).center;

// node_modules/@nivo/colors/node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice3 = array2.slice;
var map4 = array2.map;

// node_modules/@nivo/colors/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);
function tickStep2(start2, stop2, count4) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count4), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e102)
    step1 *= 10;
  else if (error >= e52)
    step1 *= 5;
  else if (error >= e22)
    step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/colors/node_modules/d3-array/src/shuffle.js
var shuffle_default2 = shuffler2(Math.random);
function shuffler2(random) {
  return function shuffle(array4, i0 = 0, i1 = array4.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i3 = random() * m4-- | 0, t6 = array4[m4 + i0];
      array4[m4 + i0] = array4[i3 + i0];
      array4[i3 + i0] = t6;
    }
    return array4;
  };
}

// node_modules/@nivo/colors/node_modules/d3-scale/src/init.js
function initRange2(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/@nivo/colors/node_modules/d3-scale/src/ordinal.js
var implicit2 = Symbol("implicit");
function ordinal2() {
  var index4 = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit2;
  function scale(d3) {
    var key = d3 + "", i3 = index4.get(key);
    if (!i3) {
      if (unknown !== implicit2)
        return unknown;
      index4.set(key, i3 = domain.push(d3));
    }
    return range[(i3 - 1) % range.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index4 = /* @__PURE__ */ new Map();
    for (const value of _) {
      const key = value + "";
      if (index4.has(key))
        continue;
      index4.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal2(domain, range).unknown(unknown);
  };
  initRange2.apply(scale, arguments);
  return scale;
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/node_modules/d3-color/src/define.js
function define_default4(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend4(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/node_modules/d3-color/src/color.js
function Color4() {
}
var darker4 = 0.7;
var brighter4 = 1 / darker4;
var reI4 = "\\s*([+-]?\\d+)\\s*";
var reN4 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP4 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex4 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger4 = new RegExp("^rgb\\(" + [reI4, reI4, reI4] + "\\)$");
var reRgbPercent4 = new RegExp("^rgb\\(" + [reP4, reP4, reP4] + "\\)$");
var reRgbaInteger4 = new RegExp("^rgba\\(" + [reI4, reI4, reI4, reN4] + "\\)$");
var reRgbaPercent4 = new RegExp("^rgba\\(" + [reP4, reP4, reP4, reN4] + "\\)$");
var reHslPercent4 = new RegExp("^hsl\\(" + [reN4, reP4, reP4] + "\\)$");
var reHslaPercent4 = new RegExp("^hsla\\(" + [reN4, reP4, reP4, reN4] + "\\)$");
var named4 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default4(Color4, color4, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex4,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex4,
  formatHsl: color_formatHsl4,
  formatRgb: color_formatRgb4,
  toString: color_formatRgb4
});
function color_formatHex4() {
  return this.rgb().formatHex();
}
function color_formatHsl4() {
  return hslConvert4(this).formatHsl();
}
function color_formatRgb4() {
  return this.rgb().formatRgb();
}
function color4(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex4.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn4(m4) : l3 === 3 ? new Rgb4(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba5(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba5(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger4.exec(format4)) ? new Rgb4(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent4.exec(format4)) ? new Rgb4(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger4.exec(format4)) ? rgba5(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent4.exec(format4)) ? rgba5(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent4.exec(format4)) ? hsla5(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent4.exec(format4)) ? hsla5(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named4.hasOwnProperty(format4) ? rgbn4(named4[format4]) : format4 === "transparent" ? new Rgb4(NaN, NaN, NaN, 0) : null;
}
function rgbn4(n3) {
  return new Rgb4(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba5(r3, g3, b3, a4) {
  if (a4 <= 0)
    r3 = g3 = b3 = NaN;
  return new Rgb4(r3, g3, b3, a4);
}
function rgbConvert4(o3) {
  if (!(o3 instanceof Color4))
    o3 = color4(o3);
  if (!o3)
    return new Rgb4();
  o3 = o3.rgb();
  return new Rgb4(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb5(r3, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert4(r3) : new Rgb4(r3, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb4(r3, g3, b3, opacity) {
  this.r = +r3;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default4(Rgb4, rgb5, extend4(Color4, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter4 : Math.pow(brighter4, k4);
    return new Rgb4(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker4 : Math.pow(darker4, k4);
    return new Rgb4(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex4,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex4,
  formatRgb: rgb_formatRgb4,
  toString: rgb_formatRgb4
}));
function rgb_formatHex4() {
  return "#" + hex7(this.r) + hex7(this.g) + hex7(this.b);
}
function rgb_formatRgb4() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex7(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla5(h2, s4, l3, a4) {
  if (a4 <= 0)
    h2 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s4 = NaN;
  else if (s4 <= 0)
    h2 = NaN;
  return new Hsl4(h2, s4, l3, a4);
}
function hslConvert4(o3) {
  if (o3 instanceof Hsl4)
    return new Hsl4(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color4))
    o3 = color4(o3);
  if (!o3)
    return new Hsl4();
  if (o3 instanceof Hsl4)
    return o3;
  o3 = o3.rgb();
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, min5 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h2 = NaN, s4 = max5 - min5, l3 = (max5 + min5) / 2;
  if (s4) {
    if (r3 === max5)
      h2 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max5)
      h2 = (b3 - r3) / s4 + 2;
    else
      h2 = (r3 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h2 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl4(h2, s4, l3, o3.opacity);
}
function hsl7(h2, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert4(h2) : new Hsl4(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl4(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default4(Hsl4, hsl7, extend4(Color4, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter4 : Math.pow(brighter4, k4);
    return new Hsl4(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker4 : Math.pow(darker4, k4);
    return new Hsl4(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb4(
      hsl2rgb4(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb4(h2, m1, m22),
      hsl2rgb4(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb4(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/node_modules/d3-color/src/math.js
var radians4 = Math.PI / 180;
var degrees6 = 180 / Math.PI;

// node_modules/@nivo/colors/node_modules/d3-interpolate/node_modules/d3-color/src/lab.js
var K4 = 18;
var Xn4 = 0.96422;
var Yn4 = 1;
var Zn4 = 0.82521;
var t05 = 4 / 29;
var t15 = 6 / 29;
var t24 = 3 * t15 * t15;
var t34 = t15 * t15 * t15;
function labConvert4(o3) {
  if (o3 instanceof Lab4)
    return new Lab4(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl4)
    return hcl2lab4(o3);
  if (!(o3 instanceof Rgb4))
    o3 = rgbConvert4(o3);
  var r3 = rgb2lrgb4(o3.r), g3 = rgb2lrgb4(o3.g), b3 = rgb2lrgb4(o3.b), y4 = xyz2lab4((0.2225045 * r3 + 0.7168786 * g3 + 0.0606169 * b3) / Yn4), x5, z3;
  if (r3 === g3 && g3 === b3)
    x5 = z3 = y4;
  else {
    x5 = xyz2lab4((0.4360747 * r3 + 0.3850649 * g3 + 0.1430804 * b3) / Xn4);
    z3 = xyz2lab4((0.0139322 * r3 + 0.0971045 * g3 + 0.7141733 * b3) / Zn4);
  }
  return new Lab4(116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z3), o3.opacity);
}
function lab6(l3, a4, b3, opacity) {
  return arguments.length === 1 ? labConvert4(l3) : new Lab4(l3, a4, b3, opacity == null ? 1 : opacity);
}
function Lab4(l3, a4, b3, opacity) {
  this.l = +l3;
  this.a = +a4;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default4(Lab4, lab6, extend4(Color4, {
  brighter: function(k4) {
    return new Lab4(this.l + K4 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  darker: function(k4) {
    return new Lab4(this.l - K4 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y4 : y4 + this.a / 500, z3 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x5 = Xn4 * lab2xyz4(x5);
    y4 = Yn4 * lab2xyz4(y4);
    z3 = Zn4 * lab2xyz4(z3);
    return new Rgb4(
      lrgb2rgb4(3.1338561 * x5 - 1.6168667 * y4 - 0.4906146 * z3),
      lrgb2rgb4(-0.9787684 * x5 + 1.9161415 * y4 + 0.033454 * z3),
      lrgb2rgb4(0.0719453 * x5 - 0.2289914 * y4 + 1.4052427 * z3),
      this.opacity
    );
  }
}));
function xyz2lab4(t6) {
  return t6 > t34 ? Math.pow(t6, 1 / 3) : t6 / t24 + t05;
}
function lab2xyz4(t6) {
  return t6 > t15 ? t6 * t6 * t6 : t24 * (t6 - t05);
}
function lrgb2rgb4(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb4(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert4(o3) {
  if (o3 instanceof Hcl4)
    return new Hcl4(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab4))
    o3 = labConvert4(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl4(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees6;
  return new Hcl4(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl6(h2, c9, l3, opacity) {
  return arguments.length === 1 ? hclConvert4(h2) : new Hcl4(h2, c9, l3, opacity == null ? 1 : opacity);
}
function Hcl4(h2, c9, l3, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab4(o3) {
  if (isNaN(o3.h))
    return new Lab4(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians4;
  return new Lab4(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default4(Hcl4, hcl6, extend4(Color4, {
  brighter: function(k4) {
    return new Hcl4(this.h, this.c, this.l + K4 * (k4 == null ? 1 : k4), this.opacity);
  },
  darker: function(k4) {
    return new Hcl4(this.h, this.c, this.l - K4 * (k4 == null ? 1 : k4), this.opacity);
  },
  rgb: function() {
    return hcl2lab4(this).rgb();
  }
}));

// node_modules/@nivo/colors/node_modules/d3-interpolate/node_modules/d3-color/src/cubehelix.js
var A5 = -0.14861;
var B4 = 1.78277;
var C6 = -0.29227;
var D4 = -0.90649;
var E5 = 1.97294;
var ED4 = E5 * D4;
var EB4 = E5 * B4;
var BC_DA4 = B4 * C6 - D4 * A5;
function cubehelixConvert4(o3) {
  if (o3 instanceof Cubehelix4)
    return new Cubehelix4(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb4))
    o3 = rgbConvert4(o3);
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA4 * b3 + ED4 * r3 - EB4 * g3) / (BC_DA4 + ED4 - EB4), bl = b3 - l3, k4 = (E5 * (g3 - l3) - C6 * bl) / D4, s4 = Math.sqrt(k4 * k4 + bl * bl) / (E5 * l3 * (1 - l3)), h2 = s4 ? Math.atan2(k4, bl) * degrees6 - 120 : NaN;
  return new Cubehelix4(h2 < 0 ? h2 + 360 : h2, s4, l3, o3.opacity);
}
function cubehelix6(h2, s4, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert4(h2) : new Cubehelix4(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Cubehelix4(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default4(Cubehelix4, cubehelix6, extend4(Color4, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter4 : Math.pow(brighter4, k4);
    return new Cubehelix4(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker4 : Math.pow(darker4, k4);
    return new Cubehelix4(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians4, l3 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh5 = Math.cos(h2), sinh5 = Math.sin(h2);
    return new Rgb4(
      255 * (l3 + a4 * (A5 * cosh5 + B4 * sinh5)),
      255 * (l3 + a4 * (C6 * cosh5 + D4 * sinh5)),
      255 * (l3 + a4 * (E5 * cosh5)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/basis.js
function basis3(t19, v0, v1, v22, v32) {
  var t26 = t19 * t19, t36 = t26 * t19;
  return ((1 - 3 * t19 + 3 * t26 - t36) * v0 + (4 - 6 * t26 + 3 * t36) * v1 + (1 + 3 * t19 + 3 * t26 - 3 * t36) * v22 + t36 * v32) / 6;
}
function basis_default4(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v32 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis3((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default4(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v32 = values[(i3 + 2) % n3];
    return basis3((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/constant.js
var constant_default6 = (x5) => () => x5;

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/color.js
function linear4(a4, d3) {
  return function(t6) {
    return a4 + t6 * d3;
  };
}
function exponential3(a4, b3, y4) {
  return a4 = Math.pow(a4, y4), b3 = Math.pow(b3, y4) - a4, y4 = 1 / y4, function(t6) {
    return Math.pow(a4 + t6 * b3, y4);
  };
}
function hue3(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear4(a4, d3 > 180 || d3 < -180 ? d3 - 360 * Math.round(d3 / 360) : d3) : constant_default6(isNaN(a4) ? b3 : a4);
}
function gamma3(y4) {
  return (y4 = +y4) === 1 ? nogamma3 : function(a4, b3) {
    return b3 - a4 ? exponential3(a4, b3, y4) : constant_default6(isNaN(a4) ? b3 : a4);
  };
}
function nogamma3(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear4(a4, d3) : constant_default6(isNaN(a4) ? b3 : a4);
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/rgb.js
var rgb_default3 = function rgbGamma3(y4) {
  var color6 = gamma3(y4);
  function rgb7(start2, end) {
    var r3 = color6((start2 = rgb5(start2)).r, (end = rgb5(end)).r), g3 = color6(start2.g, end.g), b3 = color6(start2.b, end.b), opacity = nogamma3(start2.opacity, end.opacity);
    return function(t6) {
      start2.r = r3(t6);
      start2.g = g3(t6);
      start2.b = b3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  }
  rgb7.gamma = rgbGamma3;
  return rgb7;
}(1);
function rgbSpline3(spline) {
  return function(colors3) {
    var n3 = colors3.length, r3 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i3, color6;
    for (i3 = 0; i3 < n3; ++i3) {
      color6 = rgb5(colors3[i3]);
      r3[i3] = color6.r || 0;
      g3[i3] = color6.g || 0;
      b3[i3] = color6.b || 0;
    }
    r3 = spline(r3);
    g3 = spline(g3);
    b3 = spline(b3);
    color6.opacity = 1;
    return function(t6) {
      color6.r = r3(t6);
      color6.g = g3(t6);
      color6.b = b3(t6);
      return color6 + "";
    };
  };
}
var rgbBasis3 = rgbSpline3(basis_default4);
var rgbBasisClosed3 = rgbSpline3(basisClosed_default4);

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/number.js
function number_default5(a4, b3) {
  return a4 = +a4, b3 = +b3, function(t6) {
    return a4 * (1 - t6) + b3 * t6;
  };
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/string.js
var reA3 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB3 = new RegExp(reA3.source, "g");

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/transform/decompose.js
var degrees7 = 180 / Math.PI;
var identity5 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default3(a4, b3, c9, d3, e6, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b3 * b3))
    a4 /= scaleX, b3 /= scaleX;
  if (skewX = a4 * c9 + b3 * d3)
    c9 -= a4 * skewX, d3 -= b3 * skewX;
  if (scaleY = Math.sqrt(c9 * c9 + d3 * d3))
    c9 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a4 * d3 < b3 * c9)
    a4 = -a4, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e6,
    translateY: f3,
    rotate: Math.atan2(b3, a4) * degrees7,
    skewX: Math.atan(skewX) * degrees7,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/transform/parse.js
var svgNode3;
function parseCss3(value) {
  const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m4.isIdentity ? identity5 : decompose_default3(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
}
function parseSvg3(value) {
  if (value == null)
    return identity5;
  if (!svgNode3)
    svgNode3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode3.setAttribute("transform", value);
  if (!(value = svgNode3.transform.baseVal.consolidate()))
    return identity5;
  value = value.matrix;
  return decompose_default3(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform3(parse, pxComma, pxParen, degParen) {
  function pop(s4) {
    return s4.length ? s4.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default5(xa, xb) }, { i: i3 - 2, x: number_default5(ya, yb) });
    } else if (xb || yb) {
      s4.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a4, b3, s4, q) {
    if (a4 !== b3) {
      if (a4 - b3 > 180)
        b3 += 360;
      else if (b3 - a4 > 180)
        a4 += 360;
      q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default5(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a4, b3, s4, q) {
    if (a4 !== b3) {
      q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default5(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default5(xa, xb) }, { i: i3 - 2, x: number_default5(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b3) {
    var s4 = [], q = [];
    a4 = parse(a4), b3 = parse(b3);
    translate(a4.translateX, a4.translateY, b3.translateX, b3.translateY, s4, q);
    rotate(a4.rotate, b3.rotate, s4, q);
    skewX(a4.skewX, b3.skewX, s4, q);
    scale(a4.scaleX, a4.scaleY, b3.scaleX, b3.scaleY, s4, q);
    a4 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s4[(o3 = q[i3]).i] = o3.x(t6);
      return s4.join("");
    };
  };
}
var interpolateTransformCss3 = interpolateTransform3(parseCss3, "px, ", "px)", "deg)");
var interpolateTransformSvg3 = interpolateTransform3(parseSvg3, ", ", ")", ")");

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/zoom.js
var epsilon23 = 1e-12;
function cosh3(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh3(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh3(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var zoom_default3 = function zoomRho3(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i3, S2;
    if (d22 < epsilon23) {
      S2 = Math.log(w1 / w0) / rho;
      i3 = function(t6) {
        return [
          ux0 + t6 * dx,
          uy0 + t6 * dy,
          w0 * Math.exp(rho * t6 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i3 = function(t6) {
        var s4 = t6 * S2, coshr0 = cosh3(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh3(rho * s4 + r0) - sinh3(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh3(rho * s4 + r0)
        ];
      };
    }
    i3.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho3(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/hsl.js
function hsl8(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hsl7(start2)).h, (end = hsl7(end)).h), s4 = nogamma3(start2.s, end.s), l3 = nogamma3(start2.l, end.l), opacity = nogamma3(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.s = s4(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hsl_default3 = hsl8(hue3);
var hslLong3 = hsl8(nogamma3);

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/hcl.js
function hcl7(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hcl6(start2)).h, (end = hcl6(end)).h), c9 = nogamma3(start2.c, end.c), l3 = nogamma3(start2.l, end.l), opacity = nogamma3(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.c = c9(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hcl_default3 = hcl7(hue3);
var hclLong3 = hcl7(nogamma3);

// node_modules/@nivo/colors/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix7(hue5) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix10(start2, end) {
      var h2 = hue5((start2 = cubehelix6(start2)).h, (end = cubehelix6(end)).h), s4 = nogamma3(start2.s, end.s), l3 = nogamma3(start2.l, end.l), opacity = nogamma3(start2.opacity, end.opacity);
      return function(t6) {
        start2.h = h2(t6);
        start2.s = s4(t6);
        start2.l = l3(Math.pow(t6, y4));
        start2.opacity = opacity(t6);
        return start2 + "";
      };
    }
    cubehelix10.gamma = cubehelixGamma;
    return cubehelix10;
  }(1);
}
var cubehelix_default4 = cubehelix7(hue3);
var cubehelixLong3 = cubehelix7(nogamma3);

// node_modules/@nivo/colors/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts2(x5, p3) {
  if ((i3 = (x5 = p3 ? x5.toExponential(p3 - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x5.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i3 + 1)
  ];
}

// node_modules/@nivo/colors/node_modules/d3-format/src/exponent.js
function exponent_default2(x5) {
  return x5 = formatDecimalParts2(Math.abs(x5)), x5 ? x5[1] : NaN;
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t6 = [], j3 = 0, g3 = grouping[0], length = 0;
    while (i3 > 0 && g3 > 0) {
      if (length + g3 + 1 > width)
        g3 = Math.max(1, width - length);
      t6.push(value.substring(i3 -= g3, i3 + g3));
      if ((length += g3 + 1) > width)
        break;
      g3 = grouping[j3 = (j3 + 1) % grouping.length];
    }
    return t6.reverse().join(thousands);
  };
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default2(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i3) {
      return numerals[+i3];
    });
  };
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatSpecifier.js
var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier2(specifier) {
  if (!(match = re2.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier2({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier2.prototype = FormatSpecifier2.prototype;
function FormatSpecifier2(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/colors/node_modules/d3-format/src/formatTrim.js
function formatTrim_default2(s4) {
  out:
    for (var n3 = s4.length, i3 = 1, i0 = -1, i1; i3 < n3; ++i3) {
      switch (s4[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        default:
          if (!+s4[i3])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x5, p3) {
  var d3 = formatDecimalParts2(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1], i3 = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i3 === n3 ? coefficient : i3 > n3 ? coefficient + new Array(i3 - n3 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts2(x5, Math.max(0, p3 + i3 - 1))[0];
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x5, p3) {
  var d3 = formatDecimalParts2(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/colors/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "%": (x5, p3) => (x5 * 100).toFixed(p3),
  "b": (x5) => Math.round(x5).toString(2),
  "c": (x5) => x5 + "",
  "d": formatDecimal_default2,
  "e": (x5, p3) => x5.toExponential(p3),
  "f": (x5, p3) => x5.toFixed(p3),
  "g": (x5, p3) => x5.toPrecision(p3),
  "o": (x5) => Math.round(x5).toString(8),
  "p": (x5, p3) => formatRounded_default2(x5 * 100, p3),
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": (x5) => Math.round(x5).toString(16).toUpperCase(),
  "x": (x5) => Math.round(x5).toString(16)
};

// node_modules/@nivo/colors/node_modules/d3-format/src/identity.js
function identity_default5(x5) {
  return x5;
}

// node_modules/@nivo/colors/node_modules/d3-format/src/locale.js
var map6 = Array.prototype.map;
var prefixes3 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default2(locale7) {
  var group4 = locale7.grouping === void 0 || locale7.thousands === void 0 ? identity_default5 : formatGroup_default2(map6.call(locale7.grouping, Number), locale7.thousands + ""), currencyPrefix = locale7.currency === void 0 ? "" : locale7.currency[0] + "", currencySuffix = locale7.currency === void 0 ? "" : locale7.currency[1] + "", decimal = locale7.decimal === void 0 ? "." : locale7.decimal + "", numerals = locale7.numerals === void 0 ? identity_default5 : formatNumerals_default2(map6.call(locale7.numerals, String)), percent = locale7.percent === void 0 ? "%" : locale7.percent + "", minus = locale7.minus === void 0 ? "−" : locale7.minus + "", nan = locale7.nan === void 0 ? "NaN" : locale7.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier2(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default2[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default2[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i3, n3, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default2(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes3[8 + prefixExponent2 / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n3 = value.length;
          while (++i3 < n3) {
            if (c9 = value.charCodeAt(i3), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group4(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group4(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier2(specifier), specifier.type = "f", specifier)), e6 = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k4 = Math.pow(10, -e6), prefix2 = prefixes3[8 + e6 / 3];
    return function(value2) {
      return f3(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}

// node_modules/@nivo/colors/node_modules/d3-format/src/defaultLocale.js
var locale3;
var format2;
var formatPrefix2;
defaultLocale3({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale3(definition) {
  locale3 = locale_default2(definition);
  format2 = locale3.format;
  formatPrefix2 = locale3.formatPrefix;
  return locale3;
}

// node_modules/@nivo/colors/node_modules/d3-time/src/interval.js
var t06 = /* @__PURE__ */ new Date();
var t16 = /* @__PURE__ */ new Date();
function newInterval2(floori, offseti, count4, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval2(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count4) {
    interval.count = function(start2, end) {
      t06.setTime(+start2), t16.setTime(+end);
      floori(t06), floori(t16);
      return Math.floor(count4(t06, t16));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/colors/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond2.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0))
    return null;
  if (!(k4 > 1))
    return millisecond2;
  return newInterval2(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default2 = millisecond2;
var milliseconds2 = millisecond2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth2 = durationDay2 * 30;
var durationYear2 = durationDay2 * 365;

// node_modules/@nivo/colors/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond2);
}, function(start2, end) {
  return (end - start2) / durationSecond2;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default2 = second2;
var seconds2 = second2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getMinutes();
});
var minute_default2 = minute2;
var minutes2 = minute2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2 - date.getMinutes() * durationMinute2);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getHours();
});
var hour_default2 = hour2;
var hours2 = hour2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/day.js
var day2 = newInterval2(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationDay2,
  (date) => date.getDate() - 1
);
var day_default2 = day2;
var days2 = day2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/week.js
function weekday2(i3) {
  return newInterval2(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i3) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default2 = month2;
var months2 = month2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year2.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval2(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default2 = utcMinute2;
var utcMinutes2 = utcMinute2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default2 = utcHour2;
var utcHours2 = utcHour2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay2;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i3) {
  return newInterval2(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i3) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default2 = utcMonth2;
var utcMonths2 = utcMonth2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear2.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval2(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/@nivo/colors/node_modules/d3-time/src/ticks.js
function ticker2(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default2, 1, durationSecond2],
    [second_default2, 5, 5 * durationSecond2],
    [second_default2, 15, 15 * durationSecond2],
    [second_default2, 30, 30 * durationSecond2],
    [minute4, 1, durationMinute2],
    [minute4, 5, 5 * durationMinute2],
    [minute4, 15, 15 * durationMinute2],
    [minute4, 30, 30 * durationMinute2],
    [hour4, 1, durationHour2],
    [hour4, 3, 3 * durationHour2],
    [hour4, 6, 6 * durationHour2],
    [hour4, 12, 12 * durationHour2],
    [day4, 1, durationDay2],
    [day4, 2, 2 * durationDay2],
    [week, 1, durationWeek2],
    [month4, 1, durationMonth2],
    [month4, 3, 3 * durationMonth2],
    [year4, 1, durationYear2]
  ];
  function ticks(start2, stop2, count4) {
    const reverse4 = stop2 < start2;
    if (reverse4)
      [start2, stop2] = [stop2, start2];
    const interval = count4 && typeof count4.range === "function" ? count4 : tickInterval(start2, stop2, count4);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse4 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count4) {
    const target = Math.abs(stop2 - start2) / count4;
    const i3 = bisector_default2(([, , step2]) => step2).right(tickIntervals, target);
    if (i3 === tickIntervals.length)
      return year4.every(tickStep2(start2 / durationYear2, stop2 / durationYear2, count4));
    if (i3 === 0)
      return millisecond_default2.every(Math.max(tickStep2(start2, stop2, count4), 1));
    const [t6, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
    return t6.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks2, utcTickInterval2] = ticker2(utcYear_default2, utcMonth_default2, utcSunday2, utcDay_default2, utcHour_default2, utcMinute_default2);
var [timeTicks2, timeTickInterval2] = ticker2(year_default2, month_default2, sunday2, day_default2, hour_default2, minute_default2);

// node_modules/@nivo/colors/node_modules/d3-time-format/src/locale.js
function localDate2(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate2(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate2(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale2(locale7) {
  var locale_dateTime = locale7.dateTime, locale_date = locale7.date, locale_time = locale7.time, locale_periods = locale7.periods, locale_weekdays = locale7.days, locale_shortWeekdays = locale7.shortDays, locale_months = locale7.months, locale_shortMonths = locale7.shortMonths;
  var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth2,
    "e": formatDayOfMonth2,
    "f": formatMicroseconds2,
    "g": formatYearISO2,
    "G": formatFullYearISO2,
    "H": formatHour242,
    "I": formatHour122,
    "j": formatDayOfYear2,
    "L": formatMilliseconds2,
    "m": formatMonthNumber2,
    "M": formatMinutes2,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatSeconds2,
    "u": formatWeekdayNumberMonday2,
    "U": formatWeekNumberSunday2,
    "V": formatWeekNumberISO2,
    "w": formatWeekdayNumberSunday2,
    "W": formatWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear2,
    "Z": formatZone2,
    "%": formatLiteralPercent2
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth2,
    "e": formatUTCDayOfMonth2,
    "f": formatUTCMicroseconds2,
    "g": formatUTCYearISO2,
    "G": formatUTCFullYearISO2,
    "H": formatUTCHour242,
    "I": formatUTCHour122,
    "j": formatUTCDayOfYear2,
    "L": formatUTCMilliseconds2,
    "m": formatUTCMonthNumber2,
    "M": formatUTCMinutes2,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatUTCSeconds2,
    "u": formatUTCWeekdayNumberMonday2,
    "U": formatUTCWeekNumberSunday2,
    "V": formatUTCWeekNumberISO2,
    "w": formatUTCWeekdayNumberSunday2,
    "W": formatUTCWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatUTCYear2,
    "Y": formatUTCFullYear2,
    "Z": formatUTCZone2,
    "%": formatLiteralPercent2
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth2,
    "e": parseDayOfMonth2,
    "f": parseMicroseconds2,
    "g": parseYear2,
    "G": parseFullYear2,
    "H": parseHour242,
    "I": parseHour242,
    "j": parseDayOfYear2,
    "L": parseMilliseconds2,
    "m": parseMonthNumber2,
    "M": parseMinutes2,
    "p": parsePeriod,
    "q": parseQuarter2,
    "Q": parseUnixTimestamp2,
    "s": parseUnixTimestampSeconds2,
    "S": parseSeconds2,
    "u": parseWeekdayNumberMonday2,
    "U": parseWeekNumberSunday2,
    "V": parseWeekNumberISO2,
    "w": parseWeekdayNumberSunday2,
    "W": parseWeekNumberMonday2,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear2,
    "Y": parseFullYear2,
    "Z": parseZone2,
    "%": parseLiteralPercent2
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i3 = -1, j3 = 0, n3 = specifier.length, c9, pad4, format4;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i3 < n3) {
        if (specifier.charCodeAt(i3) === 37) {
          string.push(specifier.slice(j3, i3));
          if ((pad4 = pads2[c9 = specifier.charAt(++i3)]) != null)
            c9 = specifier.charAt(++i3);
          else
            pad4 = c9 === "e" ? " " : "0";
          if (format4 = formats2[c9])
            c9 = format4(date, pad4);
          string.push(c9);
          j3 = i3 + 1;
        }
      }
      string.push(specifier.slice(j3, i3));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d3 = newDate2(1900, void 0, 1), i3 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i3 != string.length)
        return null;
      if ("Q" in d3)
        return new Date(d3.Q);
      if ("s" in d3)
        return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z && !("Z" in d3))
        d3.Z = 0;
      if ("p" in d3)
        d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0)
        d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53)
          return null;
        if (!("w" in d3))
          d3.w = 1;
        if ("Z" in d3) {
          week = utcDate2(newDate2(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default2.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate2(newDate2(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday2.ceil(week) : monday2(week);
          week = day_default2.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3))
          d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate2(newDate2(d3.y, 0, 1)).getUTCDay() : localDate2(newDate2(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate2(d3);
      }
      return localDate2(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j3) {
    var i3 = 0, n3 = specifier.length, m4 = string.length, c9, parse;
    while (i3 < n3) {
      if (j3 >= m4)
        return -1;
      c9 = specifier.charCodeAt(i3++);
      if (c9 === 37) {
        c9 = specifier.charAt(i3++);
        parse = parses[c9 in pads2 ? specifier.charAt(i3++) : c9];
        if (!parse || (j3 = parse(d3, string, j3)) < 0)
          return -1;
      } else if (c9 != string.charCodeAt(j3++)) {
        return -1;
      }
    }
    return j3;
  }
  function parsePeriod(d3, string, i3) {
    var n3 = periodRe.exec(string.slice(i3));
    return n3 ? (d3.p = periodLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i3) {
    var n3 = shortWeekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseWeekday(d3, string, i3) {
    var n3 = weekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = weekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortMonth(d3, string, i3) {
    var n3 = shortMonthRe.exec(string.slice(i3));
    return n3 ? (d3.m = shortMonthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseMonth(d3, string, i3) {
    var n3 = monthRe.exec(string.slice(i3));
    return n3 ? (d3.m = monthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i3) {
    return parseSpecifier(d3, locale_dateTime, string, i3);
  }
  function parseLocaleDate(d3, string, i3) {
    return parseSpecifier(d3, locale_date, string, i3);
  }
  function parseLocaleTime(d3, string, i3) {
    return parseSpecifier(d3, locale_time, string, i3);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f3 = newFormat(specifier += "", formats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    parse: function(specifier) {
      var p3 = newParse(specifier += "", false);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    },
    utcFormat: function(specifier) {
      var f3 = newFormat(specifier += "", utcFormats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    utcParse: function(specifier) {
      var p3 = newParse(specifier += "", true);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    }
  };
}
var pads2 = { "-": "", "_": " ", "0": "0" };
var numberRe2 = /^\s*\d+/;
var percentRe2 = /^%/;
var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote2(s4) {
  return s4.replace(requoteRe2, "\\$&");
}
function formatRe2(names) {
  return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
}
function formatLookup2(names) {
  return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
}
function parseWeekdayNumberSunday2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.w = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.u = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberSunday2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.U = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberISO2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.V = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberMonday2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.W = +n3[0], i3 + n3[0].length) : -1;
}
function parseFullYear2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 4));
  return n3 ? (d3.y = +n3[0], i3 + n3[0].length) : -1;
}
function parseYear2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i3 + n3[0].length) : -1;
}
function parseZone2(d3, string, i3) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i3 + n3[0].length) : -1;
}
function parseQuarter2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.q = n3[0] * 3 - 3, i3 + n3[0].length) : -1;
}
function parseMonthNumber2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.m = n3[0] - 1, i3 + n3[0].length) : -1;
}
function parseDayOfMonth2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseDayOfYear2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.m = 0, d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseHour242(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.H = +n3[0], i3 + n3[0].length) : -1;
}
function parseMinutes2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.M = +n3[0], i3 + n3[0].length) : -1;
}
function parseSeconds2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.S = +n3[0], i3 + n3[0].length) : -1;
}
function parseMilliseconds2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.L = +n3[0], i3 + n3[0].length) : -1;
}
function parseMicroseconds2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.L = Math.floor(n3[0] / 1e3), i3 + n3[0].length) : -1;
}
function parseLiteralPercent2(d3, string, i3) {
  var n3 = percentRe2.exec(string.slice(i3, i3 + 1));
  return n3 ? i3 + n3[0].length : -1;
}
function parseUnixTimestamp2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3));
  return n3 ? (d3.Q = +n3[0], i3 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds2(d3, string, i3) {
  var n3 = numberRe2.exec(string.slice(i3));
  return n3 ? (d3.s = +n3[0], i3 + n3[0].length) : -1;
}
function formatDayOfMonth2(d3, p3) {
  return pad2(d3.getDate(), p3, 2);
}
function formatHour242(d3, p3) {
  return pad2(d3.getHours(), p3, 2);
}
function formatHour122(d3, p3) {
  return pad2(d3.getHours() % 12 || 12, p3, 2);
}
function formatDayOfYear2(d3, p3) {
  return pad2(1 + day_default2.count(year_default2(d3), d3), p3, 3);
}
function formatMilliseconds2(d3, p3) {
  return pad2(d3.getMilliseconds(), p3, 3);
}
function formatMicroseconds2(d3, p3) {
  return formatMilliseconds2(d3, p3) + "000";
}
function formatMonthNumber2(d3, p3) {
  return pad2(d3.getMonth() + 1, p3, 2);
}
function formatMinutes2(d3, p3) {
  return pad2(d3.getMinutes(), p3, 2);
}
function formatSeconds2(d3, p3) {
  return pad2(d3.getSeconds(), p3, 2);
}
function formatWeekdayNumberMonday2(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday2(d3, p3) {
  return pad2(sunday2.count(year_default2(d3) - 1, d3), p3, 2);
}
function dISO2(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday2(d3) : thursday2.ceil(d3);
}
function formatWeekNumberISO2(d3, p3) {
  d3 = dISO2(d3);
  return pad2(thursday2.count(year_default2(d3), d3) + (year_default2(d3).getDay() === 4), p3, 2);
}
function formatWeekdayNumberSunday2(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday2(d3, p3) {
  return pad2(monday2.count(year_default2(d3) - 1, d3), p3, 2);
}
function formatYear2(d3, p3) {
  return pad2(d3.getFullYear() % 100, p3, 2);
}
function formatYearISO2(d3, p3) {
  d3 = dISO2(d3);
  return pad2(d3.getFullYear() % 100, p3, 2);
}
function formatFullYear2(d3, p3) {
  return pad2(d3.getFullYear() % 1e4, p3, 4);
}
function formatFullYearISO2(d3, p3) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday2(d3) : thursday2.ceil(d3);
  return pad2(d3.getFullYear() % 1e4, p3, 4);
}
function formatZone2(d3) {
  var z3 = d3.getTimezoneOffset();
  return (z3 > 0 ? "-" : (z3 *= -1, "+")) + pad2(z3 / 60 | 0, "0", 2) + pad2(z3 % 60, "0", 2);
}
function formatUTCDayOfMonth2(d3, p3) {
  return pad2(d3.getUTCDate(), p3, 2);
}
function formatUTCHour242(d3, p3) {
  return pad2(d3.getUTCHours(), p3, 2);
}
function formatUTCHour122(d3, p3) {
  return pad2(d3.getUTCHours() % 12 || 12, p3, 2);
}
function formatUTCDayOfYear2(d3, p3) {
  return pad2(1 + utcDay_default2.count(utcYear_default2(d3), d3), p3, 3);
}
function formatUTCMilliseconds2(d3, p3) {
  return pad2(d3.getUTCMilliseconds(), p3, 3);
}
function formatUTCMicroseconds2(d3, p3) {
  return formatUTCMilliseconds2(d3, p3) + "000";
}
function formatUTCMonthNumber2(d3, p3) {
  return pad2(d3.getUTCMonth() + 1, p3, 2);
}
function formatUTCMinutes2(d3, p3) {
  return pad2(d3.getUTCMinutes(), p3, 2);
}
function formatUTCSeconds2(d3, p3) {
  return pad2(d3.getUTCSeconds(), p3, 2);
}
function formatUTCWeekdayNumberMonday2(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday2(d3, p3) {
  return pad2(utcSunday2.count(utcYear_default2(d3) - 1, d3), p3, 2);
}
function UTCdISO2(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
}
function formatUTCWeekNumberISO2(d3, p3) {
  d3 = UTCdISO2(d3);
  return pad2(utcThursday2.count(utcYear_default2(d3), d3) + (utcYear_default2(d3).getUTCDay() === 4), p3, 2);
}
function formatUTCWeekdayNumberSunday2(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday2(d3, p3) {
  return pad2(utcMonday2.count(utcYear_default2(d3) - 1, d3), p3, 2);
}
function formatUTCYear2(d3, p3) {
  return pad2(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCYearISO2(d3, p3) {
  d3 = UTCdISO2(d3);
  return pad2(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCFullYear2(d3, p3) {
  return pad2(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCFullYearISO2(d3, p3) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
  return pad2(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCZone2() {
  return "+0000";
}
function formatLiteralPercent2() {
  return "%";
}
function formatUnixTimestamp2(d3) {
  return +d3;
}
function formatUnixTimestampSeconds2(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/colors/node_modules/d3-time-format/src/defaultLocale.js
var locale4;
var timeFormat2;
var timeParse2;
var utcFormat2;
var utcParse2;
defaultLocale4({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale4(definition) {
  locale4 = formatLocale2(definition);
  timeFormat2 = locale4.format;
  timeParse2 = locale4.parse;
  utcFormat2 = locale4.utcFormat;
  utcParse2 = locale4.utcParse;
  return locale4;
}

// node_modules/@nivo/colors/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier2 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative2(date) {
  return date.toISOString();
}
var formatIso2 = Date.prototype.toISOString ? formatIsoNative2 : utcFormat2(isoSpecifier2);

// node_modules/@nivo/colors/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative2(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso2 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative2 : utcParse2(isoSpecifier2);

// node_modules/@nivo/colors/dist/nivo-colors.es.js
function qe() {
  return qe = Object.assign ? Object.assign.bind() : function(e6) {
    for (var r3 = 1; r3 < arguments.length; r3++) {
      var n3 = arguments[r3];
      for (var t6 in n3)
        Object.prototype.hasOwnProperty.call(n3, t6) && (e6[t6] = n3[t6]);
    }
    return e6;
  }, qe.apply(this, arguments);
}
function Se(e6, r3) {
  (null == r3 || r3 > e6.length) && (r3 = e6.length);
  for (var n3 = 0, t6 = new Array(r3); n3 < r3; n3++)
    t6[n3] = e6[n3];
  return t6;
}
function Re(e6, r3) {
  var n3 = "undefined" != typeof Symbol && e6[Symbol.iterator] || e6["@@iterator"];
  if (n3)
    return (n3 = n3.call(e6)).next.bind(n3);
  if (Array.isArray(e6) || (n3 = function(e7, r4) {
    if (e7) {
      if ("string" == typeof e7)
        return Se(e7, r4);
      var n4 = Object.prototype.toString.call(e7).slice(8, -1);
      return "Object" === n4 && e7.constructor && (n4 = e7.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e7) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? Se(e7, r4) : void 0;
    }
  }(e6)) || r3 && e6 && "number" == typeof e6.length) {
    n3 && (e6 = n3);
    var t6 = 0;
    return function() {
      return t6 >= e6.length ? { done: true } : { done: false, value: e6[t6++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var Ce = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default };
var Ge = Object.keys(Ce);
var Ve = { brown_blueGreen: scheme, purpleRed_green: scheme2, pink_yellowGreen: scheme3, purple_orange: scheme4, red_blue: scheme5, red_grey: scheme6, red_yellow_blue: scheme7, red_yellow_green: scheme8, spectral: scheme9 };
var Te = Object.keys(Ve);
var Ue = { brown_blueGreen: BrBG_default, purpleRed_green: PRGn_default, pink_yellowGreen: PiYG_default, purple_orange: PuOr_default, red_blue: RdBu_default, red_grey: RdGy_default, red_yellow_blue: RdYlBu_default, red_yellow_green: RdYlGn_default, spectral: Spectral_default };
var De = { blues: scheme22, greens: scheme23, greys: scheme24, oranges: scheme27, purples: scheme25, reds: scheme26, blue_green: scheme10, blue_purple: scheme11, green_blue: scheme12, orange_red: scheme13, purple_blue_green: scheme14, purple_blue: scheme15, purple_red: scheme16, red_purple: scheme17, yellow_green_blue: scheme18, yellow_green: scheme19, yellow_orange_brown: scheme20, yellow_orange_red: scheme21 };
var Me = Object.keys(De);
var Pe = { blues: Blues_default, greens: Greens_default, greys: Greys_default, oranges: Oranges_default, purples: Purples_default, reds: Reds_default, turbo: turbo_default, viridis: viridis_default, inferno, magma, plasma, cividis: cividis_default, warm, cool, cubehelixDefault: cubehelix_default3, blue_green: BuGn_default, blue_purple: BuPu_default, green_blue: GnBu_default, orange_red: OrRd_default, purple_blue_green: PuBuGn_default, purple_blue: PuBu_default, purple_red: PuRd_default, red_purple: RdPu_default, yellow_green_blue: YlGnBu_default, yellow_green: YlGn_default, yellow_orange_brown: YlOrBr_default, yellow_orange_red: YlOrRd_default };
var $e2 = qe({}, Ce, Ve, De);
var Be = Object.keys($e2);
var Fe = function(e6) {
  return Ge.includes(e6);
};
var He = function(e6) {
  return Te.includes(e6);
};
var Je = function(e6) {
  return Me.includes(e6);
};
var Ke = { rainbow: rainbow_default, sinebow: sinebow_default };
var Le = qe({}, Ue, Pe, Ke);
var Ne = Object.keys(Le);
var Qe = function(e6, r3) {
  if ("function" == typeof e6)
    return e6;
  if ((0, import_lodash2.isPlainObject)(e6)) {
    if (function(e7) {
      return void 0 !== e7.theme;
    }(e6)) {
      if (void 0 === r3)
        throw new Error("Unable to use color from theme as no theme was provided");
      var n3 = (0, import_lodash2.get)(r3, e6.theme);
      if (void 0 === n3)
        throw new Error("Color from theme is undefined at path: '" + e6.theme + "'");
      return function() {
        return n3;
      };
    }
    if (function(e7) {
      return void 0 !== e7.from;
    }(e6)) {
      var t6 = function(r4) {
        return (0, import_lodash2.get)(r4, e6.from);
      };
      if (Array.isArray(e6.modifiers)) {
        for (var o3, i3 = [], u3 = function() {
          var e7 = o3.value, r4 = e7[0], n4 = e7[1];
          if ("brighter" === r4)
            i3.push(function(e8) {
              return e8.brighter(n4);
            });
          else if ("darker" === r4)
            i3.push(function(e8) {
              return e8.darker(n4);
            });
          else {
            if ("opacity" !== r4)
              throw new Error("Invalid color modifier: '" + r4 + "', must be one of: 'brighter', 'darker', 'opacity'");
            i3.push(function(e8) {
              return e8.opacity = n4, e8;
            });
          }
        }, a4 = Re(e6.modifiers); !(o3 = a4()).done; )
          u3();
        return 0 === i3.length ? t6 : function(e7) {
          return i3.reduce(function(e8, r4) {
            return r4(e8);
          }, rgb4(t6(e7))).toString();
        };
      }
      return t6;
    }
    throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
  }
  return function() {
    return e6;
  };
};
var We = function(e6, r3) {
  return (0, import_react17.useMemo)(function() {
    return Qe(e6, r3);
  }, [e6, r3]);
};
var Xe = import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.arrayOf(import_prop_types2.default.string), import_prop_types2.default.shape({ scheme: import_prop_types2.default.oneOf(Be).isRequired, size: import_prop_types2.default.number }), import_prop_types2.default.shape({ datum: import_prop_types2.default.string.isRequired }), import_prop_types2.default.string]);
var Ye = import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.func, import_prop_types2.default.shape({ theme: import_prop_types2.default.string.isRequired }), import_prop_types2.default.shape({ from: import_prop_types2.default.string.isRequired, modifiers: import_prop_types2.default.arrayOf(import_prop_types2.default.array) })]);
var fr = function(e6, r3) {
  if ("function" == typeof e6)
    return e6;
  var n3 = "function" == typeof r3 ? r3 : function(e7) {
    return (0, import_lodash2.get)(e7, r3);
  };
  if (Array.isArray(e6)) {
    var t6 = ordinal2(e6), o3 = function(e7) {
      return t6(n3(e7));
    };
    return o3.scale = t6, o3;
  }
  if ((0, import_lodash2.isPlainObject)(e6)) {
    if (function(e7) {
      return void 0 !== e7.datum;
    }(e6))
      return function(r4) {
        return (0, import_lodash2.get)(r4, e6.datum);
      };
    if (function(e7) {
      return void 0 !== e7.scheme;
    }(e6)) {
      if (Fe(e6.scheme)) {
        var i3 = ordinal2($e2[e6.scheme]), u3 = function(e7) {
          return i3(n3(e7));
        };
        return u3.scale = i3, u3;
      }
      if (He(e6.scheme)) {
        if (void 0 !== e6.size && (e6.size < 3 || e6.size > 11))
          throw new Error("Invalid size '" + e6.size + "' for diverging color scheme '" + e6.scheme + "', must be between 3~11");
        var a4 = ordinal2($e2[e6.scheme][e6.size || 11]), l3 = function(e7) {
          return a4(n3(e7));
        };
        return l3.scale = a4, l3;
      }
      if (Je(e6.scheme)) {
        if (void 0 !== e6.size && (e6.size < 3 || e6.size > 9))
          throw new Error("Invalid size '" + e6.size + "' for sequential color scheme '" + e6.scheme + "', must be between 3~9");
        var s4 = ordinal2($e2[e6.scheme][e6.size || 9]), c9 = function(e7) {
          return s4(n3(e7));
        };
        return c9.scale = s4, c9;
      }
    }
    throw new Error("Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property");
  }
  return function() {
    return e6;
  };
};
var pr = function(e6, r3) {
  return (0, import_react17.useMemo)(function() {
    return fr(e6, r3);
  }, [e6, r3]);
};

// node_modules/@nivo/legends/dist/nivo-legends.es.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@nivo/legends/node_modules/d3-array/src/ascending.js
function ascending_default4(a4, b3) {
  return a4 < b3 ? -1 : a4 > b3 ? 1 : a4 >= b3 ? 0 : NaN;
}

// node_modules/@nivo/legends/node_modules/d3-array/src/bisector.js
function bisector_default3(f3) {
  let delta = f3;
  let compare = f3;
  if (f3.length === 1) {
    delta = (d3, x5) => f3(d3) - x5;
    compare = ascendingComparator3(f3);
  }
  function left(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a4[mid], x5) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a4, x5, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a4.length;
    const i3 = left(a4, x5, lo, hi - 1);
    return i3 > lo && delta(a4[i3 - 1], x5) > -delta(a4[i3], x5) ? i3 - 1 : i3;
  }
  return { left, center, right };
}
function ascendingComparator3(f3) {
  return (d3, x5) => ascending_default4(f3(d3), x5);
}

// node_modules/@nivo/legends/node_modules/d3-array/src/number.js
function number_default6(x5) {
  return x5 === null ? NaN : +x5;
}

// node_modules/@nivo/legends/node_modules/d3-array/src/bisect.js
var ascendingBisect3 = bisector_default3(ascending_default4);
var bisectRight3 = ascendingBisect3.right;
var bisectLeft3 = ascendingBisect3.left;
var bisectCenter3 = bisector_default3(number_default6).center;

// node_modules/@nivo/legends/node_modules/d3-array/src/array.js
var array3 = Array.prototype;
var slice4 = array3.slice;
var map7 = array3.map;

// node_modules/@nivo/legends/node_modules/d3-array/src/ticks.js
var e103 = Math.sqrt(50);
var e53 = Math.sqrt(10);
var e23 = Math.sqrt(2);
function tickStep3(start2, stop2, count4) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count4), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e103)
    step1 *= 10;
  else if (error >= e53)
    step1 *= 5;
  else if (error >= e23)
    step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/legends/node_modules/d3-array/src/shuffle.js
var shuffle_default3 = shuffler3(Math.random);
function shuffler3(random) {
  return function shuffle(array4, i0 = 0, i1 = array4.length) {
    let m4 = i1 - (i0 = +i0);
    while (m4) {
      const i3 = random() * m4-- | 0, t6 = array4[m4 + i0];
      array4[m4 + i0] = array4[i3 + i0];
      array4[i3 + i0] = t6;
    }
    return array4;
  };
}

// node_modules/@nivo/legends/node_modules/d3-scale/src/ordinal.js
var implicit3 = Symbol("implicit");

// node_modules/@nivo/legends/node_modules/d3-color/src/define.js
function define_default5(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend5(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/@nivo/legends/node_modules/d3-color/src/color.js
function Color5() {
}
var darker5 = 0.7;
var brighter5 = 1 / darker5;
var reI5 = "\\s*([+-]?\\d+)\\s*";
var reN5 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP5 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex5 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger5 = new RegExp("^rgb\\(" + [reI5, reI5, reI5] + "\\)$");
var reRgbPercent5 = new RegExp("^rgb\\(" + [reP5, reP5, reP5] + "\\)$");
var reRgbaInteger5 = new RegExp("^rgba\\(" + [reI5, reI5, reI5, reN5] + "\\)$");
var reRgbaPercent5 = new RegExp("^rgba\\(" + [reP5, reP5, reP5, reN5] + "\\)$");
var reHslPercent5 = new RegExp("^hsl\\(" + [reN5, reP5, reP5] + "\\)$");
var reHslaPercent5 = new RegExp("^hsla\\(" + [reN5, reP5, reP5, reN5] + "\\)$");
var named5 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default5(Color5, color5, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex5,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex5,
  formatHsl: color_formatHsl5,
  formatRgb: color_formatRgb5,
  toString: color_formatRgb5
});
function color_formatHex5() {
  return this.rgb().formatHex();
}
function color_formatHsl5() {
  return hslConvert5(this).formatHsl();
}
function color_formatRgb5() {
  return this.rgb().formatRgb();
}
function color5(format4) {
  var m4, l3;
  format4 = (format4 + "").trim().toLowerCase();
  return (m4 = reHex5.exec(format4)) ? (l3 = m4[1].length, m4 = parseInt(m4[1], 16), l3 === 6 ? rgbn5(m4) : l3 === 3 ? new Rgb5(m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, (m4 & 15) << 4 | m4 & 15, 1) : l3 === 8 ? rgba6(m4 >> 24 & 255, m4 >> 16 & 255, m4 >> 8 & 255, (m4 & 255) / 255) : l3 === 4 ? rgba6(m4 >> 12 & 15 | m4 >> 8 & 240, m4 >> 8 & 15 | m4 >> 4 & 240, m4 >> 4 & 15 | m4 & 240, ((m4 & 15) << 4 | m4 & 15) / 255) : null) : (m4 = reRgbInteger5.exec(format4)) ? new Rgb5(m4[1], m4[2], m4[3], 1) : (m4 = reRgbPercent5.exec(format4)) ? new Rgb5(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, 1) : (m4 = reRgbaInteger5.exec(format4)) ? rgba6(m4[1], m4[2], m4[3], m4[4]) : (m4 = reRgbaPercent5.exec(format4)) ? rgba6(m4[1] * 255 / 100, m4[2] * 255 / 100, m4[3] * 255 / 100, m4[4]) : (m4 = reHslPercent5.exec(format4)) ? hsla6(m4[1], m4[2] / 100, m4[3] / 100, 1) : (m4 = reHslaPercent5.exec(format4)) ? hsla6(m4[1], m4[2] / 100, m4[3] / 100, m4[4]) : named5.hasOwnProperty(format4) ? rgbn5(named5[format4]) : format4 === "transparent" ? new Rgb5(NaN, NaN, NaN, 0) : null;
}
function rgbn5(n3) {
  return new Rgb5(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba6(r3, g3, b3, a4) {
  if (a4 <= 0)
    r3 = g3 = b3 = NaN;
  return new Rgb5(r3, g3, b3, a4);
}
function rgbConvert5(o3) {
  if (!(o3 instanceof Color5))
    o3 = color5(o3);
  if (!o3)
    return new Rgb5();
  o3 = o3.rgb();
  return new Rgb5(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb6(r3, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert5(r3) : new Rgb5(r3, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb5(r3, g3, b3, opacity) {
  this.r = +r3;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default5(Rgb5, rgb6, extend5(Color5, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter5 : Math.pow(brighter5, k4);
    return new Rgb5(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker5 : Math.pow(darker5, k4);
    return new Rgb5(this.r * k4, this.g * k4, this.b * k4, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex5,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex5,
  formatRgb: rgb_formatRgb5,
  toString: rgb_formatRgb5
}));
function rgb_formatHex5() {
  return "#" + hex9(this.r) + hex9(this.g) + hex9(this.b);
}
function rgb_formatRgb5() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex9(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla6(h2, s4, l3, a4) {
  if (a4 <= 0)
    h2 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s4 = NaN;
  else if (s4 <= 0)
    h2 = NaN;
  return new Hsl5(h2, s4, l3, a4);
}
function hslConvert5(o3) {
  if (o3 instanceof Hsl5)
    return new Hsl5(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color5))
    o3 = color5(o3);
  if (!o3)
    return new Hsl5();
  if (o3 instanceof Hsl5)
    return o3;
  o3 = o3.rgb();
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, min5 = Math.min(r3, g3, b3), max5 = Math.max(r3, g3, b3), h2 = NaN, s4 = max5 - min5, l3 = (max5 + min5) / 2;
  if (s4) {
    if (r3 === max5)
      h2 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max5)
      h2 = (b3 - r3) / s4 + 2;
    else
      h2 = (r3 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h2 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl5(h2, s4, l3, o3.opacity);
}
function hsl9(h2, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert5(h2) : new Hsl5(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl5(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default5(Hsl5, hsl9, extend5(Color5, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter5 : Math.pow(brighter5, k4);
    return new Hsl5(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker5 : Math.pow(darker5, k4);
    return new Hsl5(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb5(
      hsl2rgb5(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb5(h2, m1, m22),
      hsl2rgb5(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb5(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/@nivo/legends/node_modules/d3-color/src/math.js
var radians5 = Math.PI / 180;
var degrees8 = 180 / Math.PI;

// node_modules/@nivo/legends/node_modules/d3-color/src/lab.js
var K5 = 18;
var Xn5 = 0.96422;
var Yn5 = 1;
var Zn5 = 0.82521;
var t07 = 4 / 29;
var t17 = 6 / 29;
var t25 = 3 * t17 * t17;
var t35 = t17 * t17 * t17;
function labConvert5(o3) {
  if (o3 instanceof Lab5)
    return new Lab5(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl5)
    return hcl2lab5(o3);
  if (!(o3 instanceof Rgb5))
    o3 = rgbConvert5(o3);
  var r3 = rgb2lrgb5(o3.r), g3 = rgb2lrgb5(o3.g), b3 = rgb2lrgb5(o3.b), y4 = xyz2lab5((0.2225045 * r3 + 0.7168786 * g3 + 0.0606169 * b3) / Yn5), x5, z3;
  if (r3 === g3 && g3 === b3)
    x5 = z3 = y4;
  else {
    x5 = xyz2lab5((0.4360747 * r3 + 0.3850649 * g3 + 0.1430804 * b3) / Xn5);
    z3 = xyz2lab5((0.0139322 * r3 + 0.0971045 * g3 + 0.7141733 * b3) / Zn5);
  }
  return new Lab5(116 * y4 - 16, 500 * (x5 - y4), 200 * (y4 - z3), o3.opacity);
}
function lab8(l3, a4, b3, opacity) {
  return arguments.length === 1 ? labConvert5(l3) : new Lab5(l3, a4, b3, opacity == null ? 1 : opacity);
}
function Lab5(l3, a4, b3, opacity) {
  this.l = +l3;
  this.a = +a4;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default5(Lab5, lab8, extend5(Color5, {
  brighter: function(k4) {
    return new Lab5(this.l + K5 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  darker: function(k4) {
    return new Lab5(this.l - K5 * (k4 == null ? 1 : k4), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y4 : y4 + this.a / 500, z3 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x5 = Xn5 * lab2xyz5(x5);
    y4 = Yn5 * lab2xyz5(y4);
    z3 = Zn5 * lab2xyz5(z3);
    return new Rgb5(
      lrgb2rgb5(3.1338561 * x5 - 1.6168667 * y4 - 0.4906146 * z3),
      lrgb2rgb5(-0.9787684 * x5 + 1.9161415 * y4 + 0.033454 * z3),
      lrgb2rgb5(0.0719453 * x5 - 0.2289914 * y4 + 1.4052427 * z3),
      this.opacity
    );
  }
}));
function xyz2lab5(t6) {
  return t6 > t35 ? Math.pow(t6, 1 / 3) : t6 / t25 + t07;
}
function lab2xyz5(t6) {
  return t6 > t17 ? t6 * t6 * t6 : t25 * (t6 - t07);
}
function lrgb2rgb5(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb5(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert5(o3) {
  if (o3 instanceof Hcl5)
    return new Hcl5(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab5))
    o3 = labConvert5(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl5(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees8;
  return new Hcl5(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl8(h2, c9, l3, opacity) {
  return arguments.length === 1 ? hclConvert5(h2) : new Hcl5(h2, c9, l3, opacity == null ? 1 : opacity);
}
function Hcl5(h2, c9, l3, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab5(o3) {
  if (isNaN(o3.h))
    return new Lab5(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians5;
  return new Lab5(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default5(Hcl5, hcl8, extend5(Color5, {
  brighter: function(k4) {
    return new Hcl5(this.h, this.c, this.l + K5 * (k4 == null ? 1 : k4), this.opacity);
  },
  darker: function(k4) {
    return new Hcl5(this.h, this.c, this.l - K5 * (k4 == null ? 1 : k4), this.opacity);
  },
  rgb: function() {
    return hcl2lab5(this).rgb();
  }
}));

// node_modules/@nivo/legends/node_modules/d3-color/src/cubehelix.js
var A6 = -0.14861;
var B5 = 1.78277;
var C7 = -0.29227;
var D5 = -0.90649;
var E6 = 1.97294;
var ED5 = E6 * D5;
var EB5 = E6 * B5;
var BC_DA5 = B5 * C7 - D5 * A6;
function cubehelixConvert5(o3) {
  if (o3 instanceof Cubehelix5)
    return new Cubehelix5(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb5))
    o3 = rgbConvert5(o3);
  var r3 = o3.r / 255, g3 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA5 * b3 + ED5 * r3 - EB5 * g3) / (BC_DA5 + ED5 - EB5), bl = b3 - l3, k4 = (E6 * (g3 - l3) - C7 * bl) / D5, s4 = Math.sqrt(k4 * k4 + bl * bl) / (E6 * l3 * (1 - l3)), h2 = s4 ? Math.atan2(k4, bl) * degrees8 - 120 : NaN;
  return new Cubehelix5(h2 < 0 ? h2 + 360 : h2, s4, l3, o3.opacity);
}
function cubehelix8(h2, s4, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert5(h2) : new Cubehelix5(h2, s4, l3, opacity == null ? 1 : opacity);
}
function Cubehelix5(h2, s4, l3, opacity) {
  this.h = +h2;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default5(Cubehelix5, cubehelix8, extend5(Color5, {
  brighter: function(k4) {
    k4 = k4 == null ? brighter5 : Math.pow(brighter5, k4);
    return new Cubehelix5(this.h, this.s, this.l * k4, this.opacity);
  },
  darker: function(k4) {
    k4 = k4 == null ? darker5 : Math.pow(darker5, k4);
    return new Cubehelix5(this.h, this.s, this.l * k4, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians5, l3 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh5 = Math.cos(h2), sinh5 = Math.sin(h2);
    return new Rgb5(
      255 * (l3 + a4 * (A6 * cosh5 + B5 * sinh5)),
      255 * (l3 + a4 * (C7 * cosh5 + D5 * sinh5)),
      255 * (l3 + a4 * (E6 * cosh5)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/basis.js
function basis4(t19, v0, v1, v22, v32) {
  var t26 = t19 * t19, t36 = t26 * t19;
  return ((1 - 3 * t19 + 3 * t26 - t36) * v0 + (4 - 6 * t26 + 3 * t36) * v1 + (1 + 3 * t19 + 3 * t26 - 3 * t36) * v22 + t36 * v32) / 6;
}
function basis_default5(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v32 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis4((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default5(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v32 = values[(i3 + 2) % n3];
    return basis4((t6 - i3 / n3) * n3, v0, v1, v22, v32);
  };
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/constant.js
var constant_default8 = (x5) => () => x5;

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/color.js
function linear6(a4, d3) {
  return function(t6) {
    return a4 + t6 * d3;
  };
}
function exponential4(a4, b3, y4) {
  return a4 = Math.pow(a4, y4), b3 = Math.pow(b3, y4) - a4, y4 = 1 / y4, function(t6) {
    return Math.pow(a4 + t6 * b3, y4);
  };
}
function hue4(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear6(a4, d3 > 180 || d3 < -180 ? d3 - 360 * Math.round(d3 / 360) : d3) : constant_default8(isNaN(a4) ? b3 : a4);
}
function gamma4(y4) {
  return (y4 = +y4) === 1 ? nogamma4 : function(a4, b3) {
    return b3 - a4 ? exponential4(a4, b3, y4) : constant_default8(isNaN(a4) ? b3 : a4);
  };
}
function nogamma4(a4, b3) {
  var d3 = b3 - a4;
  return d3 ? linear6(a4, d3) : constant_default8(isNaN(a4) ? b3 : a4);
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/rgb.js
var rgb_default4 = function rgbGamma4(y4) {
  var color6 = gamma4(y4);
  function rgb7(start2, end) {
    var r3 = color6((start2 = rgb6(start2)).r, (end = rgb6(end)).r), g3 = color6(start2.g, end.g), b3 = color6(start2.b, end.b), opacity = nogamma4(start2.opacity, end.opacity);
    return function(t6) {
      start2.r = r3(t6);
      start2.g = g3(t6);
      start2.b = b3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  }
  rgb7.gamma = rgbGamma4;
  return rgb7;
}(1);
function rgbSpline4(spline) {
  return function(colors3) {
    var n3 = colors3.length, r3 = new Array(n3), g3 = new Array(n3), b3 = new Array(n3), i3, color6;
    for (i3 = 0; i3 < n3; ++i3) {
      color6 = rgb6(colors3[i3]);
      r3[i3] = color6.r || 0;
      g3[i3] = color6.g || 0;
      b3[i3] = color6.b || 0;
    }
    r3 = spline(r3);
    g3 = spline(g3);
    b3 = spline(b3);
    color6.opacity = 1;
    return function(t6) {
      color6.r = r3(t6);
      color6.g = g3(t6);
      color6.b = b3(t6);
      return color6 + "";
    };
  };
}
var rgbBasis4 = rgbSpline4(basis_default5);
var rgbBasisClosed4 = rgbSpline4(basisClosed_default5);

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/number.js
function number_default7(a4, b3) {
  return a4 = +a4, b3 = +b3, function(t6) {
    return a4 * (1 - t6) + b3 * t6;
  };
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/string.js
var reA4 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB4 = new RegExp(reA4.source, "g");

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/transform/decompose.js
var degrees9 = 180 / Math.PI;
var identity8 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default4(a4, b3, c9, d3, e6, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b3 * b3))
    a4 /= scaleX, b3 /= scaleX;
  if (skewX = a4 * c9 + b3 * d3)
    c9 -= a4 * skewX, d3 -= b3 * skewX;
  if (scaleY = Math.sqrt(c9 * c9 + d3 * d3))
    c9 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a4 * d3 < b3 * c9)
    a4 = -a4, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e6,
    translateY: f3,
    rotate: Math.atan2(b3, a4) * degrees9,
    skewX: Math.atan(skewX) * degrees9,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/transform/parse.js
var svgNode4;
function parseCss4(value) {
  const m4 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m4.isIdentity ? identity8 : decompose_default4(m4.a, m4.b, m4.c, m4.d, m4.e, m4.f);
}
function parseSvg4(value) {
  if (value == null)
    return identity8;
  if (!svgNode4)
    svgNode4 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode4.setAttribute("transform", value);
  if (!(value = svgNode4.transform.baseVal.consolidate()))
    return identity8;
  value = value.matrix;
  return decompose_default4(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform4(parse, pxComma, pxParen, degParen) {
  function pop(s4) {
    return s4.length ? s4.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default7(xa, xb) }, { i: i3 - 2, x: number_default7(ya, yb) });
    } else if (xb || yb) {
      s4.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a4, b3, s4, q) {
    if (a4 !== b3) {
      if (a4 - b3 > 180)
        b3 += 360;
      else if (b3 - a4 > 180)
        a4 += 360;
      q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default7(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a4, b3, s4, q) {
    if (a4 !== b3) {
      q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default7(a4, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default7(xa, xb) }, { i: i3 - 2, x: number_default7(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b3) {
    var s4 = [], q = [];
    a4 = parse(a4), b3 = parse(b3);
    translate(a4.translateX, a4.translateY, b3.translateX, b3.translateY, s4, q);
    rotate(a4.rotate, b3.rotate, s4, q);
    skewX(a4.skewX, b3.skewX, s4, q);
    scale(a4.scaleX, a4.scaleY, b3.scaleX, b3.scaleY, s4, q);
    a4 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s4[(o3 = q[i3]).i] = o3.x(t6);
      return s4.join("");
    };
  };
}
var interpolateTransformCss4 = interpolateTransform4(parseCss4, "px, ", "px)", "deg)");
var interpolateTransformSvg4 = interpolateTransform4(parseSvg4, ", ", ")", ")");

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/zoom.js
var epsilon24 = 1e-12;
function cosh4(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh4(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh4(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var zoom_default4 = function zoomRho4(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i3, S2;
    if (d22 < epsilon24) {
      S2 = Math.log(w1 / w0) / rho;
      i3 = function(t6) {
        return [
          ux0 + t6 * dx,
          uy0 + t6 * dy,
          w0 * Math.exp(rho * t6 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i3 = function(t6) {
        var s4 = t6 * S2, coshr0 = cosh4(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh4(rho * s4 + r0) - sinh4(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh4(rho * s4 + r0)
        ];
      };
    }
    i3.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho4(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/hsl.js
function hsl10(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hsl9(start2)).h, (end = hsl9(end)).h), s4 = nogamma4(start2.s, end.s), l3 = nogamma4(start2.l, end.l), opacity = nogamma4(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.s = s4(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hsl_default4 = hsl10(hue4);
var hslLong4 = hsl10(nogamma4);

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/hcl.js
function hcl9(hue5) {
  return function(start2, end) {
    var h2 = hue5((start2 = hcl8(start2)).h, (end = hcl8(end)).h), c9 = nogamma4(start2.c, end.c), l3 = nogamma4(start2.l, end.l), opacity = nogamma4(start2.opacity, end.opacity);
    return function(t6) {
      start2.h = h2(t6);
      start2.c = c9(t6);
      start2.l = l3(t6);
      start2.opacity = opacity(t6);
      return start2 + "";
    };
  };
}
var hcl_default4 = hcl9(hue4);
var hclLong4 = hcl9(nogamma4);

// node_modules/@nivo/legends/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix9(hue5) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix10(start2, end) {
      var h2 = hue5((start2 = cubehelix8(start2)).h, (end = cubehelix8(end)).h), s4 = nogamma4(start2.s, end.s), l3 = nogamma4(start2.l, end.l), opacity = nogamma4(start2.opacity, end.opacity);
      return function(t6) {
        start2.h = h2(t6);
        start2.s = s4(t6);
        start2.l = l3(Math.pow(t6, y4));
        start2.opacity = opacity(t6);
        return start2 + "";
      };
    }
    cubehelix10.gamma = cubehelixGamma;
    return cubehelix10;
  }(1);
}
var cubehelix_default5 = cubehelix9(hue4);
var cubehelixLong4 = cubehelix9(nogamma4);

// node_modules/@nivo/legends/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default3(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts3(x5, p3) {
  if ((i3 = (x5 = p3 ? x5.toExponential(p3 - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x5.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i3 + 1)
  ];
}

// node_modules/@nivo/legends/node_modules/d3-format/src/exponent.js
function exponent_default3(x5) {
  return x5 = formatDecimalParts3(Math.abs(x5)), x5 ? x5[1] : NaN;
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatGroup.js
function formatGroup_default3(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t6 = [], j3 = 0, g3 = grouping[0], length = 0;
    while (i3 > 0 && g3 > 0) {
      if (length + g3 + 1 > width)
        g3 = Math.max(1, width - length);
      t6.push(value.substring(i3 -= g3, i3 + g3));
      if ((length += g3 + 1) > width)
        break;
      g3 = grouping[j3 = (j3 + 1) % grouping.length];
    }
    return t6.reverse().join(thousands);
  };
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default3(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i3) {
      return numerals[+i3];
    });
  };
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatSpecifier.js
var re3 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier3(specifier) {
  if (!(match = re3.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier3({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier3.prototype = FormatSpecifier3.prototype;
function FormatSpecifier3(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier3.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/legends/node_modules/d3-format/src/formatTrim.js
function formatTrim_default3(s4) {
  out:
    for (var n3 = s4.length, i3 = 1, i0 = -1, i1; i3 < n3; ++i3) {
      switch (s4[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        default:
          if (!+s4[i3])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent3;
function formatPrefixAuto_default3(x5, p3) {
  var d3 = formatDecimalParts3(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1], i3 = exponent - (prefixExponent3 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i3 === n3 ? coefficient : i3 > n3 ? coefficient + new Array(i3 - n3 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts3(x5, Math.max(0, p3 + i3 - 1))[0];
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatRounded.js
function formatRounded_default3(x5, p3) {
  var d3 = formatDecimalParts3(x5, p3);
  if (!d3)
    return x5 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/legends/node_modules/d3-format/src/formatTypes.js
var formatTypes_default3 = {
  "%": (x5, p3) => (x5 * 100).toFixed(p3),
  "b": (x5) => Math.round(x5).toString(2),
  "c": (x5) => x5 + "",
  "d": formatDecimal_default3,
  "e": (x5, p3) => x5.toExponential(p3),
  "f": (x5, p3) => x5.toFixed(p3),
  "g": (x5, p3) => x5.toPrecision(p3),
  "o": (x5) => Math.round(x5).toString(8),
  "p": (x5, p3) => formatRounded_default3(x5 * 100, p3),
  "r": formatRounded_default3,
  "s": formatPrefixAuto_default3,
  "X": (x5) => Math.round(x5).toString(16).toUpperCase(),
  "x": (x5) => Math.round(x5).toString(16)
};

// node_modules/@nivo/legends/node_modules/d3-format/src/identity.js
function identity_default7(x5) {
  return x5;
}

// node_modules/@nivo/legends/node_modules/d3-format/src/locale.js
var map9 = Array.prototype.map;
var prefixes4 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default3(locale7) {
  var group4 = locale7.grouping === void 0 || locale7.thousands === void 0 ? identity_default7 : formatGroup_default3(map9.call(locale7.grouping, Number), locale7.thousands + ""), currencyPrefix = locale7.currency === void 0 ? "" : locale7.currency[0] + "", currencySuffix = locale7.currency === void 0 ? "" : locale7.currency[1] + "", decimal = locale7.decimal === void 0 ? "." : locale7.decimal + "", numerals = locale7.numerals === void 0 ? identity_default7 : formatNumerals_default3(map9.call(locale7.numerals, String)), percent = locale7.percent === void 0 ? "%" : locale7.percent + "", minus = locale7.minus === void 0 ? "−" : locale7.minus + "", nan = locale7.nan === void 0 ? "NaN" : locale7.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier3(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default3[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default3[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format4(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i3, n3, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default3(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes4[8 + prefixExponent3 / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n3 = value.length;
          while (++i3 < n3) {
            if (c9 = value.charCodeAt(i3), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group4(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group4(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format4.toString = function() {
      return specifier + "";
    };
    return format4;
  }
  function formatPrefix4(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier3(specifier), specifier.type = "f", specifier)), e6 = Math.max(-8, Math.min(8, Math.floor(exponent_default3(value) / 3))) * 3, k4 = Math.pow(10, -e6), prefix2 = prefixes4[8 + e6 / 3];
    return function(value2) {
      return f3(k4 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix4
  };
}

// node_modules/@nivo/legends/node_modules/d3-format/src/defaultLocale.js
var locale5;
var format3;
var formatPrefix3;
defaultLocale5({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale5(definition) {
  locale5 = locale_default3(definition);
  format3 = locale5.format;
  formatPrefix3 = locale5.formatPrefix;
  return locale5;
}

// node_modules/@nivo/legends/node_modules/d3-time/src/interval.js
var t08 = /* @__PURE__ */ new Date();
var t18 = /* @__PURE__ */ new Date();
function newInterval3(floori, offseti, count4, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval3(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count4) {
    interval.count = function(start2, end) {
      t08.setTime(+start2), t18.setTime(+end);
      floori(t08), floori(t18);
      return Math.floor(count4(t08, t18));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/legends/node_modules/d3-time/src/millisecond.js
var millisecond3 = newInterval3(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond3.every = function(k4) {
  k4 = Math.floor(k4);
  if (!isFinite(k4) || !(k4 > 0))
    return null;
  if (!(k4 > 1))
    return millisecond3;
  return newInterval3(function(date) {
    date.setTime(Math.floor(date / k4) * k4);
  }, function(date, step) {
    date.setTime(+date + step * k4);
  }, function(start2, end) {
    return (end - start2) / k4;
  });
};
var millisecond_default3 = millisecond3;
var milliseconds3 = millisecond3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/duration.js
var durationSecond3 = 1e3;
var durationMinute3 = durationSecond3 * 60;
var durationHour3 = durationMinute3 * 60;
var durationDay3 = durationHour3 * 24;
var durationWeek3 = durationDay3 * 7;
var durationMonth3 = durationDay3 * 30;
var durationYear3 = durationDay3 * 365;

// node_modules/@nivo/legends/node_modules/d3-time/src/second.js
var second3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond3);
}, function(start2, end) {
  return (end - start2) / durationSecond3;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default3 = second3;
var seconds3 = second3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/minute.js
var minute3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond3);
}, function(date, step) {
  date.setTime(+date + step * durationMinute3);
}, function(start2, end) {
  return (end - start2) / durationMinute3;
}, function(date) {
  return date.getMinutes();
});
var minute_default3 = minute3;
var minutes3 = minute3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/hour.js
var hour3 = newInterval3(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond3 - date.getMinutes() * durationMinute3);
}, function(date, step) {
  date.setTime(+date + step * durationHour3);
}, function(start2, end) {
  return (end - start2) / durationHour3;
}, function(date) {
  return date.getHours();
});
var hour_default3 = hour3;
var hours3 = hour3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/day.js
var day3 = newInterval3(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute3) / durationDay3,
  (date) => date.getDate() - 1
);
var day_default3 = day3;
var days3 = day3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/week.js
function weekday3(i3) {
  return newInterval3(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i3) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute3) / durationWeek3;
  });
}
var sunday3 = weekday3(0);
var monday3 = weekday3(1);
var tuesday3 = weekday3(2);
var wednesday3 = weekday3(3);
var thursday3 = weekday3(4);
var friday3 = weekday3(5);
var saturday3 = weekday3(6);
var sundays3 = sunday3.range;
var mondays3 = monday3.range;
var tuesdays3 = tuesday3.range;
var wednesdays3 = wednesday3.range;
var thursdays3 = thursday3.range;
var fridays3 = friday3.range;
var saturdays3 = saturday3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/month.js
var month3 = newInterval3(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default3 = month3;
var months3 = month3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/year.js
var year3 = newInterval3(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year3.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval3(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k4) * k4);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k4);
  });
};
var year_default3 = year3;
var years3 = year3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcMinute.js
var utcMinute3 = newInterval3(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute3);
}, function(start2, end) {
  return (end - start2) / durationMinute3;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default3 = utcMinute3;
var utcMinutes3 = utcMinute3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcHour.js
var utcHour3 = newInterval3(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour3);
}, function(start2, end) {
  return (end - start2) / durationHour3;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default3 = utcHour3;
var utcHours3 = utcHour3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcDay.js
var utcDay3 = newInterval3(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay3;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default3 = utcDay3;
var utcDays3 = utcDay3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcWeek.js
function utcWeekday3(i3) {
  return newInterval3(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i3) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek3;
  });
}
var utcSunday3 = utcWeekday3(0);
var utcMonday3 = utcWeekday3(1);
var utcTuesday3 = utcWeekday3(2);
var utcWednesday3 = utcWeekday3(3);
var utcThursday3 = utcWeekday3(4);
var utcFriday3 = utcWeekday3(5);
var utcSaturday3 = utcWeekday3(6);
var utcSundays3 = utcSunday3.range;
var utcMondays3 = utcMonday3.range;
var utcTuesdays3 = utcTuesday3.range;
var utcWednesdays3 = utcWednesday3.range;
var utcThursdays3 = utcThursday3.range;
var utcFridays3 = utcFriday3.range;
var utcSaturdays3 = utcSaturday3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcMonth.js
var utcMonth3 = newInterval3(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default3 = utcMonth3;
var utcMonths3 = utcMonth3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/utcYear.js
var utcYear3 = newInterval3(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear3.every = function(k4) {
  return !isFinite(k4 = Math.floor(k4)) || !(k4 > 0) ? null : newInterval3(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k4) * k4);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k4);
  });
};
var utcYear_default3 = utcYear3;
var utcYears3 = utcYear3.range;

// node_modules/@nivo/legends/node_modules/d3-time/src/ticks.js
function ticker3(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default3, 1, durationSecond3],
    [second_default3, 5, 5 * durationSecond3],
    [second_default3, 15, 15 * durationSecond3],
    [second_default3, 30, 30 * durationSecond3],
    [minute4, 1, durationMinute3],
    [minute4, 5, 5 * durationMinute3],
    [minute4, 15, 15 * durationMinute3],
    [minute4, 30, 30 * durationMinute3],
    [hour4, 1, durationHour3],
    [hour4, 3, 3 * durationHour3],
    [hour4, 6, 6 * durationHour3],
    [hour4, 12, 12 * durationHour3],
    [day4, 1, durationDay3],
    [day4, 2, 2 * durationDay3],
    [week, 1, durationWeek3],
    [month4, 1, durationMonth3],
    [month4, 3, 3 * durationMonth3],
    [year4, 1, durationYear3]
  ];
  function ticks(start2, stop2, count4) {
    const reverse4 = stop2 < start2;
    if (reverse4)
      [start2, stop2] = [stop2, start2];
    const interval = count4 && typeof count4.range === "function" ? count4 : tickInterval(start2, stop2, count4);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse4 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count4) {
    const target = Math.abs(stop2 - start2) / count4;
    const i3 = bisector_default3(([, , step2]) => step2).right(tickIntervals, target);
    if (i3 === tickIntervals.length)
      return year4.every(tickStep3(start2 / durationYear3, stop2 / durationYear3, count4));
    if (i3 === 0)
      return millisecond_default3.every(Math.max(tickStep3(start2, stop2, count4), 1));
    const [t6, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
    return t6.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks3, utcTickInterval3] = ticker3(utcYear_default3, utcMonth_default3, utcSunday3, utcDay_default3, utcHour_default3, utcMinute_default3);
var [timeTicks3, timeTickInterval3] = ticker3(year_default3, month_default3, sunday3, day_default3, hour_default3, minute_default3);

// node_modules/@nivo/legends/node_modules/d3-time-format/src/locale.js
function localDate3(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date.setFullYear(d3.y);
    return date;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate3(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date.setUTCFullYear(d3.y);
    return date;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate3(y4, m4, d3) {
  return { y: y4, m: m4, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale3(locale7) {
  var locale_dateTime = locale7.dateTime, locale_date = locale7.date, locale_time = locale7.time, locale_periods = locale7.periods, locale_weekdays = locale7.days, locale_shortWeekdays = locale7.shortDays, locale_months = locale7.months, locale_shortMonths = locale7.shortMonths;
  var periodRe = formatRe3(locale_periods), periodLookup = formatLookup3(locale_periods), weekdayRe = formatRe3(locale_weekdays), weekdayLookup = formatLookup3(locale_weekdays), shortWeekdayRe = formatRe3(locale_shortWeekdays), shortWeekdayLookup = formatLookup3(locale_shortWeekdays), monthRe = formatRe3(locale_months), monthLookup = formatLookup3(locale_months), shortMonthRe = formatRe3(locale_shortMonths), shortMonthLookup = formatLookup3(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth3,
    "e": formatDayOfMonth3,
    "f": formatMicroseconds3,
    "g": formatYearISO3,
    "G": formatFullYearISO3,
    "H": formatHour243,
    "I": formatHour123,
    "j": formatDayOfYear3,
    "L": formatMilliseconds3,
    "m": formatMonthNumber3,
    "M": formatMinutes3,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp3,
    "s": formatUnixTimestampSeconds3,
    "S": formatSeconds3,
    "u": formatWeekdayNumberMonday3,
    "U": formatWeekNumberSunday3,
    "V": formatWeekNumberISO3,
    "w": formatWeekdayNumberSunday3,
    "W": formatWeekNumberMonday3,
    "x": null,
    "X": null,
    "y": formatYear3,
    "Y": formatFullYear3,
    "Z": formatZone3,
    "%": formatLiteralPercent3
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth3,
    "e": formatUTCDayOfMonth3,
    "f": formatUTCMicroseconds3,
    "g": formatUTCYearISO3,
    "G": formatUTCFullYearISO3,
    "H": formatUTCHour243,
    "I": formatUTCHour123,
    "j": formatUTCDayOfYear3,
    "L": formatUTCMilliseconds3,
    "m": formatUTCMonthNumber3,
    "M": formatUTCMinutes3,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp3,
    "s": formatUnixTimestampSeconds3,
    "S": formatUTCSeconds3,
    "u": formatUTCWeekdayNumberMonday3,
    "U": formatUTCWeekNumberSunday3,
    "V": formatUTCWeekNumberISO3,
    "w": formatUTCWeekdayNumberSunday3,
    "W": formatUTCWeekNumberMonday3,
    "x": null,
    "X": null,
    "y": formatUTCYear3,
    "Y": formatUTCFullYear3,
    "Z": formatUTCZone3,
    "%": formatLiteralPercent3
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth3,
    "e": parseDayOfMonth3,
    "f": parseMicroseconds3,
    "g": parseYear3,
    "G": parseFullYear3,
    "H": parseHour243,
    "I": parseHour243,
    "j": parseDayOfYear3,
    "L": parseMilliseconds3,
    "m": parseMonthNumber3,
    "M": parseMinutes3,
    "p": parsePeriod,
    "q": parseQuarter3,
    "Q": parseUnixTimestamp3,
    "s": parseUnixTimestampSeconds3,
    "S": parseSeconds3,
    "u": parseWeekdayNumberMonday3,
    "U": parseWeekNumberSunday3,
    "V": parseWeekNumberISO3,
    "w": parseWeekdayNumberSunday3,
    "W": parseWeekNumberMonday3,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear3,
    "Y": parseFullYear3,
    "Z": parseZone3,
    "%": parseLiteralPercent3
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i3 = -1, j3 = 0, n3 = specifier.length, c9, pad4, format4;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i3 < n3) {
        if (specifier.charCodeAt(i3) === 37) {
          string.push(specifier.slice(j3, i3));
          if ((pad4 = pads3[c9 = specifier.charAt(++i3)]) != null)
            c9 = specifier.charAt(++i3);
          else
            pad4 = c9 === "e" ? " " : "0";
          if (format4 = formats2[c9])
            c9 = format4(date, pad4);
          string.push(c9);
          j3 = i3 + 1;
        }
      }
      string.push(specifier.slice(j3, i3));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d3 = newDate3(1900, void 0, 1), i3 = parseSpecifier(d3, specifier, string += "", 0), week, day4;
      if (i3 != string.length)
        return null;
      if ("Q" in d3)
        return new Date(d3.Q);
      if ("s" in d3)
        return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z && !("Z" in d3))
        d3.Z = 0;
      if ("p" in d3)
        d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0)
        d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53)
          return null;
        if (!("w" in d3))
          d3.w = 1;
        if ("Z" in d3) {
          week = utcDate3(newDate3(d3.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday3.ceil(week) : utcMonday3(week);
          week = utcDay_default3.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate3(newDate3(d3.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday3.ceil(week) : monday3(week);
          week = day_default3.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3))
          d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day4 = "Z" in d3 ? utcDate3(newDate3(d3.y, 0, 1)).getUTCDay() : localDate3(newDate3(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day4 + 5) % 7 : d3.w + d3.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate3(d3);
      }
      return localDate3(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j3) {
    var i3 = 0, n3 = specifier.length, m4 = string.length, c9, parse;
    while (i3 < n3) {
      if (j3 >= m4)
        return -1;
      c9 = specifier.charCodeAt(i3++);
      if (c9 === 37) {
        c9 = specifier.charAt(i3++);
        parse = parses[c9 in pads3 ? specifier.charAt(i3++) : c9];
        if (!parse || (j3 = parse(d3, string, j3)) < 0)
          return -1;
      } else if (c9 != string.charCodeAt(j3++)) {
        return -1;
      }
    }
    return j3;
  }
  function parsePeriod(d3, string, i3) {
    var n3 = periodRe.exec(string.slice(i3));
    return n3 ? (d3.p = periodLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i3) {
    var n3 = shortWeekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseWeekday(d3, string, i3) {
    var n3 = weekdayRe.exec(string.slice(i3));
    return n3 ? (d3.w = weekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortMonth(d3, string, i3) {
    var n3 = shortMonthRe.exec(string.slice(i3));
    return n3 ? (d3.m = shortMonthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseMonth(d3, string, i3) {
    var n3 = monthRe.exec(string.slice(i3));
    return n3 ? (d3.m = monthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i3) {
    return parseSpecifier(d3, locale_dateTime, string, i3);
  }
  function parseLocaleDate(d3, string, i3) {
    return parseSpecifier(d3, locale_date, string, i3);
  }
  function parseLocaleTime(d3, string, i3) {
    return parseSpecifier(d3, locale_time, string, i3);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f3 = newFormat(specifier += "", formats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    parse: function(specifier) {
      var p3 = newParse(specifier += "", false);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    },
    utcFormat: function(specifier) {
      var f3 = newFormat(specifier += "", utcFormats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    utcParse: function(specifier) {
      var p3 = newParse(specifier += "", true);
      p3.toString = function() {
        return specifier;
      };
      return p3;
    }
  };
}
var pads3 = { "-": "", "_": " ", "0": "0" };
var numberRe3 = /^\s*\d+/;
var percentRe3 = /^%/;
var requoteRe3 = /[\\^$*+?|[\]().{}]/g;
function pad3(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote3(s4) {
  return s4.replace(requoteRe3, "\\$&");
}
function formatRe3(names) {
  return new RegExp("^(?:" + names.map(requote3).join("|") + ")", "i");
}
function formatLookup3(names) {
  return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
}
function parseWeekdayNumberSunday3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.w = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.u = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberSunday3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.U = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberISO3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.V = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberMonday3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.W = +n3[0], i3 + n3[0].length) : -1;
}
function parseFullYear3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 4));
  return n3 ? (d3.y = +n3[0], i3 + n3[0].length) : -1;
}
function parseYear3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i3 + n3[0].length) : -1;
}
function parseZone3(d3, string, i3) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i3 + n3[0].length) : -1;
}
function parseQuarter3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 1));
  return n3 ? (d3.q = n3[0] * 3 - 3, i3 + n3[0].length) : -1;
}
function parseMonthNumber3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.m = n3[0] - 1, i3 + n3[0].length) : -1;
}
function parseDayOfMonth3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseDayOfYear3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.m = 0, d3.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseHour243(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.H = +n3[0], i3 + n3[0].length) : -1;
}
function parseMinutes3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.M = +n3[0], i3 + n3[0].length) : -1;
}
function parseSeconds3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 2));
  return n3 ? (d3.S = +n3[0], i3 + n3[0].length) : -1;
}
function parseMilliseconds3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 3));
  return n3 ? (d3.L = +n3[0], i3 + n3[0].length) : -1;
}
function parseMicroseconds3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3, i3 + 6));
  return n3 ? (d3.L = Math.floor(n3[0] / 1e3), i3 + n3[0].length) : -1;
}
function parseLiteralPercent3(d3, string, i3) {
  var n3 = percentRe3.exec(string.slice(i3, i3 + 1));
  return n3 ? i3 + n3[0].length : -1;
}
function parseUnixTimestamp3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3));
  return n3 ? (d3.Q = +n3[0], i3 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds3(d3, string, i3) {
  var n3 = numberRe3.exec(string.slice(i3));
  return n3 ? (d3.s = +n3[0], i3 + n3[0].length) : -1;
}
function formatDayOfMonth3(d3, p3) {
  return pad3(d3.getDate(), p3, 2);
}
function formatHour243(d3, p3) {
  return pad3(d3.getHours(), p3, 2);
}
function formatHour123(d3, p3) {
  return pad3(d3.getHours() % 12 || 12, p3, 2);
}
function formatDayOfYear3(d3, p3) {
  return pad3(1 + day_default3.count(year_default3(d3), d3), p3, 3);
}
function formatMilliseconds3(d3, p3) {
  return pad3(d3.getMilliseconds(), p3, 3);
}
function formatMicroseconds3(d3, p3) {
  return formatMilliseconds3(d3, p3) + "000";
}
function formatMonthNumber3(d3, p3) {
  return pad3(d3.getMonth() + 1, p3, 2);
}
function formatMinutes3(d3, p3) {
  return pad3(d3.getMinutes(), p3, 2);
}
function formatSeconds3(d3, p3) {
  return pad3(d3.getSeconds(), p3, 2);
}
function formatWeekdayNumberMonday3(d3) {
  var day4 = d3.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday3(d3, p3) {
  return pad3(sunday3.count(year_default3(d3) - 1, d3), p3, 2);
}
function dISO3(d3) {
  var day4 = d3.getDay();
  return day4 >= 4 || day4 === 0 ? thursday3(d3) : thursday3.ceil(d3);
}
function formatWeekNumberISO3(d3, p3) {
  d3 = dISO3(d3);
  return pad3(thursday3.count(year_default3(d3), d3) + (year_default3(d3).getDay() === 4), p3, 2);
}
function formatWeekdayNumberSunday3(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday3(d3, p3) {
  return pad3(monday3.count(year_default3(d3) - 1, d3), p3, 2);
}
function formatYear3(d3, p3) {
  return pad3(d3.getFullYear() % 100, p3, 2);
}
function formatYearISO3(d3, p3) {
  d3 = dISO3(d3);
  return pad3(d3.getFullYear() % 100, p3, 2);
}
function formatFullYear3(d3, p3) {
  return pad3(d3.getFullYear() % 1e4, p3, 4);
}
function formatFullYearISO3(d3, p3) {
  var day4 = d3.getDay();
  d3 = day4 >= 4 || day4 === 0 ? thursday3(d3) : thursday3.ceil(d3);
  return pad3(d3.getFullYear() % 1e4, p3, 4);
}
function formatZone3(d3) {
  var z3 = d3.getTimezoneOffset();
  return (z3 > 0 ? "-" : (z3 *= -1, "+")) + pad3(z3 / 60 | 0, "0", 2) + pad3(z3 % 60, "0", 2);
}
function formatUTCDayOfMonth3(d3, p3) {
  return pad3(d3.getUTCDate(), p3, 2);
}
function formatUTCHour243(d3, p3) {
  return pad3(d3.getUTCHours(), p3, 2);
}
function formatUTCHour123(d3, p3) {
  return pad3(d3.getUTCHours() % 12 || 12, p3, 2);
}
function formatUTCDayOfYear3(d3, p3) {
  return pad3(1 + utcDay_default3.count(utcYear_default3(d3), d3), p3, 3);
}
function formatUTCMilliseconds3(d3, p3) {
  return pad3(d3.getUTCMilliseconds(), p3, 3);
}
function formatUTCMicroseconds3(d3, p3) {
  return formatUTCMilliseconds3(d3, p3) + "000";
}
function formatUTCMonthNumber3(d3, p3) {
  return pad3(d3.getUTCMonth() + 1, p3, 2);
}
function formatUTCMinutes3(d3, p3) {
  return pad3(d3.getUTCMinutes(), p3, 2);
}
function formatUTCSeconds3(d3, p3) {
  return pad3(d3.getUTCSeconds(), p3, 2);
}
function formatUTCWeekdayNumberMonday3(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday3(d3, p3) {
  return pad3(utcSunday3.count(utcYear_default3(d3) - 1, d3), p3, 2);
}
function UTCdISO3(d3) {
  var day4 = d3.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday3(d3) : utcThursday3.ceil(d3);
}
function formatUTCWeekNumberISO3(d3, p3) {
  d3 = UTCdISO3(d3);
  return pad3(utcThursday3.count(utcYear_default3(d3), d3) + (utcYear_default3(d3).getUTCDay() === 4), p3, 2);
}
function formatUTCWeekdayNumberSunday3(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday3(d3, p3) {
  return pad3(utcMonday3.count(utcYear_default3(d3) - 1, d3), p3, 2);
}
function formatUTCYear3(d3, p3) {
  return pad3(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCYearISO3(d3, p3) {
  d3 = UTCdISO3(d3);
  return pad3(d3.getUTCFullYear() % 100, p3, 2);
}
function formatUTCFullYear3(d3, p3) {
  return pad3(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCFullYearISO3(d3, p3) {
  var day4 = d3.getUTCDay();
  d3 = day4 >= 4 || day4 === 0 ? utcThursday3(d3) : utcThursday3.ceil(d3);
  return pad3(d3.getUTCFullYear() % 1e4, p3, 4);
}
function formatUTCZone3() {
  return "+0000";
}
function formatLiteralPercent3() {
  return "%";
}
function formatUnixTimestamp3(d3) {
  return +d3;
}
function formatUnixTimestampSeconds3(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/@nivo/legends/node_modules/d3-time-format/src/defaultLocale.js
var locale6;
var timeFormat3;
var timeParse3;
var utcFormat3;
var utcParse3;
defaultLocale6({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale6(definition) {
  locale6 = formatLocale3(definition);
  timeFormat3 = locale6.format;
  timeParse3 = locale6.parse;
  utcFormat3 = locale6.utcFormat;
  utcParse3 = locale6.utcParse;
  return locale6;
}

// node_modules/@nivo/legends/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier3 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative3(date) {
  return date.toISOString();
}
var formatIso3 = Date.prototype.toISOString ? formatIsoNative3 : utcFormat3(isoSpecifier3);

// node_modules/@nivo/legends/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative3(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso3 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative3 : utcParse3(isoSpecifier3);

// node_modules/@nivo/legends/dist/nivo-legends.es.js
var a3 = __toESM(require_react());
var import_react18 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var m3 = function(e6) {
  var i3 = e6.x, n3 = e6.y, o3 = e6.size, r3 = e6.fill, l3 = e6.opacity, a4 = void 0 === l3 ? 1 : l3, c9 = e6.borderWidth, s4 = void 0 === c9 ? 0 : c9, d3 = e6.borderColor;
  return (0, import_jsx_runtime3.jsx)("circle", { r: o3 / 2, cx: i3 + o3 / 2, cy: n3 + o3 / 2, fill: r3, opacity: a4, strokeWidth: s4, stroke: void 0 === d3 ? "transparent" : d3, style: { pointerEvents: "none" } });
};
var f2 = function(e6) {
  var i3 = e6.x, n3 = e6.y, o3 = e6.size, r3 = e6.fill, l3 = e6.opacity, a4 = void 0 === l3 ? 1 : l3, c9 = e6.borderWidth, s4 = void 0 === c9 ? 0 : c9, d3 = e6.borderColor;
  return (0, import_jsx_runtime3.jsx)("g", { transform: "translate(" + i3 + "," + n3 + ")", children: (0, import_jsx_runtime3.jsx)("path", { d: "\n                    M" + o3 / 2 + " 0\n                    L" + 0.8 * o3 + " " + o3 / 2 + "\n                    L" + o3 / 2 + " " + o3 + "\n                    L" + 0.2 * o3 + " " + o3 / 2 + "\n                    L" + o3 / 2 + " 0\n                ", fill: r3, opacity: a4, strokeWidth: s4, stroke: void 0 === d3 ? "transparent" : d3, style: { pointerEvents: "none" } }) });
};
var u2 = function(e6) {
  var i3 = e6.x, n3 = e6.y, o3 = e6.size, r3 = e6.fill, l3 = e6.opacity, a4 = void 0 === l3 ? 1 : l3, c9 = e6.borderWidth, s4 = void 0 === c9 ? 0 : c9, d3 = e6.borderColor;
  return (0, import_jsx_runtime3.jsx)("rect", { x: i3, y: n3, fill: r3, opacity: a4, strokeWidth: s4, stroke: void 0 === d3 ? "transparent" : d3, width: o3, height: o3, style: { pointerEvents: "none" } });
};
var v3 = function(e6) {
  var i3 = e6.x, n3 = e6.y, o3 = e6.size, r3 = e6.fill, l3 = e6.opacity, a4 = void 0 === l3 ? 1 : l3, c9 = e6.borderWidth, s4 = void 0 === c9 ? 0 : c9, d3 = e6.borderColor;
  return (0, import_jsx_runtime3.jsx)("g", { transform: "translate(" + i3 + "," + n3 + ")", children: (0, import_jsx_runtime3.jsx)("path", { d: "\n                M" + o3 / 2 + " 0\n                L" + o3 + " " + o3 + "\n                L0 " + o3 + "\n                L" + o3 / 2 + " 0\n            ", fill: r3, opacity: a4, strokeWidth: s4, stroke: void 0 === d3 ? "transparent" : d3, style: { pointerEvents: "none" } }) });
};
function p2() {
  return p2 = Object.assign ? Object.assign.bind() : function(t6) {
    for (var e6 = 1; e6 < arguments.length; e6++) {
      var i3 = arguments[e6];
      for (var n3 in i3)
        Object.prototype.hasOwnProperty.call(i3, n3) && (t6[n3] = i3[n3]);
    }
    return t6;
  }, p2.apply(this, arguments);
}
var b2 = { top: 0, right: 0, bottom: 0, left: 0 };
var k3 = function(t6) {
  var e6, i3 = t6.direction, n3 = t6.itemsSpacing, o3 = t6.padding, r3 = t6.itemCount, l3 = t6.itemWidth, a4 = t6.itemHeight;
  if ("number" != typeof o3 && ("object" != typeof (e6 = o3) || Array.isArray(e6) || null === e6))
    throw new Error("Invalid property padding, must be one of: number, object");
  var c9 = "number" == typeof o3 ? { top: o3, right: o3, bottom: o3, left: o3 } : p2({}, b2, o3), s4 = c9.left + c9.right, d3 = c9.top + c9.bottom, h2 = l3 + s4, g3 = a4 + d3, m4 = (r3 - 1) * n3;
  return "row" === i3 ? h2 = l3 * r3 + m4 + s4 : "column" === i3 && (g3 = a4 * r3 + m4 + d3), { width: h2, height: g3, padding: c9 };
};
var x4 = function(t6) {
  var e6 = t6.anchor, i3 = t6.translateX, n3 = t6.translateY, o3 = t6.containerWidth, r3 = t6.containerHeight, l3 = t6.width, a4 = t6.height, c9 = i3, s4 = n3;
  switch (e6) {
    case "top":
      c9 += (o3 - l3) / 2;
      break;
    case "top-right":
      c9 += o3 - l3;
      break;
    case "right":
      c9 += o3 - l3, s4 += (r3 - a4) / 2;
      break;
    case "bottom-right":
      c9 += o3 - l3, s4 += r3 - a4;
      break;
    case "bottom":
      c9 += (o3 - l3) / 2, s4 += r3 - a4;
      break;
    case "bottom-left":
      s4 += r3 - a4;
      break;
    case "left":
      s4 += (r3 - a4) / 2;
      break;
    case "center":
      c9 += (o3 - l3) / 2, s4 += (r3 - a4) / 2;
  }
  return { x: c9, y: s4 };
};
var S = function(t6) {
  var e6, i3, n3, o3, r3, l3, a4 = t6.direction, c9 = t6.justify, s4 = t6.symbolSize, d3 = t6.symbolSpacing, h2 = t6.width, g3 = t6.height;
  switch (a4) {
    case "left-to-right":
      e6 = 0, i3 = (g3 - s4) / 2, o3 = g3 / 2, l3 = "central", c9 ? (n3 = h2, r3 = "end") : (n3 = s4 + d3, r3 = "start");
      break;
    case "right-to-left":
      e6 = h2 - s4, i3 = (g3 - s4) / 2, o3 = g3 / 2, l3 = "central", c9 ? (n3 = 0, r3 = "start") : (n3 = h2 - s4 - d3, r3 = "end");
      break;
    case "top-to-bottom":
      e6 = (h2 - s4) / 2, i3 = 0, n3 = h2 / 2, r3 = "middle", c9 ? (o3 = g3, l3 = "alphabetic") : (o3 = s4 + d3, l3 = "text-before-edge");
      break;
    case "bottom-to-top":
      e6 = (h2 - s4) / 2, i3 = g3 - s4, n3 = h2 / 2, r3 = "middle", c9 ? (o3 = 0, l3 = "text-before-edge") : (o3 = g3 - s4 - d3, l3 = "alphabetic");
  }
  return { symbolX: e6, symbolY: i3, labelX: n3, labelY: o3, labelAnchor: r3, labelAlignment: l3 };
};
var C8 = { circle: m3, diamond: f2, square: u2, triangle: v3 };
var B6 = function(i3) {
  var n3, r3, l3, c9, h2, g3, m4, f3, u3, v4, y4, b3 = i3.x, k4 = i3.y, x5 = i3.width, A7 = i3.height, W2 = i3.data, O3 = i3.direction, z3 = void 0 === O3 ? "left-to-right" : O3, B7 = i3.justify, w3 = void 0 !== B7 && B7, X2 = i3.textColor, Y2 = i3.background, H2 = void 0 === Y2 ? "transparent" : Y2, E7 = i3.opacity, j3 = void 0 === E7 ? 1 : E7, T3 = i3.symbolShape, L = void 0 === T3 ? "square" : T3, M2 = i3.symbolSize, F2 = void 0 === M2 ? 16 : M2, P3 = i3.symbolSpacing, R = void 0 === P3 ? 8 : P3, q = i3.symbolBorderWidth, V2 = void 0 === q ? 0 : q, D6 = i3.symbolBorderColor, G = void 0 === D6 ? "transparent" : D6, I = i3.onClick, N2 = i3.onMouseEnter, _ = i3.onMouseLeave, J = i3.toggleSerie, K6 = i3.effects, Q = (0, import_react18.useState)({}), U = Q[0], Z = Q[1], $ = Ut(), tt2 = (0, import_react18.useCallback)(function(t6) {
    if (K6) {
      var e6 = K6.filter(function(t7) {
        return "hover" === t7.on;
      }).reduce(function(t7, e7) {
        return p2({}, t7, e7.style);
      }, {});
      Z(e6);
    }
    null == N2 || N2(W2, t6);
  }, [N2, W2, K6]), et2 = (0, import_react18.useCallback)(function(t6) {
    if (K6) {
      var e6 = K6.filter(function(t7) {
        return "hover" !== t7.on;
      }).reduce(function(t7, e7) {
        return p2({}, t7, e7.style);
      }, {});
      Z(e6);
    }
    null == _ || _(W2, t6);
  }, [_, W2, K6]), it2 = S({ direction: z3, justify: w3, symbolSize: null != (n3 = U.symbolSize) ? n3 : F2, symbolSpacing: R, width: x5, height: A7 }), nt2 = it2.symbolX, ot = it2.symbolY, rt2 = it2.labelX, lt = it2.labelY, at = it2.labelAnchor, ct2 = it2.labelAlignment, st = [I, N2, _, J].some(function(t6) {
    return void 0 !== t6;
  }), dt = "function" == typeof L ? L : C8[L];
  return (0, import_jsx_runtime3.jsxs)("g", { transform: "translate(" + b3 + "," + k4 + ")", style: { opacity: null != (r3 = U.itemOpacity) ? r3 : j3 }, children: [(0, import_jsx_runtime3.jsx)("rect", { width: x5, height: A7, fill: null != (l3 = U.itemBackground) ? l3 : H2, style: { cursor: st ? "pointer" : "auto" }, onClick: function(t6) {
    null == I || I(W2, t6), null == J || J(W2.id);
  }, onMouseEnter: tt2, onMouseLeave: et2 }), a3.createElement(dt, p2({ id: W2.id, x: nt2, y: ot, size: null != (c9 = U.symbolSize) ? c9 : F2, fill: null != (h2 = null != (g3 = W2.fill) ? g3 : W2.color) ? h2 : "black", borderWidth: null != (m4 = U.symbolBorderWidth) ? m4 : V2, borderColor: null != (f3 = U.symbolBorderColor) ? f3 : G }, W2.hidden ? $.legends.hidden.symbol : void 0)), (0, import_jsx_runtime3.jsx)("text", { textAnchor: at, style: p2({}, $.legends.text, { fill: null != (u3 = null != (v4 = null != (y4 = U.itemTextColor) ? y4 : X2) ? v4 : $.legends.text.fill) ? u3 : "black", dominantBaseline: ct2, pointerEvents: "none", userSelect: "none" }, W2.hidden ? $.legends.hidden.text : void 0), x: rt2, y: lt, children: W2.label })] });
};
var w2 = function(e6) {
  var i3 = e6.data, n3 = e6.x, o3 = e6.y, r3 = e6.direction, l3 = e6.padding, a4 = void 0 === l3 ? 0 : l3, c9 = e6.justify, s4 = e6.effects, d3 = e6.itemWidth, h2 = e6.itemHeight, g3 = e6.itemDirection, m4 = void 0 === g3 ? "left-to-right" : g3, f3 = e6.itemsSpacing, u3 = void 0 === f3 ? 0 : f3, v4 = e6.itemTextColor, p3 = e6.itemBackground, y4 = void 0 === p3 ? "transparent" : p3, b3 = e6.itemOpacity, x5 = void 0 === b3 ? 1 : b3, S2 = e6.symbolShape, A7 = e6.symbolSize, W2 = e6.symbolSpacing, O3 = e6.symbolBorderWidth, z3 = e6.symbolBorderColor, C9 = e6.onClick, w3 = e6.onMouseEnter, X2 = e6.onMouseLeave, Y2 = e6.toggleSerie, H2 = k3({ itemCount: i3.length, itemWidth: d3, itemHeight: h2, itemsSpacing: u3, direction: r3, padding: a4 }).padding, E7 = "row" === r3 ? d3 + u3 : 0, j3 = "column" === r3 ? h2 + u3 : 0;
  return (0, import_jsx_runtime3.jsx)("g", { transform: "translate(" + n3 + "," + o3 + ")", children: i3.map(function(e7, i4) {
    return (0, import_jsx_runtime3.jsx)(B6, { data: e7, x: i4 * E7 + H2.left, y: i4 * j3 + H2.top, width: d3, height: h2, direction: m4, justify: c9, effects: s4, textColor: v4, background: y4, opacity: x5, symbolShape: S2, symbolSize: A7, symbolSpacing: W2, symbolBorderWidth: O3, symbolBorderColor: z3, onClick: C9, onMouseEnter: w3, onMouseLeave: X2, toggleSerie: Y2 }, i4);
  }) });
};
var X = function(e6) {
  var i3 = e6.data, n3 = e6.containerWidth, o3 = e6.containerHeight, r3 = e6.translateX, l3 = void 0 === r3 ? 0 : r3, a4 = e6.translateY, c9 = void 0 === a4 ? 0 : a4, s4 = e6.anchor, d3 = e6.direction, h2 = e6.padding, g3 = void 0 === h2 ? 0 : h2, m4 = e6.justify, f3 = e6.itemsSpacing, u3 = void 0 === f3 ? 0 : f3, v4 = e6.itemWidth, p3 = e6.itemHeight, y4 = e6.itemDirection, b3 = e6.itemTextColor, S2 = e6.itemBackground, A7 = e6.itemOpacity, W2 = e6.symbolShape, O3 = e6.symbolSize, z3 = e6.symbolSpacing, C9 = e6.symbolBorderWidth, B7 = e6.symbolBorderColor, X2 = e6.onClick, Y2 = e6.onMouseEnter, H2 = e6.onMouseLeave, E7 = e6.toggleSerie, j3 = e6.effects, T3 = k3({ itemCount: i3.length, itemsSpacing: u3, itemWidth: v4, itemHeight: p3, direction: d3, padding: g3 }), L = T3.width, M2 = T3.height, F2 = x4({ anchor: s4, translateX: l3, translateY: c9, containerWidth: n3, containerHeight: o3, width: L, height: M2 }), P3 = F2.x, R = F2.y;
  return (0, import_jsx_runtime3.jsx)(w2, { data: i3, x: P3, y: R, direction: d3, padding: g3, justify: m4, effects: j3, itemsSpacing: u3, itemWidth: v4, itemHeight: p3, itemDirection: y4, itemTextColor: b3, itemBackground: S2, itemOpacity: A7, symbolShape: W2, symbolSize: O3, symbolSpacing: z3, symbolBorderWidth: C9, symbolBorderColor: B7, onClick: X2, onMouseEnter: Y2, onMouseLeave: H2, toggleSerie: "boolean" == typeof E7 ? void 0 : E7 });
};
var Y = { start: "left", middle: "center", end: "right" };
var H = function(t6, e6) {
  var i3 = e6.data, n3 = e6.containerWidth, o3 = e6.containerHeight, r3 = e6.translateX, l3 = void 0 === r3 ? 0 : r3, a4 = e6.translateY, c9 = void 0 === a4 ? 0 : a4, s4 = e6.anchor, d3 = e6.direction, h2 = e6.padding, g3 = void 0 === h2 ? 0 : h2, m4 = e6.justify, f3 = void 0 !== m4 && m4, u3 = e6.itemsSpacing, v4 = void 0 === u3 ? 0 : u3, p3 = e6.itemWidth, y4 = e6.itemHeight, b3 = e6.itemDirection, A7 = void 0 === b3 ? "left-to-right" : b3, W2 = e6.itemTextColor, O3 = e6.symbolSize, z3 = void 0 === O3 ? 16 : O3, C9 = e6.symbolSpacing, B7 = void 0 === C9 ? 8 : C9, w3 = e6.theme, X2 = k3({ itemCount: i3.length, itemWidth: p3, itemHeight: y4, itemsSpacing: v4, direction: d3, padding: g3 }), H2 = X2.width, E7 = X2.height, j3 = X2.padding, T3 = x4({ anchor: s4, translateX: l3, translateY: c9, containerWidth: n3, containerHeight: o3, width: H2, height: E7 }), L = T3.x, M2 = T3.y, F2 = "row" === d3 ? p3 + v4 : 0, P3 = "column" === d3 ? y4 + v4 : 0;
  t6.save(), t6.translate(L, M2), t6.font = w3.legends.text.fontSize + "px " + (w3.legends.text.fontFamily || "sans-serif"), i3.forEach(function(e7, i4) {
    var n4, o4, r4 = i4 * F2 + j3.left, l4 = i4 * P3 + j3.top, a5 = S({ direction: A7, justify: f3, symbolSize: z3, symbolSpacing: B7, width: p3, height: y4 }), c10 = a5.symbolX, s5 = a5.symbolY, d4 = a5.labelX, h3 = a5.labelY, g4 = a5.labelAnchor, m5 = a5.labelAlignment;
    t6.fillStyle = null != (n4 = e7.color) ? n4 : "black", t6.fillRect(r4 + c10, l4 + s5, z3, z3), t6.textAlign = Y[g4], "central" === m5 && (t6.textBaseline = "middle"), t6.fillStyle = null != (o4 = null != W2 ? W2 : w3.legends.text.fill) ? o4 : "black", t6.fillText(String(e7.label), r4 + d4, l4 + h3);
  }), t6.restore();
};
var j2 = function(t6) {
  var e6 = t6.scale, i3 = t6.domain, n3 = t6.reverse, o3 = void 0 !== n3 && n3, r3 = t6.valueFormat, l3 = void 0 === r3 ? function(t7) {
    return t7;
  } : r3, a4 = t6.separator, c9 = void 0 === a4 ? " - " : a4;
  return (0, import_react18.useMemo)(function() {
    var t7 = (null != i3 ? i3 : e6.range()).map(function(t8, i4) {
      var n4 = e6.invertExtent(t8), o4 = n4[0], r4 = n4[1];
      return { id: t8, index: i4, extent: [o4, r4], label: "" + l3(o4) + c9 + l3(r4), value: e6(o4), color: t8 };
    });
    return o3 && t7.reverse(), t7;
  }, [i3, e6, o3, c9, l3]);
};
var T2 = { data: import_prop_types3.default.arrayOf(import_prop_types3.default.object), anchor: import_prop_types3.default.oneOf(["top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", "center"]).isRequired, translateX: import_prop_types3.default.number, translateY: import_prop_types3.default.number, direction: import_prop_types3.default.oneOf(["row", "column"]).isRequired, itemsSpacing: import_prop_types3.default.number, itemWidth: import_prop_types3.default.number.isRequired, itemHeight: import_prop_types3.default.number.isRequired, itemDirection: import_prop_types3.default.oneOf(["left-to-right", "right-to-left", "top-to-bottom", "bottom-to-top"]), itemTextColor: import_prop_types3.default.string, itemBackground: import_prop_types3.default.string, itemOpacity: import_prop_types3.default.number, symbolShape: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["circle", "diamond", "square", "triangle"]), import_prop_types3.default.func]), symbolSize: import_prop_types3.default.number, symbolSpacing: import_prop_types3.default.number, symbolBorderWidth: import_prop_types3.default.number, symbolBorderColor: import_prop_types3.default.string, onClick: import_prop_types3.default.func, onMouseEnter: import_prop_types3.default.func, onMouseLeave: import_prop_types3.default.func, effects: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({ on: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["hover"])]).isRequired, style: import_prop_types3.default.shape({ itemTextColor: import_prop_types3.default.string, itemBackground: import_prop_types3.default.string, itemOpacity: import_prop_types3.default.number, symbolSize: import_prop_types3.default.number, symbolBorderWidth: import_prop_types3.default.number, symbolBorderColor: import_prop_types3.default.string }).isRequired })) };

export {
  useSpring,
  useTransition,
  to2 as to,
  animated,
  g,
  w,
  C4 as C,
  P2 as P,
  k2 as k,
  require_lodash,
  Qr,
  $r,
  et,
  it,
  ut,
  mt,
  yt,
  vt,
  Pt,
  Gt,
  Yt,
  Ut,
  Kt,
  Qt,
  oi,
  ai,
  si,
  di,
  pi3 as pi,
  wi,
  Ci,
  Si,
  ji,
  Bi,
  Gi,
  Li,
  Fi,
  Ei,
  Ki,
  We,
  Xe,
  Ye,
  pr,
  X,
  H,
  j2 as j,
  T2 as T
};
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=chunk-M6EQ6LGW.js.map
