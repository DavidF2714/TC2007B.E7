import {
  require_isString,
  require_lodash,
  require_without
} from "./chunk-RVBDPOWG.js";
import "./chunk-JQAIQ6LB.js";
import {
  require_baseGetTag,
  require_get,
  require_isArray,
  require_isEqual,
  require_isFunction,
  require_isObjectLike,
  require_isPlainObject,
  require_last,
  require_merge,
  require_pick,
  require_set
} from "./chunk-II4FNML3.js";
import {
  require_interopRequireDefault
} from "./chunk-D5YRH257.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-KGSKX7UN.js";
import {
  _extends,
  init_extends
} from "./chunk-7WYJD32I.js";
import {
  require_prop_types
} from "./chunk-N6LWOU7K.js";
import {
  require_jsx_runtime
} from "./chunk-6A5JWMWA.js";
import {
  require_react
} from "./chunk-WWXSLZJU.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
    function _extends2() {
      module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends2.apply(this, arguments);
    }
    module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/getDisplayName.js
var require_getDisplayName = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/getDisplayName.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var getDisplayName = function getDisplayName2(Component2) {
      if (typeof Component2 === "string") {
        return Component2;
      }
      if (!Component2) {
        return void 0;
      }
      return Component2.displayName || Component2.name || "Component";
    };
    var _default = getDisplayName;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/wrapDisplayName.js
var require_wrapDisplayName = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/wrapDisplayName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _getDisplayName = _interopRequireDefault(require_getDisplayName());
    var wrapDisplayName = function wrapDisplayName2(BaseComponent, hocName) {
      return hocName + "(" + (0, _getDisplayName.default)(BaseComponent) + ")";
    };
    var _default = wrapDisplayName;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setStatic.js
var require_setStatic = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setStatic.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var setStatic = function setStatic2(key, value) {
      return function(BaseComponent) {
        BaseComponent[key] = value;
        return BaseComponent;
      };
    };
    var _default = setStatic;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setDisplayName.js
var require_setDisplayName = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setDisplayName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _setStatic = _interopRequireDefault(require_setStatic());
    var setDisplayName = function setDisplayName2(displayName) {
      return (0, _setStatic.default)("displayName", displayName);
    };
    var _default = setDisplayName;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/mapProps.js
var require_mapProps = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/mapProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _react = require_react();
    var _setDisplayName = _interopRequireDefault(require_setDisplayName());
    var _wrapDisplayName = _interopRequireDefault(require_wrapDisplayName());
    var mapProps = function mapProps2(propsMapper) {
      return function(BaseComponent) {
        var factory = (0, _react.createFactory)(BaseComponent);
        var MapProps = function MapProps2(props) {
          return factory(propsMapper(props));
        };
        if (true) {
          return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, "mapProps"))(MapProps);
        }
        return MapProps;
      };
    };
    var _default = mapProps;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/withProps.js
var require_withProps = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/withProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _wrapDisplayName = _interopRequireDefault(require_wrapDisplayName());
    var _setDisplayName = _interopRequireDefault(require_setDisplayName());
    var _mapProps = _interopRequireDefault(require_mapProps());
    var withProps2 = function withProps3(input) {
      var hoc = (0, _mapProps.default)(function(props) {
        return (0, _extends2.default)({}, props, typeof input === "function" ? input(props) : input);
      });
      if (true) {
        return function(BaseComponent) {
          return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, "withProps"))(hoc(BaseComponent));
        };
      }
      return hoc;
    };
    var _default = withProps2;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/compose.js
var require_compose = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/compose.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var compose2 = function compose3() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }
      return funcs.reduce(function(a2, b) {
        return function() {
          return a2(b.apply(void 0, arguments));
        };
      }, function(arg) {
        return arg;
      });
    };
    var _default = compose2;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setPropTypes.js
var require_setPropTypes = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/setPropTypes.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _setStatic = _interopRequireDefault(require_setStatic());
    var setPropTypes2 = function setPropTypes3(propTypes) {
      return (0, _setStatic.default)("propTypes", propTypes);
    };
    var _default = setPropTypes2;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/defaultProps.js
var require_defaultProps = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/defaultProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _react = require_react();
    var _setDisplayName = _interopRequireDefault(require_setDisplayName());
    var _wrapDisplayName = _interopRequireDefault(require_wrapDisplayName());
    var defaultProps2 = function defaultProps3(props) {
      return function(BaseComponent) {
        var factory = (0, _react.createFactory)(BaseComponent);
        var DefaultProps = function DefaultProps2(ownerProps) {
          return factory(ownerProps);
        };
        DefaultProps.defaultProps = props;
        if (true) {
          return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, "defaultProps"))(DefaultProps);
        }
        return DefaultProps;
      };
    };
    var _default = defaultProps2;
    exports.default = _default;
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
    function _setPrototypeOf3(o2, p) {
      module.exports = _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o3, p2) {
        o3.__proto__ = p2;
        return o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf3(o2, p);
    }
    module.exports = _setPrototypeOf3, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/inheritsLoose.js
var require_inheritsLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports, module) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      setPrototypeOf(subClass, superClass);
    }
    module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
var react_lifecycles_compat_es_exports = {};
__export(react_lifecycles_compat_es_exports, {
  polyfill: () => polyfill
});
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
function polyfill(Component2) {
  var prototype = Component2.prototype;
  if (!prototype || !prototype.isReactComponent) {
    throw new Error("Can only polyfill class components");
  }
  if (typeof Component2.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
    return Component2;
  }
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === "function") {
    foundWillMountName = "componentWillMount";
  } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
    foundWillMountName = "UNSAFE_componentWillMount";
  }
  if (typeof prototype.componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "componentWillReceiveProps";
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
  }
  if (typeof prototype.componentWillUpdate === "function") {
    foundWillUpdateName = "componentWillUpdate";
  } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
    foundWillUpdateName = "UNSAFE_componentWillUpdate";
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component2.displayName || Component2.name;
    var newApiName = typeof Component2.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
    throw Error(
      "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks"
    );
  }
  if (typeof Component2.getDerivedStateFromProps === "function") {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }
  if (typeof prototype.getSnapshotBeforeUpdate === "function") {
    if (typeof prototype.componentDidUpdate !== "function") {
      throw new Error(
        "Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype"
      );
    }
    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;
    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }
  return Component2;
}
var init_react_lifecycles_compat_es = __esm({
  "node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"() {
    componentWillMount.__suppressDeprecationWarning = true;
    componentWillReceiveProps.__suppressDeprecationWarning = true;
    componentWillUpdate.__suppressDeprecationWarning = true;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/utils/pick.js
var require_pick2 = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/utils/pick.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var pick2 = function pick3(obj, keys) {
      var result = {};
      for (var i2 = 0; i2 < keys.length; i2++) {
        var key = keys[i2];
        if (obj.hasOwnProperty(key)) {
          result[key] = obj[key];
        }
      }
      return result;
    };
    var _default = pick2;
    exports.default = _default;
  }
});

// node_modules/fbjs/lib/shallowEqual.js
var require_shallowEqual = __commonJS({
  "node_modules/fbjs/lib/shallowEqual.js"(exports, module) {
    "use strict";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function is2(x2, y3) {
      if (x2 === y3) {
        return x2 !== 0 || y3 !== 0 || 1 / x2 === 1 / y3;
      } else {
        return x2 !== x2 && y3 !== y3;
      }
    }
    function shallowEqual(objA, objB) {
      if (is2(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i2 = 0; i2 < keysA.length; i2++) {
        if (!hasOwnProperty.call(objB, keysA[i2]) || !is2(objA[keysA[i2]], objB[keysA[i2]])) {
          return false;
        }
      }
      return true;
    }
    module.exports = shallowEqual;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/shallowEqual.js
var require_shallowEqual2 = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/shallowEqual.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _shallowEqual = _interopRequireDefault(require_shallowEqual());
    var _default = _shallowEqual.default;
    exports.default = _default;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/withPropsOnChange.js
var require_withPropsOnChange = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/core/node_modules/recompose/withPropsOnChange.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _react = require_react();
    var _reactLifecyclesCompat = (init_react_lifecycles_compat_es(), __toCommonJS(react_lifecycles_compat_es_exports));
    var _pick = _interopRequireDefault(require_pick2());
    var _shallowEqual = _interopRequireDefault(require_shallowEqual2());
    var _setDisplayName = _interopRequireDefault(require_setDisplayName());
    var _wrapDisplayName = _interopRequireDefault(require_wrapDisplayName());
    var withPropsOnChange2 = function withPropsOnChange3(shouldMapOrKeys, propsMapper) {
      return function(BaseComponent) {
        var factory = (0, _react.createFactory)(BaseComponent);
        var shouldMap = typeof shouldMapOrKeys === "function" ? shouldMapOrKeys : function(props, nextProps) {
          return !(0, _shallowEqual.default)((0, _pick.default)(props, shouldMapOrKeys), (0, _pick.default)(nextProps, shouldMapOrKeys));
        };
        var WithPropsOnChange = function(_Component) {
          (0, _inheritsLoose2.default)(WithPropsOnChange2, _Component);
          function WithPropsOnChange2() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _Component.call.apply(_Component, [this].concat(args)) || this;
            _this.state = {
              computedProps: propsMapper(_this.props),
              prevProps: _this.props
            };
            return _this;
          }
          WithPropsOnChange2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            if (shouldMap(prevState.prevProps, nextProps)) {
              return {
                computedProps: propsMapper(nextProps),
                prevProps: nextProps
              };
            }
            return {
              prevProps: nextProps
            };
          };
          var _proto = WithPropsOnChange2.prototype;
          _proto.render = function render() {
            return factory((0, _extends2.default)({}, this.props, this.state.computedProps));
          };
          return WithPropsOnChange2;
        }(_react.Component);
        (0, _reactLifecyclesCompat.polyfill)(WithPropsOnChange);
        if (true) {
          return (0, _setDisplayName.default)((0, _wrapDisplayName.default)(BaseComponent, "withPropsOnChange"))(WithPropsOnChange);
        }
        return WithPropsOnChange;
      };
    };
    var _default = withPropsOnChange2;
    exports.default = _default;
  }
});

// node_modules/lodash.get/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.get/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object2, key) {
      return object2 == null ? void 0 : object2[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e3) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index3, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array3, key) {
      var length = array3.length;
      while (length--) {
        if (eq(array3[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object2, path2) {
      path2 = isKey(path2, object2) ? [path2] : castPath(path2);
      var index3 = 0, length = path2.length;
      while (object2 != null && index3 < length) {
        object2 = object2[toKey(path2[index3++])];
      }
      return index3 && index3 == length ? object2 : void 0;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray2(value) ? value : stringToPath(value);
    }
    function getMapData(map5, key) {
      var data = map5.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object2, key) {
      var value = getValue(object2, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object2) {
      if (isArray2(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number2, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e3) {
        }
        try {
          return func + "";
        } catch (e3) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray2 = Array.isArray;
    function isFunction3(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get3(object2, path2, defaultValue) {
      var result = object2 == null ? void 0 : baseGet(object2, path2);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get3;
  }
});

// node_modules/lodash.isplainobject/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.isplainobject/index.js"(exports, module) {
    var objectTag = "[object Object]";
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e3) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isPlainObject4(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject4;
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/mapToZero.js
var require_mapToZero = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/mapToZero.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = mapToZero;
    function mapToZero(obj) {
      var ret = {};
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          ret[key] = 0;
        }
      }
      return ret;
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/stripStyle.js
var require_stripStyle = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/stripStyle.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = stripStyle;
    function stripStyle(style) {
      var ret = {};
      for (var key in style) {
        if (!Object.prototype.hasOwnProperty.call(style, key)) {
          continue;
        }
        ret[key] = typeof style[key] === "number" ? style[key] : style[key].val;
      }
      return ret;
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/stepper.js
var require_stepper = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/stepper.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = stepper;
    var reusedTuple = [0, 0];
    function stepper(secondPerFrame, x2, v, destX, k2, b, precision) {
      var Fspring = -k2 * (x2 - destX);
      var Fdamper = -b * v;
      var a2 = Fspring + Fdamper;
      var newV = v + a2 * secondPerFrame;
      var newX = x2 + newV * secondPerFrame;
      if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
        reusedTuple[0] = destX;
        reusedTuple[1] = 0;
        return reusedTuple;
      }
      reusedTuple[0] = newX;
      reusedTuple[1] = newV;
      return reusedTuple;
    }
    module.exports = exports["default"];
  }
});

// node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - loadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        loadTime = getNanoSeconds();
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/node_modules/performance-now/lib/performance-now.js
var require_performance_now2 = __commonJS({
  "node_modules/raf/node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/raf/index.js"(exports, module) {
    var now2 = require_performance_now2();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i2 = 0; !raf && i2 < vendors.length; i2++) {
      raf = root[vendors[i2] + "Request" + suffix];
      caf = root[vendors[i2] + "Cancel" + suffix] || root[vendors[i2] + "CancelRequest" + suffix];
    }
    var i2;
    if (!raf || !caf) {
      last2 = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf = function(callback) {
        if (queue.length === 0) {
          var _now = now2(), next = Math.max(0, frameDuration - (_now - last2));
          last2 = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i3 = 0; i3 < cp.length; i3++) {
              if (!cp[i3].cancelled) {
                try {
                  cp[i3].callback(last2);
                } catch (e3) {
                  setTimeout(function() {
                    throw e3;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i3 = 0; i3 < queue.length; i3++) {
          if (queue[i3].handle === handle) {
            queue[i3].cancelled = true;
          }
        }
      };
    }
    var last2;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object2) {
      if (!object2) {
        object2 = root;
      }
      object2.requestAnimationFrame = raf;
      object2.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/shouldStopAnimation.js
var require_shouldStopAnimation = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/shouldStopAnimation.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = shouldStopAnimation;
    function shouldStopAnimation(currentStyle, style, currentVelocity) {
      for (var key in style) {
        if (!Object.prototype.hasOwnProperty.call(style, key)) {
          continue;
        }
        if (currentVelocity[key] !== 0) {
          return false;
        }
        var styleValue = typeof style[key] === "number" ? style[key] : style[key].val;
        if (currentStyle[key] !== styleValue) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/Motion.js
var require_Motion = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/Motion.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass3 = function() {
      function defineProperties(target, props) {
        for (var i2 = 0; i2 < props.length; i2++) {
          var descriptor = props[i2];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits3(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _mapToZero = require_mapToZero();
    var _mapToZero2 = _interopRequireDefault(_mapToZero);
    var _stripStyle = require_stripStyle();
    var _stripStyle2 = _interopRequireDefault(_stripStyle);
    var _stepper3 = require_stepper();
    var _stepper4 = _interopRequireDefault(_stepper3);
    var _performanceNow = require_performance_now();
    var _performanceNow2 = _interopRequireDefault(_performanceNow);
    var _raf = require_raf();
    var _raf2 = _interopRequireDefault(_raf);
    var _shouldStopAnimation = require_shouldStopAnimation();
    var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var msPerFrame = 1e3 / 60;
    var Motion = function(_React$Component) {
      _inherits3(Motion2, _React$Component);
      _createClass3(Motion2, null, [{
        key: "propTypes",
        value: {
          // TOOD: warn against putting a config in here
          defaultStyle: _propTypes2["default"].objectOf(_propTypes2["default"].number),
          style: _propTypes2["default"].objectOf(_propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].object])).isRequired,
          children: _propTypes2["default"].func.isRequired,
          onRest: _propTypes2["default"].func
        },
        enumerable: true
      }]);
      function Motion2(props) {
        var _this = this;
        _classCallCheck3(this, Motion2);
        _React$Component.call(this, props);
        this.wasAnimating = false;
        this.animationID = null;
        this.prevTime = 0;
        this.accumulatedTime = 0;
        this.unreadPropStyle = null;
        this.clearUnreadPropStyle = function(destStyle) {
          var dirty = false;
          var _state = _this.state;
          var currentStyle = _state.currentStyle;
          var currentVelocity = _state.currentVelocity;
          var lastIdealStyle = _state.lastIdealStyle;
          var lastIdealVelocity = _state.lastIdealVelocity;
          for (var key in destStyle) {
            if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
              continue;
            }
            var styleValue = destStyle[key];
            if (typeof styleValue === "number") {
              if (!dirty) {
                dirty = true;
                currentStyle = _extends2({}, currentStyle);
                currentVelocity = _extends2({}, currentVelocity);
                lastIdealStyle = _extends2({}, lastIdealStyle);
                lastIdealVelocity = _extends2({}, lastIdealVelocity);
              }
              currentStyle[key] = styleValue;
              currentVelocity[key] = 0;
              lastIdealStyle[key] = styleValue;
              lastIdealVelocity[key] = 0;
            }
          }
          if (dirty) {
            _this.setState({ currentStyle, currentVelocity, lastIdealStyle, lastIdealVelocity });
          }
        };
        this.startAnimationIfNecessary = function() {
          _this.animationID = _raf2["default"](function(timestamp) {
            var propsStyle = _this.props.style;
            if (_shouldStopAnimation2["default"](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
              if (_this.wasAnimating && _this.props.onRest) {
                _this.props.onRest();
              }
              _this.animationID = null;
              _this.wasAnimating = false;
              _this.accumulatedTime = 0;
              return;
            }
            _this.wasAnimating = true;
            var currentTime = timestamp || _performanceNow2["default"]();
            var timeDelta = currentTime - _this.prevTime;
            _this.prevTime = currentTime;
            _this.accumulatedTime = _this.accumulatedTime + timeDelta;
            if (_this.accumulatedTime > msPerFrame * 10) {
              _this.accumulatedTime = 0;
            }
            if (_this.accumulatedTime === 0) {
              _this.animationID = null;
              _this.startAnimationIfNecessary();
              return;
            }
            var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
            var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
            var newLastIdealStyle = {};
            var newLastIdealVelocity = {};
            var newCurrentStyle = {};
            var newCurrentVelocity = {};
            for (var key in propsStyle) {
              if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
                continue;
              }
              var styleValue = propsStyle[key];
              if (typeof styleValue === "number") {
                newCurrentStyle[key] = styleValue;
                newCurrentVelocity[key] = 0;
                newLastIdealStyle[key] = styleValue;
                newLastIdealVelocity[key] = 0;
              } else {
                var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
                var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
                for (var i2 = 0; i2 < framesToCatchUp; i2++) {
                  var _stepper = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                  newLastIdealStyleValue = _stepper[0];
                  newLastIdealVelocityValue = _stepper[1];
                }
                var _stepper2 = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                var nextIdealX = _stepper2[0];
                var nextIdealV = _stepper2[1];
                newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
                newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
                newLastIdealStyle[key] = newLastIdealStyleValue;
                newLastIdealVelocity[key] = newLastIdealVelocityValue;
              }
            }
            _this.animationID = null;
            _this.accumulatedTime -= framesToCatchUp * msPerFrame;
            _this.setState({
              currentStyle: newCurrentStyle,
              currentVelocity: newCurrentVelocity,
              lastIdealStyle: newLastIdealStyle,
              lastIdealVelocity: newLastIdealVelocity
            });
            _this.unreadPropStyle = null;
            _this.startAnimationIfNecessary();
          });
        };
        this.state = this.defaultState();
      }
      Motion2.prototype.defaultState = function defaultState() {
        var _props = this.props;
        var defaultStyle = _props.defaultStyle;
        var style = _props.style;
        var currentStyle = defaultStyle || _stripStyle2["default"](style);
        var currentVelocity = _mapToZero2["default"](currentStyle);
        return {
          currentStyle,
          currentVelocity,
          lastIdealStyle: currentStyle,
          lastIdealVelocity: currentVelocity
        };
      };
      Motion2.prototype.componentDidMount = function componentDidMount() {
        this.prevTime = _performanceNow2["default"]();
        this.startAnimationIfNecessary();
      };
      Motion2.prototype.componentWillReceiveProps = function componentWillReceiveProps2(props) {
        if (this.unreadPropStyle != null) {
          this.clearUnreadPropStyle(this.unreadPropStyle);
        }
        this.unreadPropStyle = props.style;
        if (this.animationID == null) {
          this.prevTime = _performanceNow2["default"]();
          this.startAnimationIfNecessary();
        }
      };
      Motion2.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.animationID != null) {
          _raf2["default"].cancel(this.animationID);
          this.animationID = null;
        }
      };
      Motion2.prototype.render = function render() {
        var renderedChildren = this.props.children(this.state.currentStyle);
        return renderedChildren && _react2["default"].Children.only(renderedChildren);
      };
      return Motion2;
    }(_react2["default"].Component);
    exports["default"] = Motion;
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/StaggeredMotion.js
var require_StaggeredMotion = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/StaggeredMotion.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass3 = function() {
      function defineProperties(target, props) {
        for (var i2 = 0; i2 < props.length; i2++) {
          var descriptor = props[i2];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits3(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _mapToZero = require_mapToZero();
    var _mapToZero2 = _interopRequireDefault(_mapToZero);
    var _stripStyle = require_stripStyle();
    var _stripStyle2 = _interopRequireDefault(_stripStyle);
    var _stepper3 = require_stepper();
    var _stepper4 = _interopRequireDefault(_stepper3);
    var _performanceNow = require_performance_now();
    var _performanceNow2 = _interopRequireDefault(_performanceNow);
    var _raf = require_raf();
    var _raf2 = _interopRequireDefault(_raf);
    var _shouldStopAnimation = require_shouldStopAnimation();
    var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var msPerFrame = 1e3 / 60;
    function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
      for (var i2 = 0; i2 < currentStyles.length; i2++) {
        if (!_shouldStopAnimation2["default"](currentStyles[i2], styles[i2], currentVelocities[i2])) {
          return false;
        }
      }
      return true;
    }
    var StaggeredMotion = function(_React$Component) {
      _inherits3(StaggeredMotion2, _React$Component);
      _createClass3(StaggeredMotion2, null, [{
        key: "propTypes",
        value: {
          // TOOD: warn against putting a config in here
          defaultStyles: _propTypes2["default"].arrayOf(_propTypes2["default"].objectOf(_propTypes2["default"].number)),
          styles: _propTypes2["default"].func.isRequired,
          children: _propTypes2["default"].func.isRequired
        },
        enumerable: true
      }]);
      function StaggeredMotion2(props) {
        var _this = this;
        _classCallCheck3(this, StaggeredMotion2);
        _React$Component.call(this, props);
        this.animationID = null;
        this.prevTime = 0;
        this.accumulatedTime = 0;
        this.unreadPropStyles = null;
        this.clearUnreadPropStyle = function(unreadPropStyles) {
          var _state = _this.state;
          var currentStyles = _state.currentStyles;
          var currentVelocities = _state.currentVelocities;
          var lastIdealStyles = _state.lastIdealStyles;
          var lastIdealVelocities = _state.lastIdealVelocities;
          var someDirty = false;
          for (var i2 = 0; i2 < unreadPropStyles.length; i2++) {
            var unreadPropStyle = unreadPropStyles[i2];
            var dirty = false;
            for (var key in unreadPropStyle) {
              if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
                continue;
              }
              var styleValue = unreadPropStyle[key];
              if (typeof styleValue === "number") {
                if (!dirty) {
                  dirty = true;
                  someDirty = true;
                  currentStyles[i2] = _extends2({}, currentStyles[i2]);
                  currentVelocities[i2] = _extends2({}, currentVelocities[i2]);
                  lastIdealStyles[i2] = _extends2({}, lastIdealStyles[i2]);
                  lastIdealVelocities[i2] = _extends2({}, lastIdealVelocities[i2]);
                }
                currentStyles[i2][key] = styleValue;
                currentVelocities[i2][key] = 0;
                lastIdealStyles[i2][key] = styleValue;
                lastIdealVelocities[i2][key] = 0;
              }
            }
          }
          if (someDirty) {
            _this.setState({ currentStyles, currentVelocities, lastIdealStyles, lastIdealVelocities });
          }
        };
        this.startAnimationIfNecessary = function() {
          _this.animationID = _raf2["default"](function(timestamp) {
            var destStyles = _this.props.styles(_this.state.lastIdealStyles);
            if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
              _this.animationID = null;
              _this.accumulatedTime = 0;
              return;
            }
            var currentTime = timestamp || _performanceNow2["default"]();
            var timeDelta = currentTime - _this.prevTime;
            _this.prevTime = currentTime;
            _this.accumulatedTime = _this.accumulatedTime + timeDelta;
            if (_this.accumulatedTime > msPerFrame * 10) {
              _this.accumulatedTime = 0;
            }
            if (_this.accumulatedTime === 0) {
              _this.animationID = null;
              _this.startAnimationIfNecessary();
              return;
            }
            var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
            var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
            var newLastIdealStyles = [];
            var newLastIdealVelocities = [];
            var newCurrentStyles = [];
            var newCurrentVelocities = [];
            for (var i2 = 0; i2 < destStyles.length; i2++) {
              var destStyle = destStyles[i2];
              var newCurrentStyle = {};
              var newCurrentVelocity = {};
              var newLastIdealStyle = {};
              var newLastIdealVelocity = {};
              for (var key in destStyle) {
                if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
                  continue;
                }
                var styleValue = destStyle[key];
                if (typeof styleValue === "number") {
                  newCurrentStyle[key] = styleValue;
                  newCurrentVelocity[key] = 0;
                  newLastIdealStyle[key] = styleValue;
                  newLastIdealVelocity[key] = 0;
                } else {
                  var newLastIdealStyleValue = _this.state.lastIdealStyles[i2][key];
                  var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i2][key];
                  for (var j = 0; j < framesToCatchUp; j++) {
                    var _stepper = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                    newLastIdealStyleValue = _stepper[0];
                    newLastIdealVelocityValue = _stepper[1];
                  }
                  var _stepper2 = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                  var nextIdealX = _stepper2[0];
                  var nextIdealV = _stepper2[1];
                  newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
                  newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
                  newLastIdealStyle[key] = newLastIdealStyleValue;
                  newLastIdealVelocity[key] = newLastIdealVelocityValue;
                }
              }
              newCurrentStyles[i2] = newCurrentStyle;
              newCurrentVelocities[i2] = newCurrentVelocity;
              newLastIdealStyles[i2] = newLastIdealStyle;
              newLastIdealVelocities[i2] = newLastIdealVelocity;
            }
            _this.animationID = null;
            _this.accumulatedTime -= framesToCatchUp * msPerFrame;
            _this.setState({
              currentStyles: newCurrentStyles,
              currentVelocities: newCurrentVelocities,
              lastIdealStyles: newLastIdealStyles,
              lastIdealVelocities: newLastIdealVelocities
            });
            _this.unreadPropStyles = null;
            _this.startAnimationIfNecessary();
          });
        };
        this.state = this.defaultState();
      }
      StaggeredMotion2.prototype.defaultState = function defaultState() {
        var _props = this.props;
        var defaultStyles = _props.defaultStyles;
        var styles = _props.styles;
        var currentStyles = defaultStyles || styles().map(_stripStyle2["default"]);
        var currentVelocities = currentStyles.map(function(currentStyle) {
          return _mapToZero2["default"](currentStyle);
        });
        return {
          currentStyles,
          currentVelocities,
          lastIdealStyles: currentStyles,
          lastIdealVelocities: currentVelocities
        };
      };
      StaggeredMotion2.prototype.componentDidMount = function componentDidMount() {
        this.prevTime = _performanceNow2["default"]();
        this.startAnimationIfNecessary();
      };
      StaggeredMotion2.prototype.componentWillReceiveProps = function componentWillReceiveProps2(props) {
        if (this.unreadPropStyles != null) {
          this.clearUnreadPropStyle(this.unreadPropStyles);
        }
        this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
        if (this.animationID == null) {
          this.prevTime = _performanceNow2["default"]();
          this.startAnimationIfNecessary();
        }
      };
      StaggeredMotion2.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.animationID != null) {
          _raf2["default"].cancel(this.animationID);
          this.animationID = null;
        }
      };
      StaggeredMotion2.prototype.render = function render() {
        var renderedChildren = this.props.children(this.state.currentStyles);
        return renderedChildren && _react2["default"].Children.only(renderedChildren);
      };
      return StaggeredMotion2;
    }(_react2["default"].Component);
    exports["default"] = StaggeredMotion;
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/mergeDiff.js
var require_mergeDiff = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/mergeDiff.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = mergeDiff;
    function mergeDiff(prev, next, onRemove) {
      var prevKeyIndex = {};
      for (var i2 = 0; i2 < prev.length; i2++) {
        prevKeyIndex[prev[i2].key] = i2;
      }
      var nextKeyIndex = {};
      for (var i2 = 0; i2 < next.length; i2++) {
        nextKeyIndex[next[i2].key] = i2;
      }
      var ret = [];
      for (var i2 = 0; i2 < next.length; i2++) {
        ret[i2] = next[i2];
      }
      for (var i2 = 0; i2 < prev.length; i2++) {
        if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i2].key)) {
          var fill = onRemove(i2, prev[i2]);
          if (fill != null) {
            ret.push(fill);
          }
        }
      }
      return ret.sort(function(a2, b) {
        var nextOrderA = nextKeyIndex[a2.key];
        var nextOrderB = nextKeyIndex[b.key];
        var prevOrderA = prevKeyIndex[a2.key];
        var prevOrderB = prevKeyIndex[b.key];
        if (nextOrderA != null && nextOrderB != null) {
          return nextKeyIndex[a2.key] - nextKeyIndex[b.key];
        } else if (prevOrderA != null && prevOrderB != null) {
          return prevKeyIndex[a2.key] - prevKeyIndex[b.key];
        } else if (nextOrderA != null) {
          for (var i3 = 0; i3 < next.length; i3++) {
            var pivot = next[i3].key;
            if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
              continue;
            }
            if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
              return -1;
            } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
              return 1;
            }
          }
          return 1;
        }
        for (var i3 = 0; i3 < next.length; i3++) {
          var pivot = next[i3].key;
          if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
            continue;
          }
          if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
            return 1;
          } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
            return -1;
          }
        }
        return -1;
      });
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/TransitionMotion.js
var require_TransitionMotion = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/TransitionMotion.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass3 = function() {
      function defineProperties(target, props) {
        for (var i2 = 0; i2 < props.length; i2++) {
          var descriptor = props[i2];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits3(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _mapToZero = require_mapToZero();
    var _mapToZero2 = _interopRequireDefault(_mapToZero);
    var _stripStyle = require_stripStyle();
    var _stripStyle2 = _interopRequireDefault(_stripStyle);
    var _stepper3 = require_stepper();
    var _stepper4 = _interopRequireDefault(_stepper3);
    var _mergeDiff = require_mergeDiff();
    var _mergeDiff2 = _interopRequireDefault(_mergeDiff);
    var _performanceNow = require_performance_now();
    var _performanceNow2 = _interopRequireDefault(_performanceNow);
    var _raf = require_raf();
    var _raf2 = _interopRequireDefault(_raf);
    var _shouldStopAnimation = require_shouldStopAnimation();
    var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var msPerFrame = 1e3 / 60;
    function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
      var cUnreadPropStyles = unreadPropStyles;
      if (cUnreadPropStyles == null) {
        return mergedPropsStyles.map(function(mergedPropsStyle, i2) {
          return {
            key: mergedPropsStyle.key,
            data: mergedPropsStyle.data,
            style: plainStyles[i2]
          };
        });
      }
      return mergedPropsStyles.map(function(mergedPropsStyle, i2) {
        for (var j = 0; j < cUnreadPropStyles.length; j++) {
          if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
            return {
              key: cUnreadPropStyles[j].key,
              data: cUnreadPropStyles[j].data,
              style: plainStyles[i2]
            };
          }
        }
        return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i2] };
      });
    }
    function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
      if (mergedPropsStyles.length !== destStyles.length) {
        return false;
      }
      for (var i2 = 0; i2 < mergedPropsStyles.length; i2++) {
        if (mergedPropsStyles[i2].key !== destStyles[i2].key) {
          return false;
        }
      }
      for (var i2 = 0; i2 < mergedPropsStyles.length; i2++) {
        if (!_shouldStopAnimation2["default"](currentStyles[i2], destStyles[i2].style, currentVelocities[i2])) {
          return false;
        }
      }
      return true;
    }
    function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
      var newMergedPropsStyles = _mergeDiff2["default"](oldMergedPropsStyles, destStyles, function(oldIndex, oldMergedPropsStyle) {
        var leavingStyle = willLeave(oldMergedPropsStyle);
        if (leavingStyle == null) {
          didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
          return null;
        }
        if (_shouldStopAnimation2["default"](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
          didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
          return null;
        }
        return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
      });
      var newCurrentStyles = [];
      var newCurrentVelocities = [];
      var newLastIdealStyles = [];
      var newLastIdealVelocities = [];
      for (var i2 = 0; i2 < newMergedPropsStyles.length; i2++) {
        var newMergedPropsStyleCell = newMergedPropsStyles[i2];
        var foundOldIndex = null;
        for (var j = 0; j < oldMergedPropsStyles.length; j++) {
          if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
            foundOldIndex = j;
            break;
          }
        }
        if (foundOldIndex == null) {
          var plainStyle = willEnter(newMergedPropsStyleCell);
          newCurrentStyles[i2] = plainStyle;
          newLastIdealStyles[i2] = plainStyle;
          var velocity = _mapToZero2["default"](newMergedPropsStyleCell.style);
          newCurrentVelocities[i2] = velocity;
          newLastIdealVelocities[i2] = velocity;
        } else {
          newCurrentStyles[i2] = oldCurrentStyles[foundOldIndex];
          newLastIdealStyles[i2] = oldLastIdealStyles[foundOldIndex];
          newCurrentVelocities[i2] = oldCurrentVelocities[foundOldIndex];
          newLastIdealVelocities[i2] = oldLastIdealVelocities[foundOldIndex];
        }
      }
      return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
    }
    var TransitionMotion = function(_React$Component) {
      _inherits3(TransitionMotion2, _React$Component);
      _createClass3(TransitionMotion2, null, [{
        key: "propTypes",
        value: {
          defaultStyles: _propTypes2["default"].arrayOf(_propTypes2["default"].shape({
            key: _propTypes2["default"].string.isRequired,
            data: _propTypes2["default"].any,
            style: _propTypes2["default"].objectOf(_propTypes2["default"].number).isRequired
          })),
          styles: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].arrayOf(_propTypes2["default"].shape({
            key: _propTypes2["default"].string.isRequired,
            data: _propTypes2["default"].any,
            style: _propTypes2["default"].objectOf(_propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].object])).isRequired
          }))]).isRequired,
          children: _propTypes2["default"].func.isRequired,
          willEnter: _propTypes2["default"].func,
          willLeave: _propTypes2["default"].func,
          didLeave: _propTypes2["default"].func
        },
        enumerable: true
      }, {
        key: "defaultProps",
        value: {
          willEnter: function willEnter(styleThatEntered) {
            return _stripStyle2["default"](styleThatEntered.style);
          },
          // recall: returning null makes the current unmounting TransitionStyle
          // disappear immediately
          willLeave: function willLeave() {
            return null;
          },
          didLeave: function didLeave() {
          }
        },
        enumerable: true
      }]);
      function TransitionMotion2(props) {
        var _this = this;
        _classCallCheck3(this, TransitionMotion2);
        _React$Component.call(this, props);
        this.unmounting = false;
        this.animationID = null;
        this.prevTime = 0;
        this.accumulatedTime = 0;
        this.unreadPropStyles = null;
        this.clearUnreadPropStyle = function(unreadPropStyles) {
          var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
          var mergedPropsStyles = _mergeAndSync[0];
          var currentStyles = _mergeAndSync[1];
          var currentVelocities = _mergeAndSync[2];
          var lastIdealStyles = _mergeAndSync[3];
          var lastIdealVelocities = _mergeAndSync[4];
          for (var i2 = 0; i2 < unreadPropStyles.length; i2++) {
            var unreadPropStyle = unreadPropStyles[i2].style;
            var dirty = false;
            for (var key in unreadPropStyle) {
              if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
                continue;
              }
              var styleValue = unreadPropStyle[key];
              if (typeof styleValue === "number") {
                if (!dirty) {
                  dirty = true;
                  currentStyles[i2] = _extends2({}, currentStyles[i2]);
                  currentVelocities[i2] = _extends2({}, currentVelocities[i2]);
                  lastIdealStyles[i2] = _extends2({}, lastIdealStyles[i2]);
                  lastIdealVelocities[i2] = _extends2({}, lastIdealVelocities[i2]);
                  mergedPropsStyles[i2] = {
                    key: mergedPropsStyles[i2].key,
                    data: mergedPropsStyles[i2].data,
                    style: _extends2({}, mergedPropsStyles[i2].style)
                  };
                }
                currentStyles[i2][key] = styleValue;
                currentVelocities[i2][key] = 0;
                lastIdealStyles[i2][key] = styleValue;
                lastIdealVelocities[i2][key] = 0;
                mergedPropsStyles[i2].style[key] = styleValue;
              }
            }
          }
          _this.setState({
            currentStyles,
            currentVelocities,
            mergedPropsStyles,
            lastIdealStyles,
            lastIdealVelocities
          });
        };
        this.startAnimationIfNecessary = function() {
          if (_this.unmounting) {
            return;
          }
          _this.animationID = _raf2["default"](function(timestamp) {
            if (_this.unmounting) {
              return;
            }
            var propStyles = _this.props.styles;
            var destStyles = typeof propStyles === "function" ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;
            if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
              _this.animationID = null;
              _this.accumulatedTime = 0;
              return;
            }
            var currentTime = timestamp || _performanceNow2["default"]();
            var timeDelta = currentTime - _this.prevTime;
            _this.prevTime = currentTime;
            _this.accumulatedTime = _this.accumulatedTime + timeDelta;
            if (_this.accumulatedTime > msPerFrame * 10) {
              _this.accumulatedTime = 0;
            }
            if (_this.accumulatedTime === 0) {
              _this.animationID = null;
              _this.startAnimationIfNecessary();
              return;
            }
            var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
            var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
            var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
            var newMergedPropsStyles = _mergeAndSync2[0];
            var newCurrentStyles = _mergeAndSync2[1];
            var newCurrentVelocities = _mergeAndSync2[2];
            var newLastIdealStyles = _mergeAndSync2[3];
            var newLastIdealVelocities = _mergeAndSync2[4];
            for (var i2 = 0; i2 < newMergedPropsStyles.length; i2++) {
              var newMergedPropsStyle = newMergedPropsStyles[i2].style;
              var newCurrentStyle = {};
              var newCurrentVelocity = {};
              var newLastIdealStyle = {};
              var newLastIdealVelocity = {};
              for (var key in newMergedPropsStyle) {
                if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
                  continue;
                }
                var styleValue = newMergedPropsStyle[key];
                if (typeof styleValue === "number") {
                  newCurrentStyle[key] = styleValue;
                  newCurrentVelocity[key] = 0;
                  newLastIdealStyle[key] = styleValue;
                  newLastIdealVelocity[key] = 0;
                } else {
                  var newLastIdealStyleValue = newLastIdealStyles[i2][key];
                  var newLastIdealVelocityValue = newLastIdealVelocities[i2][key];
                  for (var j = 0; j < framesToCatchUp; j++) {
                    var _stepper = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                    newLastIdealStyleValue = _stepper[0];
                    newLastIdealVelocityValue = _stepper[1];
                  }
                  var _stepper2 = _stepper4["default"](msPerFrame / 1e3, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
                  var nextIdealX = _stepper2[0];
                  var nextIdealV = _stepper2[1];
                  newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
                  newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
                  newLastIdealStyle[key] = newLastIdealStyleValue;
                  newLastIdealVelocity[key] = newLastIdealVelocityValue;
                }
              }
              newLastIdealStyles[i2] = newLastIdealStyle;
              newLastIdealVelocities[i2] = newLastIdealVelocity;
              newCurrentStyles[i2] = newCurrentStyle;
              newCurrentVelocities[i2] = newCurrentVelocity;
            }
            _this.animationID = null;
            _this.accumulatedTime -= framesToCatchUp * msPerFrame;
            _this.setState({
              currentStyles: newCurrentStyles,
              currentVelocities: newCurrentVelocities,
              lastIdealStyles: newLastIdealStyles,
              lastIdealVelocities: newLastIdealVelocities,
              mergedPropsStyles: newMergedPropsStyles
            });
            _this.unreadPropStyles = null;
            _this.startAnimationIfNecessary();
          });
        };
        this.state = this.defaultState();
      }
      TransitionMotion2.prototype.defaultState = function defaultState() {
        var _props = this.props;
        var defaultStyles = _props.defaultStyles;
        var styles = _props.styles;
        var willEnter = _props.willEnter;
        var willLeave = _props.willLeave;
        var didLeave = _props.didLeave;
        var destStyles = typeof styles === "function" ? styles(defaultStyles) : styles;
        var oldMergedPropsStyles = void 0;
        if (defaultStyles == null) {
          oldMergedPropsStyles = destStyles;
        } else {
          oldMergedPropsStyles = defaultStyles.map(function(defaultStyleCell) {
            for (var i2 = 0; i2 < destStyles.length; i2++) {
              if (destStyles[i2].key === defaultStyleCell.key) {
                return destStyles[i2];
              }
            }
            return defaultStyleCell;
          });
        }
        var oldCurrentStyles = defaultStyles == null ? destStyles.map(function(s2) {
          return _stripStyle2["default"](s2.style);
        }) : defaultStyles.map(function(s2) {
          return _stripStyle2["default"](s2.style);
        });
        var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function(s2) {
          return _mapToZero2["default"](s2.style);
        }) : defaultStyles.map(function(s2) {
          return _mapToZero2["default"](s2.style);
        });
        var _mergeAndSync3 = mergeAndSync(
          // Because this is an old-style createReactClass component, Flow doesn't
          // understand that the willEnter and willLeave props have default values
          // and will always be present.
          willEnter,
          willLeave,
          didLeave,
          oldMergedPropsStyles,
          destStyles,
          oldCurrentStyles,
          oldCurrentVelocities,
          oldCurrentStyles,
          // oldLastIdealStyles really
          oldCurrentVelocities
        );
        var mergedPropsStyles = _mergeAndSync3[0];
        var currentStyles = _mergeAndSync3[1];
        var currentVelocities = _mergeAndSync3[2];
        var lastIdealStyles = _mergeAndSync3[3];
        var lastIdealVelocities = _mergeAndSync3[4];
        return {
          currentStyles,
          currentVelocities,
          lastIdealStyles,
          lastIdealVelocities,
          mergedPropsStyles
        };
      };
      TransitionMotion2.prototype.componentDidMount = function componentDidMount() {
        this.prevTime = _performanceNow2["default"]();
        this.startAnimationIfNecessary();
      };
      TransitionMotion2.prototype.componentWillReceiveProps = function componentWillReceiveProps2(props) {
        if (this.unreadPropStyles) {
          this.clearUnreadPropStyle(this.unreadPropStyles);
        }
        var styles = props.styles;
        if (typeof styles === "function") {
          this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
        } else {
          this.unreadPropStyles = styles;
        }
        if (this.animationID == null) {
          this.prevTime = _performanceNow2["default"]();
          this.startAnimationIfNecessary();
        }
      };
      TransitionMotion2.prototype.componentWillUnmount = function componentWillUnmount() {
        this.unmounting = true;
        if (this.animationID != null) {
          _raf2["default"].cancel(this.animationID);
          this.animationID = null;
        }
      };
      TransitionMotion2.prototype.render = function render() {
        var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
        var renderedChildren = this.props.children(hydratedStyles);
        return renderedChildren && _react2["default"].Children.only(renderedChildren);
      };
      return TransitionMotion2;
    }(_react2["default"].Component);
    exports["default"] = TransitionMotion;
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/presets.js
var require_presets = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/presets.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = {
      noWobble: { stiffness: 170, damping: 26 },
      // the default, if nothing provided
      gentle: { stiffness: 120, damping: 14 },
      wobbly: { stiffness: 180, damping: 12 },
      stiff: { stiffness: 210, damping: 20 }
    };
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/spring.js
var require_spring = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/spring.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    exports["default"] = spring2;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _presets = require_presets();
    var _presets2 = _interopRequireDefault(_presets);
    var defaultConfig = _extends2({}, _presets2["default"].noWobble, {
      precision: 0.01
    });
    function spring2(val, config2) {
      return _extends2({}, defaultConfig, config2, { val });
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/reorderKeys.js
var require_reorderKeys = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/reorderKeys.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = reorderKeys;
    var hasWarned = false;
    function reorderKeys() {
      if (true) {
        if (!hasWarned) {
          hasWarned = true;
          console.error("`reorderKeys` has been removed, since it is no longer needed for TransitionMotion's new styles array API.");
        }
      }
    }
    module.exports = exports["default"];
  }
});

// node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/react-motion.js
var require_react_motion = __commonJS({
  "node_modules/@nivo/geo/node_modules/@nivo/colors/node_modules/react-motion/lib/react-motion.js"(exports) {
    "use strict";
    exports.__esModule = true;
    function _interopRequire(obj) {
      return obj && obj.__esModule ? obj["default"] : obj;
    }
    var _Motion = require_Motion();
    exports.Motion = _interopRequire(_Motion);
    var _StaggeredMotion = require_StaggeredMotion();
    exports.StaggeredMotion = _interopRequire(_StaggeredMotion);
    var _TransitionMotion = require_TransitionMotion();
    exports.TransitionMotion = _interopRequire(_TransitionMotion);
    var _spring = require_spring();
    exports.spring = _interopRequire(_spring);
    var _presets = require_presets();
    exports.presets = _interopRequire(_presets);
    var _stripStyle = require_stripStyle();
    exports.stripStyle = _interopRequire(_stripStyle);
    var _reorderKeys = require_reorderKeys();
    exports.reorderKeys = _interopRequire(_reorderKeys);
  }
});

// node_modules/lodash/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/lodash/isNumber.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var numberTag = "[object Number]";
    function isNumber2(value) {
      return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    module.exports = isNumber2;
  }
});

// node_modules/@nivo/geo/dist/nivo-geo.es.js
var import_react6 = __toESM(require_react());

// node_modules/@nivo/geo/node_modules/@nivo/core/dist/nivo-core.es.js
var import_react3 = __toESM(require_react());

// node_modules/@nivo/geo/node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_react2 = __toESM(require_react());

// node_modules/react-spring/web.js
init_extends();
init_objectWithoutPropertiesLoose();
var import_react = __toESM(require_react());
var is = {
  arr: Array.isArray,
  obj: (a2) => Object.prototype.toString.call(a2) === "[object Object]",
  fun: (a2) => typeof a2 === "function",
  str: (a2) => typeof a2 === "string",
  num: (a2) => typeof a2 === "number",
  und: (a2) => a2 === void 0,
  nul: (a2) => a2 === null,
  set: (a2) => a2 instanceof Set,
  map: (a2) => a2 instanceof Map,
  equ(a2, b) {
    if (typeof a2 !== typeof b)
      return false;
    if (is.str(a2) || is.num(a2))
      return a2 === b;
    if (is.obj(a2) && is.obj(b) && Object.keys(a2).length + Object.keys(b).length === 0)
      return true;
    let i2;
    for (i2 in a2)
      if (!(i2 in b))
        return false;
    for (i2 in b)
      if (a2[i2] !== b[i2])
        return false;
    return is.und(i2) ? a2 === b : true;
  }
};
function merge(target, lowercase) {
  if (lowercase === void 0) {
    lowercase = true;
  }
  return (object2) => (is.arr(object2) ? object2 : Object.keys(object2)).reduce((acc, element) => {
    const key = lowercase ? element[0].toLowerCase() + element.substring(1) : element;
    acc[key] = target(key);
    return acc;
  }, target);
}
function useForceUpdate() {
  const _useState = (0, import_react.useState)(false), f = _useState[1];
  const forceUpdate = (0, import_react.useCallback)(() => f((v) => !v), []);
  return forceUpdate;
}
function withDefault(value, defaultValue) {
  return is.und(value) || is.nul(value) ? defaultValue : value;
}
function toArray(a2) {
  return !is.und(a2) ? is.arr(a2) ? a2 : [a2] : [];
}
function callProp(obj) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return is.fun(obj) ? obj(...args) : obj;
}
function getForwardProps(props) {
  const to = props.to, from = props.from, config2 = props.config, onStart = props.onStart, onRest = props.onRest, onFrame = props.onFrame, children = props.children, reset = props.reset, reverse2 = props.reverse, force = props.force, immediate = props.immediate, delay = props.delay, attach = props.attach, destroyed = props.destroyed, interpolateTo2 = props.interpolateTo, ref = props.ref, lazy = props.lazy, forward = _objectWithoutPropertiesLoose(props, ["to", "from", "config", "onStart", "onRest", "onFrame", "children", "reset", "reverse", "force", "immediate", "delay", "attach", "destroyed", "interpolateTo", "ref", "lazy"]);
  return forward;
}
function interpolateTo(props) {
  const forward = getForwardProps(props);
  if (is.und(forward))
    return _extends({
      to: forward
    }, props);
  const rest = Object.keys(props).reduce((a2, k2) => !is.und(forward[k2]) ? a2 : _extends({}, a2, {
    [k2]: props[k2]
  }), {});
  return _extends({
    to: forward
  }, rest);
}
function handleRef(ref, forward) {
  if (forward) {
    if (is.fun(forward))
      forward(ref);
    else if (is.obj(forward)) {
      forward.current = ref;
    }
  }
  return ref;
}
var Animated = class {
  constructor() {
    this.payload = void 0;
    this.children = [];
  }
  getAnimatedValue() {
    return this.getValue();
  }
  getPayload() {
    return this.payload || this;
  }
  attach() {
  }
  detach() {
  }
  getChildren() {
    return this.children;
  }
  addChild(child) {
    if (this.children.length === 0)
      this.attach();
    this.children.push(child);
  }
  removeChild(child) {
    const index3 = this.children.indexOf(child);
    this.children.splice(index3, 1);
    if (this.children.length === 0)
      this.detach();
  }
};
var AnimatedArray = class extends Animated {
  constructor() {
    super(...arguments);
    this.payload = [];
    this.attach = () => this.payload.forEach((p) => p instanceof Animated && p.addChild(this));
    this.detach = () => this.payload.forEach((p) => p instanceof Animated && p.removeChild(this));
  }
};
var AnimatedObject = class extends Animated {
  constructor() {
    super(...arguments);
    this.payload = {};
    this.attach = () => Object.values(this.payload).forEach((s2) => s2 instanceof Animated && s2.addChild(this));
    this.detach = () => Object.values(this.payload).forEach((s2) => s2 instanceof Animated && s2.removeChild(this));
  }
  getValue(animated) {
    if (animated === void 0) {
      animated = false;
    }
    const payload = {};
    for (const key in this.payload) {
      const value = this.payload[key];
      if (animated && !(value instanceof Animated))
        continue;
      payload[key] = value instanceof Animated ? value[animated ? "getAnimatedValue" : "getValue"]() : value;
    }
    return payload;
  }
  getAnimatedValue() {
    return this.getValue(true);
  }
};
var applyAnimatedValues;
function injectApplyAnimatedValues(fn, transform) {
  applyAnimatedValues = {
    fn,
    transform
  };
}
var colorNames;
function injectColorNames(names) {
  colorNames = names;
}
var requestFrame = (cb) => typeof window !== "undefined" ? window.requestAnimationFrame(cb) : -1;
var cancelFrame = (id) => {
  typeof window !== "undefined" && window.cancelAnimationFrame(id);
};
function injectFrame(raf, caf) {
  requestFrame = raf;
  cancelFrame = caf;
}
var interpolation;
function injectStringInterpolator(fn) {
  interpolation = fn;
}
var now = () => Date.now();
function injectNow(nowFn) {
  now = nowFn;
}
var defaultElement;
function injectDefaultElement(el) {
  defaultElement = el;
}
var animatedApi = (node) => node.current;
function injectAnimatedApi(fn) {
  animatedApi = fn;
}
var createAnimatedStyle;
function injectCreateAnimatedStyle(factory) {
  createAnimatedStyle = factory;
}
var manualFrameloop;
function injectManualFrameloop(callback) {
  manualFrameloop = callback;
}
var Globals = Object.freeze({
  get applyAnimatedValues() {
    return applyAnimatedValues;
  },
  injectApplyAnimatedValues,
  get colorNames() {
    return colorNames;
  },
  injectColorNames,
  get requestFrame() {
    return requestFrame;
  },
  get cancelFrame() {
    return cancelFrame;
  },
  injectFrame,
  get interpolation() {
    return interpolation;
  },
  injectStringInterpolator,
  get now() {
    return now;
  },
  injectNow,
  get defaultElement() {
    return defaultElement;
  },
  injectDefaultElement,
  get animatedApi() {
    return animatedApi;
  },
  injectAnimatedApi,
  get createAnimatedStyle() {
    return createAnimatedStyle;
  },
  injectCreateAnimatedStyle,
  get manualFrameloop() {
    return manualFrameloop;
  },
  injectManualFrameloop
});
var AnimatedProps = class extends AnimatedObject {
  constructor(props, callback) {
    super();
    this.update = void 0;
    this.payload = !props.style ? props : _extends({}, props, {
      style: createAnimatedStyle(props.style)
    });
    this.update = callback;
    this.attach();
  }
};
var isFunctionComponent = (val) => is.fun(val) && !(val.prototype instanceof import_react.default.Component);
var createAnimatedComponent = (Component2) => {
  const AnimatedComponent = (0, import_react.forwardRef)((props, ref) => {
    const forceUpdate = useForceUpdate();
    const mounted = (0, import_react.useRef)(true);
    const propsAnimated = (0, import_react.useRef)(null);
    const node = (0, import_react.useRef)(null);
    const attachProps = (0, import_react.useCallback)((props2) => {
      const oldPropsAnimated = propsAnimated.current;
      const callback = () => {
        let didUpdate = false;
        if (node.current) {
          didUpdate = applyAnimatedValues.fn(node.current, propsAnimated.current.getAnimatedValue());
        }
        if (!node.current || didUpdate === false) {
          forceUpdate();
        }
      };
      propsAnimated.current = new AnimatedProps(props2, callback);
      oldPropsAnimated && oldPropsAnimated.detach();
    }, []);
    (0, import_react.useEffect)(() => () => {
      mounted.current = false;
      propsAnimated.current && propsAnimated.current.detach();
    }, []);
    (0, import_react.useImperativeHandle)(ref, () => animatedApi(node, mounted, forceUpdate));
    attachProps(props);
    const _getValue = propsAnimated.current.getValue(), scrollTop = _getValue.scrollTop, scrollLeft = _getValue.scrollLeft, animatedProps = _objectWithoutPropertiesLoose(_getValue, ["scrollTop", "scrollLeft"]);
    const refFn = isFunctionComponent(Component2) ? void 0 : (childRef) => node.current = handleRef(childRef, ref);
    return import_react.default.createElement(Component2, _extends({}, animatedProps, {
      ref: refFn
    }));
  });
  return AnimatedComponent;
};
var active = false;
var controllers = /* @__PURE__ */ new Set();
var update = () => {
  if (!active)
    return false;
  let time2 = now();
  for (let controller of controllers) {
    let isActive = false;
    for (let configIdx = 0; configIdx < controller.configs.length; configIdx++) {
      let config2 = controller.configs[configIdx];
      let endOfAnimation, lastTime;
      for (let valIdx = 0; valIdx < config2.animatedValues.length; valIdx++) {
        let animation = config2.animatedValues[valIdx];
        if (animation.done)
          continue;
        let from = config2.fromValues[valIdx];
        let to = config2.toValues[valIdx];
        let position = animation.lastPosition;
        let isAnimated = to instanceof Animated;
        let velocity = Array.isArray(config2.initialVelocity) ? config2.initialVelocity[valIdx] : config2.initialVelocity;
        if (isAnimated)
          to = to.getValue();
        if (config2.immediate) {
          animation.setValue(to);
          animation.done = true;
          continue;
        }
        if (typeof from === "string" || typeof to === "string") {
          animation.setValue(to);
          animation.done = true;
          continue;
        }
        if (config2.duration !== void 0) {
          position = from + config2.easing((time2 - animation.startTime) / config2.duration) * (to - from);
          endOfAnimation = time2 >= animation.startTime + config2.duration;
        } else if (config2.decay) {
          position = from + velocity / (1 - 0.998) * (1 - Math.exp(-(1 - 0.998) * (time2 - animation.startTime)));
          endOfAnimation = Math.abs(animation.lastPosition - position) < 0.1;
          if (endOfAnimation)
            to = position;
        } else {
          lastTime = animation.lastTime !== void 0 ? animation.lastTime : time2;
          velocity = animation.lastVelocity !== void 0 ? animation.lastVelocity : config2.initialVelocity;
          if (time2 > lastTime + 64)
            lastTime = time2;
          let numSteps = Math.floor(time2 - lastTime);
          for (let i2 = 0; i2 < numSteps; ++i2) {
            let force = -config2.tension * (position - to);
            let damping = -config2.friction * velocity;
            let acceleration = (force + damping) / config2.mass;
            velocity = velocity + acceleration * 1 / 1e3;
            position = position + velocity * 1 / 1e3;
          }
          let isOvershooting = config2.clamp && config2.tension !== 0 ? from < to ? position > to : position < to : false;
          let isVelocity = Math.abs(velocity) <= config2.precision;
          let isDisplacement = config2.tension !== 0 ? Math.abs(to - position) <= config2.precision : true;
          endOfAnimation = isOvershooting || isVelocity && isDisplacement;
          animation.lastVelocity = velocity;
          animation.lastTime = time2;
        }
        if (isAnimated && !config2.toValues[valIdx].done)
          endOfAnimation = false;
        if (endOfAnimation) {
          if (animation.value !== to)
            position = to;
          animation.done = true;
        } else
          isActive = true;
        animation.setValue(position);
        animation.lastPosition = position;
      }
      if (controller.props.onFrame)
        controller.values[config2.name] = config2.interpolation.getValue();
    }
    if (controller.props.onFrame)
      controller.props.onFrame(controller.values);
    if (!isActive) {
      controllers.delete(controller);
      controller.stop(true);
    }
  }
  if (controllers.size) {
    if (manualFrameloop)
      manualFrameloop();
    else
      requestFrame(update);
  } else {
    active = false;
  }
  return active;
};
var start = (controller) => {
  if (!controllers.has(controller))
    controllers.add(controller);
  if (!active) {
    active = true;
    if (manualFrameloop)
      requestFrame(manualFrameloop);
    else
      requestFrame(update);
  }
};
var stop = (controller) => {
  if (controllers.has(controller))
    controllers.delete(controller);
};
function createInterpolator(range, output, extrapolate) {
  if (typeof range === "function") {
    return range;
  }
  if (Array.isArray(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (interpolation && typeof range.output[0] === "string") {
    return interpolation(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t4) => t4);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config2.map);
  };
}
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map5) {
  let result = map5 ? map5(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i2 = 1; i2 < inputRange.length - 1; ++i2)
    if (inputRange[i2] >= input)
      break;
  return i2 - 1;
}
var AnimatedInterpolation = class _AnimatedInterpolation extends AnimatedArray {
  constructor(parents, range, output, extrapolate) {
    super();
    this.calc = void 0;
    this.payload = parents instanceof AnimatedArray && !(parents instanceof _AnimatedInterpolation) ? parents.getPayload() : Array.isArray(parents) ? parents : [parents];
    this.calc = createInterpolator(range, output, extrapolate);
  }
  getValue() {
    return this.calc(...this.payload.map((value) => value.getValue()));
  }
  updateConfig(range, output, extrapolate) {
    this.calc = createInterpolator(range, output, extrapolate);
  }
  interpolate(range, output, extrapolate) {
    return new _AnimatedInterpolation(this, range, output, extrapolate);
  }
};
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
function addAnimatedStyles(node, styles) {
  if ("update" in node) {
    styles.add(node);
  } else {
    node.getChildren().forEach((child) => addAnimatedStyles(child, styles));
  }
}
var AnimatedValue = class extends Animated {
  constructor(_value) {
    var _this;
    super();
    _this = this;
    this.animatedStyles = /* @__PURE__ */ new Set();
    this.value = void 0;
    this.startPosition = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.startTime = void 0;
    this.lastTime = void 0;
    this.done = false;
    this.setValue = function(value, flush) {
      if (flush === void 0) {
        flush = true;
      }
      _this.value = value;
      if (flush)
        _this.flush();
    };
    this.value = _value;
    this.startPosition = _value;
    this.lastPosition = _value;
  }
  flush() {
    if (this.animatedStyles.size === 0) {
      addAnimatedStyles(this, this.animatedStyles);
    }
    this.animatedStyles.forEach((animatedStyle) => animatedStyle.update());
  }
  clearStyles() {
    this.animatedStyles.clear();
  }
  getValue() {
    return this.value;
  }
  interpolate(range, output, extrapolate) {
    return new AnimatedInterpolation(this, range, output, extrapolate);
  }
};
var AnimatedValueArray = class extends AnimatedArray {
  constructor(values) {
    super();
    this.payload = values.map((n2) => new AnimatedValue(n2));
  }
  setValue(value, flush) {
    if (flush === void 0) {
      flush = true;
    }
    if (Array.isArray(value)) {
      if (value.length === this.payload.length) {
        value.forEach((v, i2) => this.payload[i2].setValue(v, flush));
      }
    } else {
      this.payload.forEach((p) => p.setValue(value, flush));
    }
  }
  getValue() {
    return this.payload.map((v) => v.getValue());
  }
  interpolate(range, output) {
    return new AnimatedInterpolation(this, range, output);
  }
};
var G = 0;
var Controller = class {
  constructor() {
    this.id = void 0;
    this.idle = true;
    this.hasChanged = false;
    this.guid = 0;
    this.local = 0;
    this.props = {};
    this.merged = {};
    this.animations = {};
    this.interpolations = {};
    this.values = {};
    this.configs = [];
    this.listeners = [];
    this.queue = [];
    this.localQueue = void 0;
    this.getValues = () => this.interpolations;
    this.id = G++;
  }
  /** update(props)
   *  This function filters input props and creates an array of tasks which are executed in .start()
   *  Each task is allowed to carry a delay, which means it can execute asnychroneously */
  update(args) {
    if (!args)
      return this;
    const _ref = interpolateTo(args), _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 0 : _ref$delay, to = _ref.to, props = _objectWithoutPropertiesLoose(_ref, ["delay", "to"]);
    if (is.arr(to) || is.fun(to)) {
      this.queue.push(_extends({}, props, {
        delay,
        to
      }));
    } else if (to) {
      let ops = {};
      Object.entries(to).forEach((_ref2) => {
        let k2 = _ref2[0], v = _ref2[1];
        const entry = _extends({
          to: {
            [k2]: v
          },
          delay: callProp(delay, k2)
        }, props);
        const previous = ops[entry.delay] && ops[entry.delay].to;
        ops[entry.delay] = _extends({}, ops[entry.delay], entry, {
          to: _extends({}, previous, entry.to)
        });
      });
      this.queue = Object.values(ops);
    }
    this.queue = this.queue.sort((a2, b) => a2.delay - b.delay);
    this.diff(props);
    return this;
  }
  /** start(onEnd)
   *  This function either executes a queue, if present, or starts the frameloop, which animates */
  start(onEnd) {
    if (this.queue.length) {
      this.idle = false;
      if (this.localQueue) {
        this.localQueue.forEach((_ref3) => {
          let _ref3$from = _ref3.from, from = _ref3$from === void 0 ? {} : _ref3$from, _ref3$to = _ref3.to, to = _ref3$to === void 0 ? {} : _ref3$to;
          if (is.obj(from))
            this.merged = _extends({}, from, this.merged);
          if (is.obj(to))
            this.merged = _extends({}, this.merged, to);
        });
      }
      const local = this.local = ++this.guid;
      const queue = this.localQueue = this.queue;
      this.queue = [];
      queue.forEach((_ref4, index3) => {
        let delay = _ref4.delay, props = _objectWithoutPropertiesLoose(_ref4, ["delay"]);
        const cb = (finished) => {
          if (index3 === queue.length - 1 && local === this.guid && finished) {
            this.idle = true;
            if (this.props.onRest)
              this.props.onRest(this.merged);
          }
          if (onEnd)
            onEnd();
        };
        let async = is.arr(props.to) || is.fun(props.to);
        if (delay) {
          setTimeout(() => {
            if (local === this.guid) {
              if (async)
                this.runAsync(props, cb);
              else
                this.diff(props).start(cb);
            }
          }, delay);
        } else if (async)
          this.runAsync(props, cb);
        else
          this.diff(props).start(cb);
      });
    } else {
      if (is.fun(onEnd))
        this.listeners.push(onEnd);
      if (this.props.onStart)
        this.props.onStart();
      start(this);
    }
    return this;
  }
  stop(finished) {
    this.listeners.forEach((onEnd) => onEnd(finished));
    this.listeners = [];
    return this;
  }
  /** Pause sets onEnd listeners free, but also removes the controller from the frameloop */
  pause(finished) {
    this.stop(true);
    if (finished)
      stop(this);
    return this;
  }
  runAsync(_ref5, onEnd) {
    var _this = this;
    let delay = _ref5.delay, props = _objectWithoutPropertiesLoose(_ref5, ["delay"]);
    const local = this.local;
    let queue = Promise.resolve(void 0);
    if (is.arr(props.to)) {
      for (let i2 = 0; i2 < props.to.length; i2++) {
        const index3 = i2;
        const fresh = _extends({}, props, interpolateTo(props.to[index3]));
        if (is.arr(fresh.config))
          fresh.config = fresh.config[index3];
        queue = queue.then(() => {
          if (local === this.guid)
            return new Promise((r2) => this.diff(fresh).start(r2));
        });
      }
    } else if (is.fun(props.to)) {
      let index3 = 0;
      let last2;
      queue = queue.then(() => props.to(
        // next(props)
        (p) => {
          const fresh = _extends({}, props, interpolateTo(p));
          if (is.arr(fresh.config))
            fresh.config = fresh.config[index3];
          index3++;
          if (local === this.guid)
            return last2 = new Promise((r2) => this.diff(fresh).start(r2));
          return;
        },
        // cancel()
        function(finished) {
          if (finished === void 0) {
            finished = true;
          }
          return _this.stop(finished);
        }
      ).then(() => last2));
    }
    queue.then(onEnd);
  }
  diff(props) {
    this.props = _extends({}, this.props, props);
    let _this$props = this.props, _this$props$from = _this$props.from, from = _this$props$from === void 0 ? {} : _this$props$from, _this$props$to = _this$props.to, to = _this$props$to === void 0 ? {} : _this$props$to, _this$props$config = _this$props.config, config2 = _this$props$config === void 0 ? {} : _this$props$config, reverse2 = _this$props.reverse, attach = _this$props.attach, reset = _this$props.reset, immediate = _this$props.immediate;
    if (reverse2) {
      var _ref6 = [to, from];
      from = _ref6[0];
      to = _ref6[1];
    }
    this.merged = _extends({}, from, this.merged, to);
    this.hasChanged = false;
    let target = attach && attach(this);
    this.animations = Object.entries(this.merged).reduce((acc, _ref7) => {
      let name = _ref7[0], value = _ref7[1];
      let entry = acc[name] || {};
      const isNumber2 = is.num(value);
      const isString2 = is.str(value) && !value.startsWith("#") && !/\d/.test(value) && !colorNames[value];
      const isArray2 = is.arr(value);
      const isInterpolation = !isNumber2 && !isArray2 && !isString2;
      let fromValue = !is.und(from[name]) ? from[name] : value;
      let toValue = isNumber2 || isArray2 ? value : isString2 ? value : 1;
      let toConfig = callProp(config2, name);
      if (target)
        toValue = target.animations[name].parent;
      let parent = entry.parent, interpolation$$1 = entry.interpolation, toValues = toArray(target ? toValue.getPayload() : toValue), animatedValues;
      let newValue = value;
      if (isInterpolation)
        newValue = interpolation({
          range: [0, 1],
          output: [value, value]
        })(1);
      let currentValue = interpolation$$1 && interpolation$$1.getValue();
      const isFirst = is.und(parent);
      const isActive = !isFirst && entry.animatedValues.some((v) => !v.done);
      const currentValueDiffersFromGoal = !is.equ(newValue, currentValue);
      const hasNewGoal = !is.equ(newValue, entry.previous);
      const hasNewConfig = !is.equ(toConfig, entry.config);
      if (reset || hasNewGoal && currentValueDiffersFromGoal || hasNewConfig) {
        if (isNumber2 || isString2)
          parent = interpolation$$1 = entry.parent || new AnimatedValue(fromValue);
        else if (isArray2)
          parent = interpolation$$1 = entry.parent || new AnimatedValueArray(fromValue);
        else if (isInterpolation) {
          let prev = entry.interpolation && entry.interpolation.calc(entry.parent.value);
          prev = prev !== void 0 && !reset ? prev : fromValue;
          if (entry.parent) {
            parent = entry.parent;
            parent.setValue(0, false);
          } else
            parent = new AnimatedValue(0);
          const range = {
            output: [prev, value]
          };
          if (entry.interpolation) {
            interpolation$$1 = entry.interpolation;
            entry.interpolation.updateConfig(range);
          } else
            interpolation$$1 = parent.interpolate(range);
        }
        toValues = toArray(target ? toValue.getPayload() : toValue);
        animatedValues = toArray(parent.getPayload());
        if (reset && !isInterpolation)
          parent.setValue(fromValue, false);
        this.hasChanged = true;
        animatedValues.forEach((value2) => {
          value2.startPosition = value2.value;
          value2.lastPosition = value2.value;
          value2.lastVelocity = isActive ? value2.lastVelocity : void 0;
          value2.lastTime = isActive ? value2.lastTime : void 0;
          value2.startTime = now();
          value2.done = false;
          value2.animatedStyles.clear();
        });
        if (callProp(immediate, name)) {
          parent.setValue(isInterpolation ? toValue : value, false);
        }
        return _extends({}, acc, {
          [name]: _extends({}, entry, {
            name,
            parent,
            interpolation: interpolation$$1,
            animatedValues,
            toValues,
            previous: newValue,
            config: toConfig,
            fromValues: toArray(parent.getValue()),
            immediate: callProp(immediate, name),
            initialVelocity: withDefault(toConfig.velocity, 0),
            clamp: withDefault(toConfig.clamp, false),
            precision: withDefault(toConfig.precision, 0.01),
            tension: withDefault(toConfig.tension, 170),
            friction: withDefault(toConfig.friction, 26),
            mass: withDefault(toConfig.mass, 1),
            duration: toConfig.duration,
            easing: withDefault(toConfig.easing, (t4) => t4),
            decay: toConfig.decay
          })
        });
      } else {
        if (!currentValueDiffersFromGoal) {
          if (isInterpolation) {
            parent.setValue(1, false);
            interpolation$$1.updateConfig({
              output: [newValue, newValue]
            });
          }
          parent.done = true;
          this.hasChanged = true;
          return _extends({}, acc, {
            [name]: _extends({}, acc[name], {
              previous: newValue
            })
          });
        }
        return acc;
      }
    }, this.animations);
    if (this.hasChanged) {
      this.configs = Object.values(this.animations);
      this.values = {};
      this.interpolations = {};
      for (let key in this.animations) {
        this.interpolations[key] = this.animations[key].interpolation;
        this.values[key] = this.animations[key].interpolation.getValue();
      }
    }
    return this;
  }
  destroy() {
    this.stop();
    this.props = {};
    this.merged = {};
    this.animations = {};
    this.interpolations = {};
    this.values = {};
    this.configs = [];
    this.local = 0;
  }
};
var useSprings = (length, props) => {
  const mounted = (0, import_react.useRef)(false);
  const ctrl = (0, import_react.useRef)();
  const isFn = is.fun(props);
  const _useMemo = (0, import_react.useMemo)(() => {
    if (ctrl.current) {
      ctrl.current.map((c3) => c3.destroy());
      ctrl.current = void 0;
    }
    let ref2;
    return [new Array(length).fill().map((_2, i2) => {
      const ctrl2 = new Controller();
      const newProps = isFn ? callProp(props, i2, ctrl2) : props[i2];
      if (i2 === 0)
        ref2 = newProps.ref;
      ctrl2.update(newProps);
      if (!ref2)
        ctrl2.start();
      return ctrl2;
    }), ref2];
  }, [length]), controllers2 = _useMemo[0], ref = _useMemo[1];
  ctrl.current = controllers2;
  const api = (0, import_react.useImperativeHandle)(ref, () => ({
    start: () => Promise.all(ctrl.current.map((c3) => new Promise((r2) => c3.start(r2)))),
    stop: (finished) => ctrl.current.forEach((c3) => c3.stop(finished)),
    get controllers() {
      return ctrl.current;
    }
  }));
  const updateCtrl = (0, import_react.useMemo)(() => (updateProps) => ctrl.current.map((c3, i2) => {
    c3.update(isFn ? callProp(updateProps, i2, c3) : updateProps[i2]);
    if (!ref)
      c3.start();
  }), [length]);
  (0, import_react.useEffect)(() => {
    if (mounted.current) {
      if (!isFn)
        updateCtrl(props);
    } else if (!ref)
      ctrl.current.forEach((c3) => c3.start());
  });
  (0, import_react.useEffect)(() => (mounted.current = true, () => ctrl.current.forEach((c3) => c3.destroy())), []);
  const propValues = ctrl.current.map((c3) => c3.getValues());
  return isFn ? [propValues, updateCtrl, (finished) => ctrl.current.forEach((c3) => c3.pause(finished))] : propValues;
};
var useSpring = (props) => {
  const isFn = is.fun(props);
  const _useSprings = useSprings(1, isFn ? props : [props]), result = _useSprings[0], set3 = _useSprings[1], pause = _useSprings[2];
  return isFn ? [result[0], set3, pause] : result;
};
var AnimatedStyle = class extends AnimatedObject {
  constructor(style) {
    if (style === void 0) {
      style = {};
    }
    super();
    if (style.transform && !(style.transform instanceof Animated)) {
      style = applyAnimatedValues.transform(style);
    }
    this.payload = style;
  }
};
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call() {
  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
    parts[_key] = arguments[_key];
  }
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match = hex6.exec(color2))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors.hasOwnProperty(color2))
    return colors[color2];
  if (match = rgb.exec(color2)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match = rgba.exec(color2)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    parse1(match[4])) >>> // a
    0;
  }
  if (match = hex3.exec(color2)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match = hex8.exec(color2))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color2)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      match[4] + match[4],
      // a
      16
    ) >>> 0;
  }
  if (match = hsl.exec(color2)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match = hsla.exec(color2)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | parse1(match[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p, q, t4) {
  if (t4 < 0)
    t4 += 1;
  if (t4 > 1)
    t4 -= 1;
  if (t4 < 1 / 6)
    return p + (q - p) * 6 * t4;
  if (t4 < 1 / 2)
    return q;
  if (t4 < 2 / 3)
    return p + (q - p) * (2 / 3 - t4) * 6;
  return p;
}
function hslToRgb(h, s2, l) {
  const q = l < 0.5 ? l * (1 + s2) : l + s2 - l * s2;
  const p = 2 * l - q;
  const r2 = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r2 * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r2 = (int32Color & 4278190080) >>> 24;
  let g = (int32Color & 16711680) >>> 16;
  let b = (int32Color & 65280) >>> 8;
  let a2 = (int32Color & 255) / 255;
  return `rgba(${r2}, ${g}, ${b}, ${a2})`;
}
var stringShapeRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var colorNamesRegex = new RegExp(`(${Object.keys(colors).join("|")})`, "g");
var createStringInterpolator = (config2) => {
  const outputRange = config2.output.map((rangeValue) => rangeValue.replace(colorRegex, colorToRgba)).map((rangeValue) => rangeValue.replace(colorNamesRegex, colorToRgba));
  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);
  outputRange.forEach((value) => {
    value.match(stringShapeRegex).forEach((number2, i2) => outputRanges[i2].push(+number2));
  });
  const interpolations = outputRange[0].match(stringShapeRegex).map((_value, i2) => createInterpolator(_extends({}, config2, {
    output: outputRanges[i2]
  })));
  return (input) => {
    let i2 = 0;
    return outputRange[0].replace(stringShapeRegex, () => interpolations[i2++](input)).replace(/rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi, (_2, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`);
  };
};
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix) => acc[prefixKey(prefix, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
function dangerousStyleValue(name, value, isCustomProperty) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
injectCreateAnimatedStyle((style) => new AnimatedStyle(style));
injectDefaultElement("div");
injectStringInterpolator(createStringInterpolator);
injectColorNames(colors);
injectApplyAnimatedValues((instance, props) => {
  if (instance.nodeType && instance.setAttribute !== void 0) {
    const style = props.style, children = props.children, scrollTop = props.scrollTop, scrollLeft = props.scrollLeft, attributes = _objectWithoutPropertiesLoose(props, ["style", "children", "scrollTop", "scrollLeft"]);
    const filter2 = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    if (scrollTop !== void 0)
      instance.scrollTop = scrollTop;
    if (scrollLeft !== void 0)
      instance.scrollLeft = scrollLeft;
    if (children !== void 0)
      instance.textContent = children;
    for (let styleName in style) {
      if (!style.hasOwnProperty(styleName))
        continue;
      var isCustomProperty = styleName.indexOf("--") === 0;
      var styleValue = dangerousStyleValue(styleName, style[styleName], isCustomProperty);
      if (styleName === "float")
        styleName = "cssFloat";
      if (isCustomProperty)
        instance.style.setProperty(styleName, styleValue);
      else
        instance.style[styleName] = styleValue;
    }
    for (let name in attributes) {
      const dashCase = filter2 ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n2) => "-" + n2.toLowerCase()));
      if (typeof instance.getAttribute(dashCase) !== "undefined")
        instance.setAttribute(dashCase, attributes[name]);
    }
    return;
  } else
    return false;
}, (style) => style);
var domElements = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var apply = merge(createAnimatedComponent, false);
var extendedAnimated = apply(domElements);

// node_modules/@nivo/geo/node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_prop_types = __toESM(require_prop_types());
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly)
      symbols2 = symbols2.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(n2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
var TOOLTIP_OFFSET = 14;
var tooltipStyle = {
  pointerEvents: "none",
  position: "absolute",
  zIndex: 10,
  top: 0,
  left: 0
};
var TooltipWrapper = function TooltipWrapper2(_ref) {
  var position = _ref.position, anchor = _ref.anchor, children = _ref.children;
  var theme = useTheme();
  var _useMotionConfig = useMotionConfig(), animate = _useMotionConfig.animate, springConfig = _useMotionConfig.config;
  var _useMeasure = useMeasure(), _useMeasure2 = _slicedToArray(_useMeasure, 2), measureRef = _useMeasure2[0], bounds = _useMeasure2[1];
  var previousPosition = (0, import_react2.useRef)(false);
  var to = void 0;
  var immediate = false;
  var hasDimension = bounds.width > 0 && bounds.height > 0;
  if (hasDimension) {
    var x2 = Math.round(position[0]);
    var y3 = Math.round(position[1]);
    if (anchor === "top") {
      x2 -= bounds.width / 2;
      y3 -= bounds.height + TOOLTIP_OFFSET;
    } else if (anchor === "right") {
      x2 += TOOLTIP_OFFSET;
      y3 -= bounds.height / 2;
    } else if (anchor === "bottom") {
      x2 -= bounds.width / 2;
      y3 += TOOLTIP_OFFSET;
    } else if (anchor === "left") {
      x2 -= bounds.width + TOOLTIP_OFFSET;
      y3 -= bounds.height / 2;
    } else if (anchor === "center") {
      x2 -= bounds.width / 2;
      y3 -= bounds.height / 2;
    }
    to = {
      transform: "translate(".concat(x2, "px, ").concat(y3, "px)")
    };
    if (!previousPosition.current) {
      immediate = true;
    }
    previousPosition.current = [x2, y3];
  }
  var animatedProps = useSpring({
    to,
    config: springConfig,
    immediate: !animate || immediate
  });
  var style = _objectSpread2(_objectSpread2(_objectSpread2({}, tooltipStyle), theme.tooltip), {}, {
    transform: animatedProps.transform,
    opacity: animatedProps.transform ? 1 : 0
  });
  return import_react2.default.createElement(extendedAnimated.div, {
    ref: measureRef,
    style
  }, children);
};
TooltipWrapper.defaultProps = {
  anchor: "top"
};
var TooltipWrapper$1 = (0, import_react2.memo)(TooltipWrapper);
var Chip = (0, import_react2.memo)(function(_ref) {
  var size = _ref.size, color2 = _ref.color, style = _ref.style;
  return import_react2.default.createElement("span", {
    style: _objectSpread2({
      display: "block",
      width: size,
      height: size,
      background: color2
    }, style)
  });
});
Chip.propTypes = {
  size: import_prop_types.default.number.isRequired,
  color: import_prop_types.default.string.isRequired,
  style: import_prop_types.default.object.isRequired
};
Chip.defaultProps = {
  size: 12,
  style: {}
};
Chip.displayName = "Chip";
var BasicTooltip = (0, import_react2.memo)(function(_ref) {
  var id = _ref.id, _value = _ref.value, format2 = _ref.format, enableChip = _ref.enableChip, color2 = _ref.color, renderContent = _ref.renderContent;
  var theme = useTheme();
  var formatValue = useValueFormatter(format2);
  var content;
  if (typeof renderContent === "function") {
    content = renderContent();
  } else {
    var value = _value;
    if (formatValue !== void 0 && value !== void 0) {
      value = formatValue(value);
    }
    content = import_react2.default.createElement("div", {
      style: theme.tooltip.basic
    }, enableChip && import_react2.default.createElement(Chip, {
      color: color2,
      style: theme.tooltip.chip
    }), value !== void 0 ? import_react2.default.createElement("span", null, id, ": ", import_react2.default.createElement("strong", null, isNaN(value) ? String(value) : value)) : id);
  }
  return import_react2.default.createElement("div", {
    style: theme.tooltip.container
  }, content);
});
BasicTooltip.displayName = "BasicTooltip";
BasicTooltip.defaultProps = {
  enableChip: false
};
var tableStyle = {
  width: "100%",
  borderCollapse: "collapse"
};
var TableTooltip = (0, import_react2.memo)(function(_ref) {
  var title = _ref.title, rows = _ref.rows, renderContent = _ref.renderContent;
  var theme = useTheme();
  if (!rows.length)
    return null;
  var content;
  if (typeof renderContent === "function") {
    content = renderContent();
  } else {
    content = import_react2.default.createElement("div", null, title && title, import_react2.default.createElement("table", {
      style: _objectSpread2(_objectSpread2({}, tableStyle), theme.tooltip.table)
    }, import_react2.default.createElement("tbody", null, rows.map(function(row, i2) {
      return import_react2.default.createElement("tr", {
        key: i2
      }, row.map(function(column, j) {
        return import_react2.default.createElement("td", {
          key: j,
          style: theme.tooltip.tableCell
        }, column);
      }));
    }))));
  }
  return import_react2.default.createElement("div", {
    style: theme.tooltip.container
  }, content);
});
TableTooltip.displayName = "TableTooltip";
var crosshairTypes = ["x", "y", "top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "cross"];
var crosshairPropTypes = {
  type: import_prop_types.default.oneOf(crosshairTypes)
};
var CrosshairLine = (0, import_react2.memo)(function(_ref) {
  var x05 = _ref.x0, x12 = _ref.x1, y05 = _ref.y0, y12 = _ref.y1;
  var theme = useTheme();
  var _useMotionConfig = useMotionConfig(), animate = _useMotionConfig.animate, springConfig = _useMotionConfig.config;
  var style = (0, import_react2.useMemo)(function() {
    return _objectSpread2(_objectSpread2({}, theme.crosshair.line), {}, {
      pointerEvents: "none"
    });
  }, [theme.crosshair.line]);
  var animatedProps = useSpring({
    x1: x05,
    x2: x12,
    y1: y05,
    y2: y12,
    config: springConfig,
    immediate: !animate
  });
  return import_react2.default.createElement(extendedAnimated.line, Object.assign({}, animatedProps, {
    fill: "none",
    style
  }));
});
CrosshairLine.displayName = "CrosshairLine";
var Crosshair = (0, import_react2.memo)(function(_ref) {
  var width = _ref.width, height = _ref.height, type = _ref.type, x2 = _ref.x, y3 = _ref.y;
  var xLine;
  var yLine;
  if (type === "cross") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: 0,
      y1: height
    };
    yLine = {
      x0: 0,
      x1: width,
      y0: y3,
      y1: y3
    };
  } else if (type === "top-left") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: 0,
      y1: y3
    };
    yLine = {
      x0: 0,
      x1: x2,
      y0: y3,
      y1: y3
    };
  } else if (type === "top") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: 0,
      y1: y3
    };
  } else if (type === "top-right") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: 0,
      y1: y3
    };
    yLine = {
      x0: x2,
      x1: width,
      y0: y3,
      y1: y3
    };
  } else if (type === "right") {
    yLine = {
      x0: x2,
      x1: width,
      y0: y3,
      y1: y3
    };
  } else if (type === "bottom-right") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: y3,
      y1: height
    };
    yLine = {
      x0: x2,
      x1: width,
      y0: y3,
      y1: y3
    };
  } else if (type === "bottom") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: y3,
      y1: height
    };
  } else if (type === "bottom-left") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: y3,
      y1: height
    };
    yLine = {
      x0: 0,
      x1: x2,
      y0: y3,
      y1: y3
    };
  } else if (type === "left") {
    yLine = {
      x0: 0,
      x1: x2,
      y0: y3,
      y1: y3
    };
  } else if (type === "x") {
    xLine = {
      x0: x2,
      x1: x2,
      y0: 0,
      y1: height
    };
  } else if (type === "y") {
    yLine = {
      x0: 0,
      x1: width,
      y0: y3,
      y1: y3
    };
  }
  return import_react2.default.createElement(import_react2.default.Fragment, null, xLine && import_react2.default.createElement(CrosshairLine, {
    x0: xLine.x0,
    x1: xLine.x1,
    y0: xLine.y0,
    y1: xLine.y1
  }), yLine && import_react2.default.createElement(CrosshairLine, {
    x0: yLine.x0,
    x1: yLine.x1,
    y0: yLine.y0,
    y1: yLine.y1
  }));
});
Crosshair.displayName = "Crosshair";
Crosshair.defaultProps = {
  type: "cross"
};
var tooltipContext = (0, import_react2.createContext)();
var useTooltipHandlers = function useTooltipHandlers2(container) {
  var _useState = (0, import_react2.useState)({
    isVisible: false,
    content: null,
    position: {}
  }), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var showTooltipAt = (0, import_react2.useCallback)(function(content, _ref, anchor) {
    var _ref2 = _slicedToArray(_ref, 2), x2 = _ref2[0], y3 = _ref2[1];
    setState({
      isVisible: true,
      position: [x2, y3],
      anchor,
      content
    });
  }, [setState]);
  var showTooltipFromEvent = (0, import_react2.useCallback)(function(content, event2, anchor) {
    var bounds = container.current.getBoundingClientRect();
    var x2 = event2.clientX - bounds.left;
    var y3 = event2.clientY - bounds.top;
    if (anchor === "left" || anchor === "right") {
      if (x2 < bounds.width / 2)
        anchor = "right";
      else
        anchor = "left";
    }
    setState({
      isVisible: true,
      position: [x2, y3],
      anchor,
      content
    });
  }, [container, setState]);
  var hideTooltip = (0, import_react2.useCallback)(function() {
    setState({
      isVisible: false,
      content: null
    });
  }, [setState]);
  return {
    showTooltipAt,
    showTooltipFromEvent,
    hideTooltip,
    isTooltipVisible: state.isVisible,
    tooltipPosition: state.position,
    tooltipAnchor: state.anchor,
    tooltipContent: state.content
  };
};
var useTooltip = function useTooltip2() {
  var context = (0, import_react2.useContext)(tooltipContext);
  var memoizedContext = (0, import_react2.useMemo)(function() {
    return {
      showTooltipAt: context.showTooltipAt,
      showTooltipFromEvent: context.showTooltipFromEvent,
      hideTooltip: context.hideTooltip
    };
  }, [context.showTooltipAt, context.showTooltipFromEvent, context.hideTooltip]);
  return memoizedContext;
};

// node_modules/@nivo/geo/node_modules/@nivo/core/dist/nivo-core.es.js
var import_prop_types2 = __toESM(require_prop_types());
var import_merge2 = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_set2 = __toESM(require_set());
var import_last = __toESM(require_last());
var import_isArray = __toESM(require_isArray());
var import_isString = __toESM(require_isString());

// node_modules/@nivo/geo/node_modules/d3-array/src/ascending.js
function ascending_default(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/@nivo/geo/node_modules/d3-array/src/bisector.js
function bisector_default(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x2) => f(d) - x2;
    compare = ascendingComparator(f);
  }
  function left(a2, x2, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x2) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a2, x2, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x2) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a2, x2, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    const i2 = left(a2, x2, lo, hi - 1);
    return i2 > lo && delta(a2[i2 - 1], x2) > -delta(a2[i2], x2) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function ascendingComparator(f) {
  return (d, x2) => ascending_default(f(d), x2);
}

// node_modules/@nivo/geo/node_modules/d3-array/src/number.js
function number_default(x2) {
  return x2 === null ? NaN : +x2;
}

// node_modules/@nivo/geo/node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;
var bisect_default = bisectRight;

// node_modules/@nivo/geo/node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/@nivo/geo/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start2, stop2, count3) {
  var reverse2, i2 = -1, n2, ticks, step;
  stop2 = +stop2, start2 = +start2, count3 = +count3;
  if (start2 === stop2 && count3 > 0)
    return [start2];
  if (reverse2 = stop2 < start2)
    n2 = start2, start2 = stop2, stop2 = n2;
  if ((step = tickIncrement(start2, stop2, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop2 / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop2)
      --r1;
    ticks = new Array(n2 = r1 - r0 + 1);
    while (++i2 < n2)
      ticks[i2] = (r0 + i2) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop2 * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop2)
      --r1;
    ticks = new Array(n2 = r1 - r0 + 1);
    while (++i2 < n2)
      ticks[i2] = (r0 + i2) / step;
  }
  if (reverse2)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start2, stop2, count3) {
  var step = (stop2 - start2) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start2, stop2, count3) {
  var step0 = Math.abs(stop2 - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop2 < start2 ? -step1 : step1;
}

// node_modules/@nivo/geo/node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle2(array3, i0 = 0, i1 = array3.length) {
    let m2 = i1 - (i0 = +i0);
    while (m2) {
      const i2 = random() * m2-- | 0, t4 = array3[m2 + i0];
      array3[m2 + i0] = array3[i2 + i0];
      array3[i2 + i0] = t4;
    }
    return array3;
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/@nivo/geo/node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index3 = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
  function scale(d) {
    var key = d + "", i2 = index3.get(key);
    if (!i2) {
      if (unknown !== implicit)
        return unknown;
      index3.set(key, i2 = domain.push(d));
    }
    return range[(i2 - 1) % range.length];
  }
  scale.domain = function(_2) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index3 = /* @__PURE__ */ new Map();
    for (const value of _2) {
      const key = value + "";
      if (index3.has(key))
        continue;
      index3.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_2) {
    return arguments.length ? (range = Array.from(_2), scale) : range.slice();
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/@nivo/geo/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/@nivo/geo/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba2(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba2(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba2(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba2(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n2) {
  return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
}
function rgba2(r2, g, b, a2) {
  if (a2 <= 0)
    r2 = g = b = NaN;
  return new Rgb(r2, g, b, a2);
}
function rgbConvert(o2) {
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Rgb();
  o2 = o2.rgb();
  return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
}
function rgb2(r2, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r2, g, b, opacity) {
  this.r = +r2;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb2, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a2 = this.opacity;
  a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
  return (a2 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a2 === 1 ? ")" : ", " + a2 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h, s2, l, a2) {
  if (a2 <= 0)
    h = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s2 = NaN;
  else if (s2 <= 0)
    h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o2) {
  if (o2 instanceof Hsl)
    return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Hsl();
  if (o2 instanceof Hsl)
    return o2;
  o2 = o2.rgb();
  var r2 = o2.r / 255, g = o2.g / 255, b = o2.b / 255, min3 = Math.min(r2, g, b), max3 = Math.max(r2, g, b), h = NaN, s2 = max3 - min3, l = (max3 + min3) / 2;
  if (s2) {
    if (r2 === max3)
      h = (g - b) / s2 + (g < b) * 6;
    else if (g === max3)
      h = (b - r2) / s2 + 2;
    else
      h = (r2 - g) / s2 + 4;
    s2 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o2.opacity);
}
function hsl2(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl2, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a2 = this.opacity;
    a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
    return (a2 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a2 === 1 ? ")" : ", " + a2 + ")");
  }
}));
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/@nivo/geo/node_modules/d3-color/src/math.js
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// node_modules/@nivo/geo/node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o2) {
  if (o2 instanceof Lab)
    return new Lab(o2.l, o2.a, o2.b, o2.opacity);
  if (o2 instanceof Hcl)
    return hcl2lab(o2);
  if (!(o2 instanceof Rgb))
    o2 = rgbConvert(o2);
  var r2 = rgb2lrgb(o2.r), g = rgb2lrgb(o2.g), b = rgb2lrgb(o2.b), y3 = xyz2lab((0.2225045 * r2 + 0.7168786 * g + 0.0606169 * b) / Yn), x2, z2;
  if (r2 === g && g === b)
    x2 = z2 = y3;
  else {
    x2 = xyz2lab((0.4360747 * r2 + 0.3850649 * g + 0.1430804 * b) / Xn);
    z2 = xyz2lab((0.0139322 * r2 + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y3 - 16, 500 * (x2 - y3), 200 * (y3 - z2), o2.opacity);
}
function lab(l, a2, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b, opacity == null ? 1 : opacity);
}
function Lab(l, a2, b, opacity) {
  this.l = +l;
  this.a = +a2;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter: function(k2) {
    return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  darker: function(k2) {
    return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y3 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y3 : y3 + this.a / 500, z2 = isNaN(this.b) ? y3 : y3 - this.b / 200;
    x2 = Xn * lab2xyz(x2);
    y3 = Yn * lab2xyz(y3);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x2 - 1.6168667 * y3 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x2 + 1.9161415 * y3 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x2 - 0.2289914 * y3 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t4) {
  return t4 > t3 ? Math.pow(t4, 1 / 3) : t4 / t2 + t0;
}
function lab2xyz(t4) {
  return t4 > t1 ? t4 * t4 * t4 : t2 * (t4 - t0);
}
function lrgb2rgb(x2) {
  return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x2) {
  return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
}
function hclConvert(o2) {
  if (o2 instanceof Hcl)
    return new Hcl(o2.h, o2.c, o2.l, o2.opacity);
  if (!(o2 instanceof Lab))
    o2 = labConvert(o2);
  if (o2.a === 0 && o2.b === 0)
    return new Hcl(NaN, 0 < o2.l && o2.l < 100 ? 0 : NaN, o2.l, o2.opacity);
  var h = Math.atan2(o2.b, o2.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o2.a * o2.a + o2.b * o2.b), o2.l, o2.opacity);
}
function hcl(h, c3, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c3, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c3, l, opacity) {
  this.h = +h;
  this.c = +c3;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o2) {
  if (isNaN(o2.h))
    return new Lab(o2.l, 0, 0, o2.opacity);
  var h = o2.h * deg2rad;
  return new Lab(o2.l, Math.cos(h) * o2.c, Math.sin(h) * o2.c, o2.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter: function(k2) {
    return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
  },
  darker: function(k2) {
    return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/@nivo/geo/node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o2) {
  if (o2 instanceof Cubehelix)
    return new Cubehelix(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Rgb))
    o2 = rgbConvert(o2);
  var r2 = o2.r / 255, g = o2.g / 255, b = o2.b / 255, l = (BC_DA * b + ED * r2 - EB * g) / (BC_DA + ED - EB), bl = b - l, k2 = (E * (g - l) - C * bl) / D, s2 = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h = s2 ? Math.atan2(k2, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s2, l, o2.opacity);
}
function cubehelix(h, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb(
      255 * (l + a2 * (A * cosh2 + B * sinh2)),
      255 * (l + a2 * (C * cosh2 + D * sinh2)),
      255 * (l + a2 * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/basis.js
function basis(t14, v0, v1, v2, v3) {
  var t22 = t14 * t14, t32 = t22 * t14;
  return ((1 - 3 * t14 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t14 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n2 = values.length - 1;
  return function(t4) {
    var i2 = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n2 - 1) : Math.floor(t4 * n2), v1 = values[i2], v2 = values[i2 + 1], v0 = i2 > 0 ? values[i2 - 1] : 2 * v1 - v2, v3 = i2 < n2 - 1 ? values[i2 + 2] : 2 * v2 - v1;
    return basis((t4 - i2 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n2 = values.length;
  return function(t4) {
    var i2 = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n2), v0 = values[(i2 + n2 - 1) % n2], v1 = values[i2 % n2], v2 = values[(i2 + 1) % n2], v3 = values[(i2 + 2) % n2];
    return basis((t4 - i2 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x2) => () => x2;

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t4) {
    return a2 + t4 * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t4) {
    return Math.pow(a2 + t4 * b, y3);
  };
}
function hue(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a2) ? b : a2);
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default2(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default2(isNaN(a2) ? b : a2);
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb3(start2, end) {
    var r2 = color2((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t4) {
      start2.r = r2(t4);
      start2.g = g(t4);
      start2.b = b(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors2) {
    var n2 = colors2.length, r2 = new Array(n2), g = new Array(n2), b = new Array(n2), i2, color2;
    for (i2 = 0; i2 < n2; ++i2) {
      color2 = rgb2(colors2[i2]);
      r2[i2] = color2.r || 0;
      g[i2] = color2.g || 0;
      b[i2] = color2.b || 0;
    }
    r2 = spline(r2);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t4) {
      color2.r = r2(t4);
      color2.g = g(t4);
      color2.b = b(t4);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/number.js
function number_default2(a2, b) {
  return a2 = +a2, b = +b, function(t4) {
    return a2 * (1 - t4) + b * t4;
  };
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c3, d, e3, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c3 + b * d)
    c3 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c3 * c3 + d * d))
    c3 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c3)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e3,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i2 - 4, x: number_default2(xa, xb) }, { i: i2 - 2, x: number_default2(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i2 - 4, x: number_default2(xa, xb) }, { i: i2 - 2, x: number_default2(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t4) {
      var i2 = -1, n2 = q.length, o2;
      while (++i2 < n2)
        s2[(o2 = q[i2]).i] = o2.x(t4);
      return s2.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i2 = function(t4) {
        return [
          ux0 + t4 * dx,
          uy0 + t4 * dy,
          w0 * Math.exp(rho * t4 * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i2 = function(t4) {
        var s2 = t4 * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s2 + r0)
        ];
      };
    }
    i2.duration = S * 1e3 * rho / Math.SQRT2;
    return i2;
  }
  zoom.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/hsl.js
function hsl3(hue3) {
  return function(start2, end) {
    var h = hue3((start2 = hsl2(start2)).h, (end = hsl2(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t4) {
      start2.h = h(t4);
      start2.s = s2(t4);
      start2.l = l(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  };
}
var hsl_default = hsl3(hue);
var hslLong = hsl3(nogamma);

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/hcl.js
function hcl2(hue3) {
  return function(start2, end) {
    var h = hue3((start2 = hcl(start2)).h, (end = hcl(end)).h), c3 = nogamma(start2.c, end.c), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t4) {
      start2.h = h(t4);
      start2.c = c3(t4);
      start2.l = l(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/@nivo/geo/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix4(start2, end) {
      var h = hue3((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t4) {
        start2.h = h(t4);
        start2.s = s2(t4);
        start2.l = l(Math.pow(t4, y3));
        start2.opacity = opacity(t4);
        return start2 + "";
      };
    }
    cubehelix4.gamma = cubehelixGamma;
    return cubehelix4;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/@nivo/geo/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x2) {
  return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
}
function formatDecimalParts(x2, p) {
  if ((i2 = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0)
    return null;
  var i2, coefficient = x2.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i2 + 1)
  ];
}

// node_modules/@nivo/geo/node_modules/d3-format/src/exponent.js
function exponent_default(x2) {
  return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t4 = [], j = 0, g = grouping[0], length = 0;
    while (i2 > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t4.push(value.substring(i2 -= g, i2 + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t4.reverse().join(thousands);
  };
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/geo/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n2 = s2.length, i2 = 1, i0 = -1, i1; i2 < n2; ++i2) {
      switch (s2[i2]) {
        case ".":
          i0 = i1 = i2;
          break;
        case "0":
          if (i0 === 0)
            i0 = i2;
          i1 = i2;
          break;
        default:
          if (!+s2[i2])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d)
    return x2 + "";
  var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n2 = coefficient.length;
  return i2 === n2 ? coefficient : i2 > n2 ? coefficient + new Array(i2 - n2 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p + i2 - 1))[0];
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d)
    return x2 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/geo/node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x2, p) {
    return (x2 * 100).toFixed(p);
  },
  "b": function(x2) {
    return Math.round(x2).toString(2);
  },
  "c": function(x2) {
    return x2 + "";
  },
  "d": formatDecimal_default,
  "e": function(x2, p) {
    return x2.toExponential(p);
  },
  "f": function(x2, p) {
    return x2.toFixed(p);
  },
  "g": function(x2, p) {
    return x2.toPrecision(p);
  },
  "o": function(x2) {
    return Math.round(x2).toString(8);
  },
  "p": function(x2, p) {
    return formatRounded_default(x2 * 100, p);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x2) {
    return Math.round(x2).toString(16).toUpperCase();
  },
  "x": function(x2) {
    return Math.round(x2).toString(16);
  }
};

// node_modules/@nivo/geo/node_modules/d3-format/src/identity.js
function identity_default2(x2) {
  return x2;
}

// node_modules/@nivo/geo/node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "-" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign3 = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero || fill === "0" && align === "=")
      zero = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n2, c3;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign3 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n2 = value.length;
          while (++i2 < n2) {
            if (c3 = value.charCodeAt(i2), 48 > c3 || c3 > 57) {
              valueSuffix = (c3 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero)
        value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e3), prefix = prefixes2[8 + e3 / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/@nivo/geo/node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/@nivo/geo/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/@nivo/geo/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/@nivo/geo/node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/@nivo/geo/node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop2, count3, specifier) {
  var step = tickStep(start2, stop2, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop2));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/@nivo/geo/node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d = domain();
    return ticks_default(d[0], d[d.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop2 = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop2 < start2) {
      step = start2, start2 = stop2, stop2 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop2, count3);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop2;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}

// node_modules/@nivo/geo/node_modules/d3-scale/src/quantize.js
function quantize() {
  var x05 = 0, x12 = 1, n2 = 1, domain = [0.5], range = [0, 1], unknown;
  function scale(x2) {
    return x2 != null && x2 <= x2 ? range[bisect_default(domain, x2, 0, n2)] : unknown;
  }
  function rescale() {
    var i2 = -1;
    domain = new Array(n2);
    while (++i2 < n2)
      domain[i2] = ((i2 + 1) * x12 - (i2 - n2) * x05) / (n2 + 1);
    return scale;
  }
  scale.domain = function(_2) {
    return arguments.length ? ([x05, x12] = _2, x05 = +x05, x12 = +x12, rescale()) : [x05, x12];
  };
  scale.range = function(_2) {
    return arguments.length ? (n2 = (range = Array.from(_2)).length - 1, rescale()) : range.slice();
  };
  scale.invertExtent = function(y3) {
    var i2 = range.indexOf(y3);
    return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x05, domain[0]] : i2 >= n2 ? [domain[n2 - 1], x12] : [domain[i2 - 1], domain[i2]];
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x05, x12]).range(range).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}

// node_modules/@nivo/geo/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start2, end) {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count3(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/geo/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond.every = function(k2) {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k2) * k2);
  }, function(date, step) {
    date.setTime(+date + step * k2);
  }, function(start2, end) {
    return (end - start2) / k2;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/@nivo/geo/node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start2, end) {
  return (end - start2) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/day.js
var day = newInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var day_default = day;
var days = day.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/week.js
function weekday(i2) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i2) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k2) * k2);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k2);
  });
};
var year_default = year;
var years = year.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i2) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i2) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k2) * k2);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k2);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/@nivo/geo/node_modules/d3-time/src/ticks.js
function ticker(year3, month3, week, day3, hour3, minute3) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute3, 1, durationMinute],
    [minute3, 5, 5 * durationMinute],
    [minute3, 15, 15 * durationMinute],
    [minute3, 30, 30 * durationMinute],
    [hour3, 1, durationHour],
    [hour3, 3, 3 * durationHour],
    [hour3, 6, 6 * durationHour],
    [hour3, 12, 12 * durationHour],
    [day3, 1, durationDay],
    [day3, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month3, 1, durationMonth],
    [month3, 3, 3 * durationMonth],
    [year3, 1, durationYear]
  ];
  function ticks(start2, stop2, count3) {
    const reverse2 = stop2 < start2;
    if (reverse2)
      [start2, stop2] = [stop2, start2];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop2, count3);
    const ticks2 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse2 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start2, stop2, count3) {
    const target = Math.abs(stop2 - start2) / count3;
    const i2 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i2 === tickIntervals.length)
      return year3.every(tickStep(start2 / durationYear, stop2 / durationYear, count3));
    if (i2 === 0)
      return millisecond_default.every(Math.max(tickStep(start2, stop2, count3), 1));
    const [t4, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t4.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/interval.js
var t03 = /* @__PURE__ */ new Date();
var t13 = /* @__PURE__ */ new Date();
function newInterval2(floori, offseti, count3, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop2, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval2(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start2, end) {
      t03.setTime(+start2), t13.setTime(+end);
      floori(t03), floori(t13);
      return Math.floor(count3(t03, t13));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond2.every = function(k2) {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond2;
  return newInterval2(function(date) {
    date.setTime(Math.floor(date / k2) * k2);
  }, function(date, step) {
    date.setTime(+date + step * k2);
  }, function(start2, end) {
    return (end - start2) / k2;
  });
};
var milliseconds2 = millisecond2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = 6e4;
var durationHour2 = 36e5;
var durationDay2 = 864e5;
var durationWeek2 = 6048e5;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond2);
}, function(start2, end) {
  return (end - start2) / durationSecond2;
}, function(date) {
  return date.getUTCSeconds();
});
var seconds2 = second2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getMinutes();
});
var minutes2 = minute2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2 - date.getMinutes() * durationMinute2);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getHours();
});
var hours2 = hour2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/day.js
var day2 = newInterval2(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start2, end) {
  return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationDay2;
}, function(date) {
  return date.getDate() - 1;
});
var day_default2 = day2;
var days2 = day2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/week.js
function weekday2(i2) {
  return newInterval2(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i2) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var months2 = month2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year2.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval2(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k2) * k2);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k2);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinutes2 = utcMinute2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date) {
  return date.getUTCHours();
});
var utcHours2 = utcHour2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay2;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i2) {
  return newInterval2(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i2) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonths2 = utcMonth2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear2.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval2(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k2) * k2);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k2);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/@nivo/geo/node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y3, m2, d) {
  return { y: y3, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i2 = -1, j = 0, n2 = specifier.length, c3, pad2, format2;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i2 < n2) {
        if (specifier.charCodeAt(i2) === 37) {
          string.push(specifier.slice(j, i2));
          if ((pad2 = pads[c3 = specifier.charAt(++i2)]) != null)
            c3 = specifier.charAt(++i2);
          else
            pad2 = c3 === "e" ? " " : "0";
          if (format2 = formats2[c3])
            c3 = format2(date, pad2);
          string.push(c3);
          j = i2 + 1;
        }
      }
      string.push(specifier.slice(j, i2));
      return string.join("");
    };
  }
  function newParse(specifier, Z3) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string += "", 0), week, day3;
      if (i2 != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z3 && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day3 = week.getUTCDay();
          week = day3 > 4 || day3 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day3 = week.getDay();
          week = day3 > 4 || day3 === 0 ? monday2.ceil(week) : monday2(week);
          week = day_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day3 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i2 = 0, n2 = specifier.length, m2 = string.length, c3, parse;
    while (i2 < n2) {
      if (j >= m2)
        return -1;
      c3 = specifier.charCodeAt(i2++);
      if (c3 === 37) {
        c3 = specifier.charAt(i2++);
        parse = parses[c3 in pads ? specifier.charAt(i2++) : c3];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c3 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i2) {
    var n2 = periodRe.exec(string.slice(i2));
    return n2 ? (d.p = periodLookup[n2[0].toLowerCase()], i2 + n2[0].length) : -1;
  }
  function parseShortWeekday(d, string, i2) {
    var n2 = shortWeekdayRe.exec(string.slice(i2));
    return n2 ? (d.w = shortWeekdayLookup[n2[0].toLowerCase()], i2 + n2[0].length) : -1;
  }
  function parseWeekday(d, string, i2) {
    var n2 = weekdayRe.exec(string.slice(i2));
    return n2 ? (d.w = weekdayLookup[n2[0].toLowerCase()], i2 + n2[0].length) : -1;
  }
  function parseShortMonth(d, string, i2) {
    var n2 = shortMonthRe.exec(string.slice(i2));
    return n2 ? (d.m = shortMonthLookup[n2[0].toLowerCase()], i2 + n2[0].length) : -1;
  }
  function parseMonth(d, string, i2) {
    var n2 = monthRe.exec(string.slice(i2));
    return n2 ? (d.m = monthLookup[n2[0].toLowerCase()], i2 + n2[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i2) {
    return parseSpecifier(d, locale_dateTime, string, i2);
  }
  function parseLocaleDate(d, string, i2) {
    return parseSpecifier(d, locale_date, string, i2);
  }
  function parseLocaleTime(d, string, i2) {
    return parseSpecifier(d, locale_time, string, i2);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign3 = value < 0 ? "-" : "", string = (sign3 ? -value : value) + "", length = string.length;
  return sign3 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  var map5 = {}, i2 = -1, n2 = names.length;
  while (++i2 < n2)
    map5[names[i2].toLowerCase()] = i2;
  return map5;
}
function parseWeekdayNumberSunday(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d.w = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d.u = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.U = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberISO(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.V = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.W = +n2[0], i2 + n2[0].length) : -1;
}
function parseFullYear(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 4));
  return n2 ? (d.y = +n2[0], i2 + n2[0].length) : -1;
}
function parseYear(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i2 + n2[0].length) : -1;
}
function parseZone(d, string, i2) {
  var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i2, i2 + 6));
  return n2 ? (d.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i2 + n2[0].length) : -1;
}
function parseQuarter(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d.q = n2[0] * 3 - 3, i2 + n2[0].length) : -1;
}
function parseMonthNumber(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.m = n2[0] - 1, i2 + n2[0].length) : -1;
}
function parseDayOfMonth(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.d = +n2[0], i2 + n2[0].length) : -1;
}
function parseDayOfYear(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 3));
  return n2 ? (d.m = 0, d.d = +n2[0], i2 + n2[0].length) : -1;
}
function parseHour24(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.H = +n2[0], i2 + n2[0].length) : -1;
}
function parseMinutes(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.M = +n2[0], i2 + n2[0].length) : -1;
}
function parseSeconds(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d.S = +n2[0], i2 + n2[0].length) : -1;
}
function parseMilliseconds(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 3));
  return n2 ? (d.L = +n2[0], i2 + n2[0].length) : -1;
}
function parseMicroseconds(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 6));
  return n2 ? (d.L = Math.floor(n2[0] / 1e3), i2 + n2[0].length) : -1;
}
function parseLiteralPercent(d, string, i2) {
  var n2 = percentRe.exec(string.slice(i2, i2 + 1));
  return n2 ? i2 + n2[0].length : -1;
}
function parseUnixTimestamp(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2));
  return n2 ? (d.Q = +n2[0], i2 + n2[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i2) {
  var n2 = numberRe.exec(string.slice(i2));
  return n2 ? (d.s = +n2[0], i2 + n2[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + day_default2.count(year_default2(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day3 = d.getDay();
  return day3 === 0 ? 7 : day3;
}
function formatWeekNumberSunday(d, p) {
  return pad(sunday2.count(year_default2(d) - 1, d), p, 2);
}
function dISO(d) {
  var day3 = d.getDay();
  return day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(thursday2.count(year_default2(d), d) + (year_default2(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(monday2.count(year_default2(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day3 = d.getDay();
  d = day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z2 = d.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay_default2.count(utcYear_default2(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday2.count(utcYear_default2(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day3 = d.getUTCDay();
  return day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday2.count(utcYear_default2(d), d) + (utcYear_default2(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday2.count(utcYear_default2(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day3 = d.getUTCDay();
  d = day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/@nivo/geo/node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/@nivo/geo/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/@nivo/geo/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n2 = specifier.length / 6 | 0, colors2 = new Array(n2), i2 = 0;
  while (i2 < n2)
    colors2[i2] = "#" + specifier.slice(i2 * 6, ++i2 * 6);
  return colors2;
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/basis.js
function basis2(t14, v0, v1, v2, v3) {
  var t22 = t14 * t14, t32 = t22 * t14;
  return ((1 - 3 * t14 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t14 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default2(values) {
  var n2 = values.length - 1;
  return function(t4) {
    var i2 = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n2 - 1) : Math.floor(t4 * n2), v1 = values[i2], v2 = values[i2 + 1], v0 = i2 > 0 ? values[i2 - 1] : 2 * v1 - v2, v3 = i2 < n2 - 1 ? values[i2 + 2] : 2 * v2 - v1;
    return basis2((t4 - i2 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default2(values) {
  var n2 = values.length;
  return function(t4) {
    var i2 = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n2), v0 = values[(i2 + n2 - 1) % n2], v1 = values[i2 % n2], v2 = values[(i2 + 1) % n2], v3 = values[(i2 + 2) % n2];
    return basis2((t4 - i2 / n2) * n2, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/constant.js
function constant_default3(x2) {
  return function() {
    return x2;
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/color.js
function linear3(a2, d) {
  return function(t4) {
    return a2 + t4 * d;
  };
}
function exponential2(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t4) {
    return Math.pow(a2 + t4 * b, y3);
  };
}
function hue2(a2, b) {
  var d = b - a2;
  return d ? linear3(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default3(isNaN(a2) ? b : a2);
}
function gamma2(y3) {
  return (y3 = +y3) === 1 ? nogamma2 : function(a2, b) {
    return b - a2 ? exponential2(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma2(a2, b) {
  var d = b - a2;
  return d ? linear3(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y3) {
  var color2 = gamma2(y3);
  function rgb3(start2, end) {
    var r2 = color2((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t4) {
      start2.r = r2(t4);
      start2.g = g(t4);
      start2.b = b(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma2;
  return rgb3;
}(1);
function rgbSpline2(spline) {
  return function(colors2) {
    var n2 = colors2.length, r2 = new Array(n2), g = new Array(n2), b = new Array(n2), i2, color2;
    for (i2 = 0; i2 < n2; ++i2) {
      color2 = rgb2(colors2[i2]);
      r2[i2] = color2.r || 0;
      g[i2] = color2.g || 0;
      b[i2] = color2.b || 0;
    }
    r2 = spline(r2);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t4) {
      color2.r = r2(t4);
      color2.g = g(t4);
      color2.b = b(t4);
      return color2 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default2);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default2);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/number.js
function number_default3(a2, b) {
  return a2 = +a2, b = +b, function(t4) {
    return a2 * (1 - t4) + b * t4;
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default2(a2, b, c3, d, e3, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c3 + b * d)
    c3 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c3 * c3 + d * d))
    c3 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c3)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e3,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/parse.js
var cssNode;
var cssRoot;
var cssView;
var svgNode2;
function parseCss2(value) {
  if (value === "none")
    return identity4;
  if (!cssNode)
    cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose_default2(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}
function parseSvg2(value) {
  if (value == null)
    return identity4;
  if (!svgNode2)
    svgNode2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode2.setAttribute("transform", value);
  if (!(value = svgNode2.transform.baseVal.consolidate()))
    return identity4;
  value = value.matrix;
  return decompose_default2(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform2(parse, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i2 - 4, x: number_default3(xa, xb) }, { i: i2 - 2, x: number_default3(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default3(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default3(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i2 - 4, x: number_default3(xa, xb) }, { i: i2 - 2, x: number_default3(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t4) {
      var i2 = -1, n2 = q.length, o2;
      while (++i2 < n2)
        s2[(o2 = q[i2]).i] = o2.x(t4);
      return s2.join("");
    };
  };
}
var interpolateTransformCss2 = interpolateTransform2(parseCss2, "px, ", "px)", "deg)");
var interpolateTransformSvg2 = interpolateTransform2(parseSvg2, ", ", ")", ")");

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/hsl.js
function hsl4(hue3) {
  return function(start2, end) {
    var h = hue3((start2 = hsl2(start2)).h, (end = hsl2(end)).h), s2 = nogamma2(start2.s, end.s), l = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t4) {
      start2.h = h(t4);
      start2.s = s2(t4);
      start2.l = l(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  };
}
var hsl_default2 = hsl4(hue2);
var hslLong2 = hsl4(nogamma2);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/hcl.js
function hcl3(hue3) {
  return function(start2, end) {
    var h = hue3((start2 = hcl(start2)).h, (end = hcl(end)).h), c3 = nogamma2(start2.c, end.c), l = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
    return function(t4) {
      start2.h = h(t4);
      start2.c = c3(t4);
      start2.l = l(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  };
}
var hcl_default2 = hcl3(hue2);
var hclLong2 = hcl3(nogamma2);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix3(hue3) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix4(start2, end) {
      var h = hue3((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s2 = nogamma2(start2.s, end.s), l = nogamma2(start2.l, end.l), opacity = nogamma2(start2.opacity, end.opacity);
      return function(t4) {
        start2.h = h(t4);
        start2.s = s2(t4);
        start2.l = l(Math.pow(t4, y3));
        start2.opacity = opacity(t4);
        return start2 + "";
      };
    }
    cubehelix4.gamma = cubehelixGamma;
    return cubehelix4;
  }(1);
}
var cubehelix_default2 = cubehelix3(hue2);
var cubehelixLong2 = cubehelix3(nogamma2);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/ramp.js
function ramp_default(scheme28) {
  return rgbBasis2(scheme28[scheme28.length - 1]);
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default3 = cubehelixLong2(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong2(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong2(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();
function rainbow_default(t4) {
  if (t4 < 0 || t4 > 1)
    t4 -= Math.floor(t4);
  var ts = Math.abs(t4 - 0.5);
  c.h = 360 * t4 - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c2 = rgb2();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t4) {
  var x2;
  t4 = (0.5 - t4) * Math.PI;
  c2.r = 255 * (x2 = Math.sin(t4)) * x2;
  c2.g = 255 * (x2 = Math.sin(t4 + pi_1_3)) * x2;
  c2.b = 255 * (x2 = Math.sin(t4 + pi_2_3)) * x2;
  return c2 + "";
}

// node_modules/@nivo/geo/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range) {
  var n2 = range.length;
  return function(t4) {
    return range[Math.max(0, Math.min(n2 - 1, Math.floor(t4 * n2)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/@nivo/geo/node_modules/@nivo/core/dist/nivo-core.es.js
var import_isFunction = __toESM(require_isFunction());
var import_without = __toESM(require_without());

// node_modules/@nivo/geo/node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x2, y3) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y3);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x2, y3) {
    this._ += "L" + (this._x1 = +x2) + "," + (this._y1 = +y3);
  },
  quadraticCurveTo: function(x12, y12, x2, y3) {
    this._ += "Q" + +x12 + "," + +y12 + "," + (this._x1 = +x2) + "," + (this._y1 = +y3);
  },
  bezierCurveTo: function(x12, y12, x2, y22, x3, y3) {
    this._ += "C" + +x12 + "," + +y12 + "," + +x2 + "," + +y22 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
  },
  arcTo: function(x12, y12, x2, y22, r2) {
    x12 = +x12, y12 = +y12, x2 = +x2, y22 = +y22, r2 = +r2;
    var x05 = this._x1, y05 = this._y1, x21 = x2 - x12, y21 = y22 - y12, x01 = x05 - x12, y01 = y05 - y12, l01_2 = x01 * x01 + y01 * y01;
    if (r2 < 0)
      throw new Error("negative radius: " + r2);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x12) + "," + (this._y1 = y12);
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
      this._ += "L" + (this._x1 = x12) + "," + (this._y1 = y12);
    } else {
      var x20 = x2 - x05, y20 = y22 - y05, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x12 + t01 * x01) + "," + (y12 + t01 * y01);
      }
      this._ += "A" + r2 + "," + r2 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x12 + t21 * x21) + "," + (this._y1 = y12 + t21 * y21);
    }
  },
  arc: function(x2, y3, r2, a0, a1, ccw) {
    x2 = +x2, y3 = +y3, r2 = +r2, ccw = !!ccw;
    var dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x05 = x2 + dx, y05 = y3 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r2 < 0)
      throw new Error("negative radius: " + r2);
    if (this._x1 === null) {
      this._ += "M" + x05 + "," + y05;
    } else if (Math.abs(this._x1 - x05) > epsilon || Math.abs(this._y1 - y05) > epsilon) {
      this._ += "L" + x05 + "," + y05;
    }
    if (!r2)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r2 + "," + r2 + ",0,1," + cw + "," + (x2 - dx) + "," + (y3 - dy) + "A" + r2 + "," + r2 + ",0,1," + cw + "," + (this._x1 = x05) + "," + (this._y1 = y05);
    } else if (da > epsilon) {
      this._ += "A" + r2 + "," + r2 + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x2 + r2 * Math.cos(a1)) + "," + (this._y1 = y3 + r2 * Math.sin(a1));
    }
  },
  rect: function(x2, y3, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y3) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function() {
    return this._;
  }
};

// node_modules/@nivo/geo/node_modules/d3-shape/src/math.js
var epsilon3 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x2, y3);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a2, r2) {
    this._curve.point(r2 * Math.sin(a2), r2 * -Math.cos(a2));
  }
};
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;

// node_modules/@nivo/geo/node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/@nivo/geo/node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// node_modules/@nivo/geo/node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// node_modules/@nivo/geo/node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/@nivo/geo/node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/basis.js
function point2(that, x2, y3) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x2) / 6,
    (that._y0 + 4 * that._y1 + y3) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basis_default3(context) {
  return new Basis(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x2, this._y2 = y3;
        break;
      case 1:
        this._point = 2;
        this._x3 = x2, this._y3 = y3;
        break;
      case 2:
        this._point = 3;
        this._x4 = x2, this._y4 = y3;
        this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y3) / 6);
        break;
      default:
        point2(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basisClosed_default3(context) {
  return new BasisClosed(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x05 = (this._x0 + 4 * this._x1 + x2) / 6, y05 = (this._y0 + 4 * this._y1 + y3) / 6;
        this._line ? this._context.lineTo(x05, y05) : this._context.moveTo(x05, y05);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y3;
  }
};
function basisOpen_default(context) {
  return new BasisOpen(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x2 = this._x, y3 = this._y, j = x2.length - 1;
    if (j > 0) {
      var x05 = x2[0], y05 = y3[0], dx = x2[j] - x05, dy = y3[j] - y05, i2 = -1, t4;
      while (++i2 <= j) {
        t4 = i2 / j;
        this._basis.point(
          this._beta * x2[i2] + (1 - this._beta) * (x05 + t4 * dx),
          this._beta * y3[i2] + (1 - this._beta) * (y05 + t4 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x2, y3) {
    this._x.push(+x2);
    this._y.push(+y3);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x2, y3) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x2),
    that._y2 + that._k * (that._y1 - y3),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
        this._x1 = x2, this._y1 = y3;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y3;
        break;
      default:
        point3(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x2, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x2, y3) {
  var x12 = that._x1, y12 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n2 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x12 = (x12 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n2;
    y12 = (y12 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n2;
  }
  if (that._l23_a > epsilon3) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m2;
    y22 = (y22 * b + that._y1 * that._l23_2a - y3 * that._l12_2a) / m2;
  }
  that._context.bezierCurveTo(x12, y12, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x2, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y3;
        break;
      default:
        point4(this, x2, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x2, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    if (this._point)
      this._context.lineTo(x2, y3);
    else
      this._point = 1, this._context.moveTo(x2, y3);
  }
};
function linearClosed_default(context) {
  return new LinearClosed(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/monotone.js
function sign(x2) {
  return x2 < 0 ? -1 : 1;
}
function slope3(that, x2, y22) {
  var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t4) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t4) / 2 : t4;
}
function point5(that, t04, t14) {
  var x05 = that._x0, y05 = that._y0, x12 = that._x1, y12 = that._y1, dx = (x12 - x05) / 3;
  that._context.bezierCurveTo(x05 + dx, y05 + dx * t04, x12 - dx, y12 - dx * t14, x12, y12);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    var t14 = NaN;
    x2 = +x2, y3 = +y3;
    if (x2 === this._x1 && y3 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t14 = slope3(this, x2, y3)), t14);
        break;
      default:
        point5(this, this._t0, t14 = slope3(this, x2, y3));
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y3;
    this._t0 = t14;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y3) {
  MonotoneX.prototype.point.call(this, y3, x2);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x2, y3) {
    this._context.moveTo(y3, x2);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x2, y3) {
    this._context.lineTo(y3, x2);
  },
  bezierCurveTo: function(x12, y12, x2, y22, x3, y3) {
    this._context.bezierCurveTo(y12, x12, y22, x2, y3, x3);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x2 = this._x, y3 = this._y, n2 = x2.length;
    if (n2) {
      this._line ? this._context.lineTo(x2[0], y3[0]) : this._context.moveTo(x2[0], y3[0]);
      if (n2 === 2) {
        this._context.lineTo(x2[1], y3[1]);
      } else {
        var px = controlPoints(x2), py = controlPoints(y3);
        for (var i0 = 0, i1 = 1; i1 < n2; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y3[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n2 === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x2, y3) {
    this._x.push(+x2);
    this._y.push(+y3);
  }
};
function controlPoints(x2) {
  var i2, n2 = x2.length - 1, m2, a2 = new Array(n2), b = new Array(n2), r2 = new Array(n2);
  a2[0] = 0, b[0] = 2, r2[0] = x2[0] + 2 * x2[1];
  for (i2 = 1; i2 < n2 - 1; ++i2)
    a2[i2] = 1, b[i2] = 4, r2[i2] = 4 * x2[i2] + 2 * x2[i2 + 1];
  a2[n2 - 1] = 2, b[n2 - 1] = 7, r2[n2 - 1] = 8 * x2[n2 - 1] + x2[n2];
  for (i2 = 1; i2 < n2; ++i2)
    m2 = a2[i2] / b[i2 - 1], b[i2] -= m2, r2[i2] -= m2 * r2[i2 - 1];
  a2[n2 - 1] = r2[n2 - 1] / b[n2 - 1];
  for (i2 = n2 - 2; i2 >= 0; --i2)
    a2[i2] = (r2[i2] - a2[i2 + 1]) / b[i2];
  b[n2 - 1] = (x2[n2] + a2[n2 - 1]) / 2;
  for (i2 = 0; i2 < n2 - 1; ++i2)
    b[i2] = 2 * x2[i2 + 1] - a2[i2 + 1];
  return [a2, b];
}
function natural_default(context) {
  return new Natural(context);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/curve/step.js
function Step(context, t4) {
  this._context = context;
  this._t = t4;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x2, y3) {
    x2 = +x2, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y3) : this._context.moveTo(x2, y3);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y3);
          this._context.lineTo(x2, y3);
        } else {
          var x12 = this._x * (1 - this._t) + x2 * this._t;
          this._context.lineTo(x12, this._y);
          this._context.lineTo(x12, y3);
        }
        break;
      }
    }
    this._x = x2, this._y = y3;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n2 = series.length) > 1))
    return;
  for (var i2 = 1, j, s0, s1 = series[order[0]], n2, m2 = s1.length; i2 < n2; ++i2) {
    s0 = s1, s1 = series[order[i2]];
    for (j = 0; j < m2; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n2 = series.length, o2 = new Array(n2);
  while (--n2 >= 0)
    o2[n2] = n2;
  return o2;
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var i2, n2, j = 0, m2 = series[0].length, y3; j < m2; ++j) {
    for (y3 = i2 = 0; i2 < n2; ++i2)
      y3 += series[i2][j][1] || 0;
    if (y3)
      for (i2 = 0; i2 < n2; ++i2)
        series[i2][j][1] /= y3;
  }
  none_default(series, order);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var i2, j = 0, d, dy, yp, yn, n2, m2 = series[order[0]].length; j < m2; ++j) {
    for (yp = yn = 0, i2 = 0; i2 < n2; ++i2) {
      if ((dy = (d = series[order[i2]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n2 = series.length) > 0))
    return;
  for (var j = 0, s0 = series[order[0]], n2, m2 = s0.length; j < m2; ++j) {
    for (var i2 = 0, y3 = 0; i2 < n2; ++i2)
      y3 += series[i2][j][1] || 0;
    s0[j][1] += s0[j][0] = -y3 / 2;
  }
  none_default(series, order);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n2 = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y3 = 0, j = 1, s0, m2, n2; j < m2; ++j) {
    for (var i2 = 0, s1 = 0, s2 = 0; i2 < n2; ++i2) {
      var si = series[order[i2]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k2 = 0; k2 < i2; ++k2) {
        var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y3;
    if (s1)
      y3 -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y3;
  none_default(series, order);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a2, b) {
    return peaks[a2] - peaks[b];
  });
}
function peak(series) {
  var i2 = -1, j = 0, n2 = series.length, vi, vj = -Infinity;
  while (++i2 < n2)
    if ((vi = +series[i2][1]) > vj)
      vj = vi, j = i2;
  return j;
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/ascending.js
function ascending_default2(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a2, b) {
    return sums[a2] - sums[b];
  });
}
function sum2(series) {
  var s2 = 0, i2 = -1, n2 = series.length, v;
  while (++i2 < n2)
    if (v = +series[i2][1])
      s2 += v;
  return s2;
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/descending.js
function descending_default3(series) {
  return ascending_default2(series).reverse();
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n2 = series.length, i2, j, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i2 = 0; i2 < n2; ++i2) {
    j = order[i2];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }
  return bottoms.reverse().concat(tops);
}

// node_modules/@nivo/geo/node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// node_modules/d3-hierarchy/src/hierarchy/count.js
function count2(node) {
  var sum4 = 0, children = node.children, i2 = children && children.length;
  if (!i2)
    sum4 = 1;
  else
    while (--i2 >= 0)
      sum4 += children[i2].value;
  node.value = sum4;
}
function count_default() {
  return this.eachAfter(count2);
}

// node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default(callback) {
  var node = this, current, next = [node], children, i2, n2;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children)
        for (i2 = 0, n2 = children.length; i2 < n2; ++i2) {
          next.push(children[i2]);
        }
    }
  } while (next.length);
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback) {
  var node = this, nodes = [node], children, i2;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children)
      for (i2 = children.length - 1; i2 >= 0; --i2) {
        nodes.push(children[i2]);
      }
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback) {
  var node = this, nodes = [node], next = [], children, i2, n2;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children)
      for (i2 = 0, n2 = children.length; i2 < n2; ++i2) {
        nodes.push(children[i2]);
      }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value) {
  return this.eachAfter(function(node) {
    var sum4 = +value(node.data) || 0, children = node.children, i2 = children && children.length;
    while (--i2 >= 0)
      sum4 += children[i2].value;
    node.value = sum4;
  });
}

// node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

// node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default2(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k2 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k2, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a2, b) {
  if (a2 === b)
    return a2;
  var aNodes = a2.ancestors(), bNodes = b.ancestors(), c3 = null;
  a2 = aNodes.pop();
  b = bNodes.pop();
  while (a2 === b) {
    c3 = a2;
    a2 = aNodes.pop();
    b = bNodes.pop();
  }
  return c3;
}

// node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
}

// node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children) {
  var root = new Node(data), valued = +data.value && (root.value = data.value), node, nodes = [root], child, childs, i2, n2;
  if (children == null)
    children = defaultChildren;
  while (node = nodes.pop()) {
    if (valued)
      node.value = +node.data.value;
    if ((childs = children(node.data)) && (n2 = childs.length)) {
      node.children = new Array(n2);
      for (i2 = n2 - 1; i2 >= 0; --i2) {
        nodes.push(child = node.children[i2] = new Node(childs[i2]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function defaultChildren(d) {
  return d.children;
}
function copyData(node) {
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: count_default,
  each: each_default,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  sum: sum_default,
  sort: sort_default,
  path: path_default2,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy
};

// node_modules/d3-hierarchy/src/array.js
var slice3 = Array.prototype.slice;

// node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x05, y05, x12, y12) {
  var nodes = parent.children, node, i2 = -1, n2 = nodes.length, k2 = parent.value && (x12 - x05) / parent.value;
  while (++i2 < n2) {
    node = nodes[i2], node.y0 = y05, node.y1 = y12;
    node.x0 = x05, node.x1 = x05 += node.value * k2;
  }
}

// node_modules/d3-hierarchy/src/tree.js
function TreeNode(node, i2) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i2;
}
TreeNode.prototype = Object.create(Node.prototype);

// node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x05, y05, x12, y12) {
  var nodes = parent.children, node, i2 = -1, n2 = nodes.length, k2 = parent.value && (y12 - y05) / parent.value;
  while (++i2 < n2) {
    node = nodes[i2], node.x0 = x05, node.x1 = x12;
    node.y0 = y05, node.y1 = y05 += node.value * k2;
  }
}

// node_modules/d3-hierarchy/src/treemap/squarify.js
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x05, y05, x12, y12) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n2 = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n2) {
    dx = x12 - x05, dy = y12 - y05;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n2);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n2; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue)
        minValue = nodeValue;
      if (nodeValue > maxValue)
        maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice)
      dice_default(row, x05, y05, x12, value ? y05 += dy * sumValue / value : y12);
    else
      slice_default(row, x05, y05, value ? x05 += dx * sumValue / value : x12, y12);
    value -= sumValue, i0 = i1;
  }
  return rows;
}
var squarify_default = function custom8(ratio) {
  function squarify(parent, x05, y05, x12, y12) {
    squarifyRatio(ratio, parent, x05, y05, x12, y12);
  }
  squarify.ratio = function(x2) {
    return custom8((x2 = +x2) > 1 ? x2 : 1);
  };
  return squarify;
}(phi);

// node_modules/d3-hierarchy/src/treemap/binary.js
function binary_default(parent, x05, y05, x12, y12) {
  var nodes = parent.children, i2, n2 = nodes.length, sum4, sums = new Array(n2 + 1);
  for (sums[0] = sum4 = i2 = 0; i2 < n2; ++i2) {
    sums[i2 + 1] = sum4 += nodes[i2].value;
  }
  partition(0, n2, parent.value, x05, y05, x12, y12);
  function partition(i3, j, value, x06, y06, x13, y13) {
    if (i3 >= j - 1) {
      var node = nodes[i3];
      node.x0 = x06, node.y0 = y06;
      node.x1 = x13, node.y1 = y13;
      return;
    }
    var valueOffset = sums[i3], valueTarget = value / 2 + valueOffset, k2 = i3 + 1, hi = j - 1;
    while (k2 < hi) {
      var mid = k2 + hi >>> 1;
      if (sums[mid] < valueTarget)
        k2 = mid + 1;
      else
        hi = mid;
    }
    if (valueTarget - sums[k2 - 1] < sums[k2] - valueTarget && i3 + 1 < k2)
      --k2;
    var valueLeft = sums[k2] - valueOffset, valueRight = value - valueLeft;
    if (x13 - x06 > y13 - y06) {
      var xk = (x06 * valueRight + x13 * valueLeft) / value;
      partition(i3, k2, valueLeft, x06, y06, xk, y13);
      partition(k2, j, valueRight, xk, y06, x13, y13);
    } else {
      var yk = (y06 * valueRight + y13 * valueLeft) / value;
      partition(i3, k2, valueLeft, x06, y06, x13, yk);
      partition(k2, j, valueRight, x06, yk, x13, y13);
    }
  }
}

// node_modules/d3-hierarchy/src/treemap/sliceDice.js
function sliceDice_default(parent, x05, y05, x12, y12) {
  (parent.depth & 1 ? slice_default : dice_default)(parent, x05, y05, x12, y12);
}

// node_modules/d3-hierarchy/src/treemap/resquarify.js
var resquarify_default = function custom9(ratio) {
  function resquarify(parent, x05, y05, x12, y12) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows, row, nodes, i2, j = -1, n2, m2 = rows.length, value = parent.value;
      while (++j < m2) {
        row = rows[j], nodes = row.children;
        for (i2 = row.value = 0, n2 = nodes.length; i2 < n2; ++i2)
          row.value += nodes[i2].value;
        if (row.dice)
          dice_default(row, x05, y05, x12, y05 += (y12 - y05) * row.value / value);
        else
          slice_default(row, x05, y05, x05 += (x12 - x05) * row.value / value, y12);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x05, y05, x12, y12);
      rows.ratio = ratio;
    }
  }
  resquarify.ratio = function(x2) {
    return custom9((x2 = +x2) > 1 ? x2 : 1);
  };
  return resquarify;
}(phi);

// node_modules/@nivo/geo/node_modules/@nivo/core/dist/nivo-core.es.js
var import_lodash = __toESM(require_lodash());
var import_withProps = __toESM(require_withProps());
var import_isEqual = __toESM(require_isEqual());
var import_compose = __toESM(require_compose());
var import_setPropTypes = __toESM(require_setPropTypes());
var import_defaultProps = __toESM(require_defaultProps());
var import_withPropsOnChange = __toESM(require_withPropsOnChange());
var import_isPlainObject = __toESM(require_isPlainObject());
var import_pick = __toESM(require_pick());
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys2(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly)
      symbols2 = symbols2.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit2(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _unsupportedIterableToArray2(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray2(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(n2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray2(o2, minLen);
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray2(arr, i2) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
}
var textProps = {
  fill: import_prop_types2.default.string,
  fontSize: import_prop_types2.default.number,
  fontFamily: import_prop_types2.default.string
};
var axisThemePropType = import_prop_types2.default.shape({
  domain: import_prop_types2.default.shape({
    line: import_prop_types2.default.shape({
      stroke: import_prop_types2.default.string.isRequired,
      strokeWidth: import_prop_types2.default.number.isRequired,
      strokeDasharray: import_prop_types2.default.string
    }).isRequired
  }).isRequired,
  ticks: import_prop_types2.default.shape({
    line: import_prop_types2.default.shape({
      stroke: import_prop_types2.default.string.isRequired,
      strokeWidth: import_prop_types2.default.number.isRequired,
      strokeDasharray: import_prop_types2.default.string
    }).isRequired,
    text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
  }).isRequired,
  legend: import_prop_types2.default.shape({
    text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
  }).isRequired
});
var gridThemePropType = import_prop_types2.default.shape({
  line: import_prop_types2.default.shape({
    stroke: import_prop_types2.default.string.isRequired,
    strokeWidth: import_prop_types2.default.number.isRequired,
    strokeDasharray: import_prop_types2.default.string
  }).isRequired
});
var legendsThemePropType = import_prop_types2.default.shape({
  text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
});
var labelsThemePropType = import_prop_types2.default.shape({
  text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
});
var dotsThemePropType = import_prop_types2.default.shape({
  text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
});
var markersThemePropType = import_prop_types2.default.shape({
  text: import_prop_types2.default.shape(_objectSpread22({}, textProps)).isRequired
});
var crosshairPropType = import_prop_types2.default.shape({
  line: import_prop_types2.default.shape({
    stroke: import_prop_types2.default.string.isRequired,
    strokeWidth: import_prop_types2.default.number.isRequired,
    strokeDasharray: import_prop_types2.default.string
  }).isRequired
});
var annotationsPropType = import_prop_types2.default.shape({
  text: import_prop_types2.default.shape(_objectSpread22(_objectSpread22({}, textProps), {}, {
    outlineWidth: import_prop_types2.default.number.isRequired,
    outlineColor: import_prop_types2.default.string.isRequired
  })).isRequired,
  link: import_prop_types2.default.shape({
    stroke: import_prop_types2.default.string.isRequired,
    strokeWidth: import_prop_types2.default.number.isRequired,
    outlineWidth: import_prop_types2.default.number.isRequired,
    outlineColor: import_prop_types2.default.string.isRequired
  }).isRequired,
  outline: import_prop_types2.default.shape({
    stroke: import_prop_types2.default.string.isRequired,
    strokeWidth: import_prop_types2.default.number.isRequired,
    outlineWidth: import_prop_types2.default.number.isRequired,
    outlineColor: import_prop_types2.default.string.isRequired
  }).isRequired,
  symbol: import_prop_types2.default.shape({
    fill: import_prop_types2.default.string.isRequired,
    outlineWidth: import_prop_types2.default.number.isRequired,
    outlineColor: import_prop_types2.default.string.isRequired
  }).isRequired
});
var themePropType = import_prop_types2.default.shape({
  background: import_prop_types2.default.string.isRequired,
  fontFamily: import_prop_types2.default.string.isRequired,
  fontSize: import_prop_types2.default.number.isRequired,
  textColor: import_prop_types2.default.string.isRequired,
  axis: axisThemePropType.isRequired,
  grid: gridThemePropType.isRequired,
  legends: legendsThemePropType.isRequired,
  labels: labelsThemePropType.isRequired,
  dots: dotsThemePropType.isRequired,
  markers: markersThemePropType,
  crosshair: crosshairPropType.isRequired,
  annotations: annotationsPropType.isRequired
});
var defaultTheme = {
  background: "transparent",
  fontFamily: "sans-serif",
  fontSize: 11,
  textColor: "#333333",
  axis: {
    domain: {
      line: {
        stroke: "transparent",
        strokeWidth: 1
      }
    },
    ticks: {
      line: {
        stroke: "#777777",
        strokeWidth: 1
      },
      text: {}
    },
    legend: {
      text: {
        fontSize: 12
      }
    }
  },
  grid: {
    line: {
      stroke: "#dddddd",
      strokeWidth: 1
    }
  },
  legends: {
    text: {
      fill: "#333333"
    }
  },
  labels: {
    text: {}
  },
  markers: {
    lineColor: "#000000",
    lineStrokeWidth: 1,
    text: {}
  },
  dots: {
    text: {}
  },
  tooltip: {
    container: {
      background: "white",
      color: "inherit",
      fontSize: "inherit",
      borderRadius: "2px",
      boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)",
      padding: "5px 9px"
    },
    basic: {
      whiteSpace: "pre",
      display: "flex",
      alignItems: "center"
    },
    chip: {
      marginRight: 7
    },
    table: {},
    tableCell: {
      padding: "3px 5px"
    }
  },
  crosshair: {
    line: {
      stroke: "#000000",
      strokeWidth: 1,
      strokeOpacity: 0.75,
      strokeDasharray: "6 6"
    }
  },
  annotations: {
    text: {
      fontSize: 13,
      outlineWidth: 2,
      outlineColor: "#ffffff"
    },
    link: {
      stroke: "#000000",
      strokeWidth: 1,
      outlineWidth: 2,
      outlineColor: "#ffffff"
    },
    outline: {
      fill: "none",
      stroke: "#000000",
      strokeWidth: 2,
      outlineWidth: 2,
      outlineColor: "#ffffff"
    },
    symbol: {
      fill: "#000000",
      outlineWidth: 2,
      outlineColor: "#ffffff"
    }
  }
};
var fontProps = ["axis.ticks.text", "axis.legend.text", "legends.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
var extendDefaultTheme = function extendDefaultTheme2(defaultTheme2, customTheme) {
  var theme = (0, import_merge2.default)({}, defaultTheme2, customTheme);
  fontProps.forEach(function(prop) {
    if ((0, import_get.default)(theme, "".concat(prop, ".fontFamily")) === void 0) {
      (0, import_set2.default)(theme, "".concat(prop, ".fontFamily"), theme.fontFamily);
    }
    if ((0, import_get.default)(theme, "".concat(prop, ".fontSize")) === void 0) {
      (0, import_set2.default)(theme, "".concat(prop, ".fontSize"), theme.fontSize);
    }
    if ((0, import_get.default)(theme, "".concat(prop, ".fill")) === void 0) {
      (0, import_set2.default)(theme, "".concat(prop, ".fill"), theme.textColor);
    }
  });
  return theme;
};
var quantizeColorScales = {
  nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"],
  BrBG: (0, import_last.default)(scheme),
  PRGn: (0, import_last.default)(scheme2),
  PiYG: (0, import_last.default)(scheme3),
  PuOr: (0, import_last.default)(scheme4),
  RdBu: (0, import_last.default)(scheme5),
  RdGy: (0, import_last.default)(scheme6),
  RdYlBu: (0, import_last.default)(scheme7),
  RdYlGn: (0, import_last.default)(scheme8),
  spectral: (0, import_last.default)(scheme9),
  blues: (0, import_last.default)(scheme22),
  greens: (0, import_last.default)(scheme23),
  greys: (0, import_last.default)(scheme24),
  oranges: (0, import_last.default)(scheme27),
  purples: (0, import_last.default)(scheme25),
  reds: (0, import_last.default)(scheme26),
  BuGn: (0, import_last.default)(scheme10),
  BuPu: (0, import_last.default)(scheme11),
  GnBu: (0, import_last.default)(scheme12),
  OrRd: (0, import_last.default)(scheme13),
  PuBuGn: (0, import_last.default)(scheme14),
  PuBu: (0, import_last.default)(scheme15),
  PuRd: (0, import_last.default)(scheme16),
  RdPu: (0, import_last.default)(scheme17),
  YlGnBu: (0, import_last.default)(scheme18),
  YlGn: (0, import_last.default)(scheme19),
  YlOrBr: (0, import_last.default)(scheme20),
  YlOrRd: (0, import_last.default)(scheme21)
};
var quantizeColorScalesKeys = Object.keys(quantizeColorScales);
var guessQuantizeColorScale = function guessQuantizeColorScale2(colors2) {
  if ((0, import_isFunction.default)(colors2)) {
    if (!(0, import_isFunction.default)(colors2.domain)) {
      throw new Error("Provided colors should be a valid quantize scale providing a 'domain()' function");
    }
    return colors2;
  }
  if (quantizeColorScales[colors2]) {
    return quantize().range(quantizeColorScales[colors2]);
  }
  if ((0, import_isArray.default)(colors2))
    return quantize().range(colors2);
  throw new Error("Unable to guess quantize color scale from '".concat(colors2, "',\nmust be a function or one of:\n'").concat(quantizeColorScalesKeys.join("', '"), "'"));
};
var colorSchemes = {
  nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"],
  category10: category10_default,
  accent: Accent_default,
  dark2: Dark2_default,
  paired: Paired_default,
  pastel1: Pastel1_default,
  pastel2: Pastel2_default,
  set1: Set1_default,
  set2: Set2_default,
  set3: Set3_default,
  brown_blueGreen: (0, import_last.default)(scheme),
  purpleRed_green: (0, import_last.default)(scheme2),
  pink_yellowGreen: (0, import_last.default)(scheme3),
  purple_orange: (0, import_last.default)(scheme4),
  red_blue: (0, import_last.default)(scheme5),
  red_grey: (0, import_last.default)(scheme6),
  red_yellow_blue: (0, import_last.default)(scheme7),
  red_yellow_green: (0, import_last.default)(scheme8),
  spectral: (0, import_last.default)(scheme9),
  blues: (0, import_last.default)(scheme22),
  greens: (0, import_last.default)(scheme23),
  greys: (0, import_last.default)(scheme24),
  oranges: (0, import_last.default)(scheme27),
  purples: (0, import_last.default)(scheme25),
  reds: (0, import_last.default)(scheme26),
  blue_green: (0, import_last.default)(scheme10),
  blue_purple: (0, import_last.default)(scheme11),
  green_blue: (0, import_last.default)(scheme12),
  orange_red: (0, import_last.default)(scheme13),
  purple_blue_green: (0, import_last.default)(scheme14),
  purple_blue: (0, import_last.default)(scheme15),
  purple_red: (0, import_last.default)(scheme16),
  red_purple: (0, import_last.default)(scheme17),
  yellow_green_blue: (0, import_last.default)(scheme18),
  yellow_green: (0, import_last.default)(scheme19),
  yellow_orange_brown: (0, import_last.default)(scheme20),
  yellow_orange_red: (0, import_last.default)(scheme21)
};
var quantizeColorScalePropType = import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(quantizeColorScalesKeys), import_prop_types2.default.func, import_prop_types2.default.arrayOf(import_prop_types2.default.string)]);
var curvePropMapping = {
  basis: basis_default3,
  basisClosed: basisClosed_default3,
  basisOpen: basisOpen_default,
  bundle: bundle_default,
  cardinal: cardinal_default,
  cardinalClosed: cardinalClosed_default,
  cardinalOpen: cardinalOpen_default,
  catmullRom: catmullRom_default,
  catmullRomClosed: catmullRomClosed_default,
  catmullRomOpen: catmullRomOpen_default,
  linear: linear_default,
  linearClosed: linearClosed_default,
  monotoneX,
  monotoneY,
  natural: natural_default,
  step: step_default,
  stepAfter,
  stepBefore
};
var curvePropKeys = Object.keys(curvePropMapping);
var curvePropType = import_prop_types2.default.oneOf(curvePropKeys);
var closedCurvePropKeys = curvePropKeys.filter(function(c3) {
  return c3.endsWith("Closed");
});
var closedCurvePropType = import_prop_types2.default.oneOf(closedCurvePropKeys);
var areaCurvePropKeys = (0, import_without.default)(curvePropKeys, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var areaCurvePropType = import_prop_types2.default.oneOf(areaCurvePropKeys);
var lineCurvePropKeys = (0, import_without.default)(curvePropKeys, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var lineCurvePropType = import_prop_types2.default.oneOf(lineCurvePropKeys);
var defsPropTypes = {
  defs: import_prop_types2.default.arrayOf(import_prop_types2.default.shape({
    id: import_prop_types2.default.string.isRequired
  })).isRequired,
  fill: import_prop_types2.default.arrayOf(import_prop_types2.default.shape({
    id: import_prop_types2.default.string.isRequired,
    match: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["*"]), import_prop_types2.default.object, import_prop_types2.default.func]).isRequired
  })).isRequired
};
var stackOrderPropMapping = {
  ascending: ascending_default2,
  descending: descending_default3,
  insideOut: insideOut_default,
  none: none_default2,
  reverse: reverse_default
};
var stackOrderPropKeys = Object.keys(stackOrderPropMapping);
var stackOrderPropType = import_prop_types2.default.oneOf(stackOrderPropKeys);
var stackOffsetPropMapping = {
  expand: expand_default,
  diverging: diverging_default,
  none: none_default,
  silhouette: silhouette_default,
  wiggle: wiggle_default
};
var stackOffsetPropKeys = Object.keys(stackOffsetPropMapping);
var stackOffsetPropType = import_prop_types2.default.oneOf(stackOffsetPropKeys);
var treeMapTilePropMapping = {
  binary: binary_default,
  dice: dice_default,
  slice: slice_default,
  sliceDice: sliceDice_default,
  squarify: squarify_default,
  resquarify: resquarify_default
};
var treeMapTilePropKeys = Object.keys(treeMapTilePropMapping);
var treeMapTilePropType = import_prop_types2.default.oneOf(treeMapTilePropKeys);
var marginPropType = import_prop_types2.default.shape({
  top: import_prop_types2.default.number,
  right: import_prop_types2.default.number,
  bottom: import_prop_types2.default.number,
  left: import_prop_types2.default.number
}).isRequired;
var blendModes = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
var blendModePropType = import_prop_types2.default.oneOf(blendModes);
var defaultColorRange = ordinal(Set3_default);
var defaultMargin = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var useDimensions = function useDimensions2(width, height) {
  var partialMargin = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  return (0, import_react3.useMemo)(function() {
    var margin = _objectSpread22(_objectSpread22({}, defaultMargin), partialMargin);
    return {
      margin,
      innerWidth: width - margin.left - margin.right,
      innerHeight: height - margin.top - margin.bottom,
      outerWidth: width,
      outerHeight: height
    };
  }, [width, height, partialMargin.top, partialMargin.right, partialMargin.bottom, partialMargin.left]);
};
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index3) {
      if (entry[0] === key) {
        result = index3;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key) {
      var index3 = getIndex(this.__entries__, key);
      var entry = this.__entries__[index3];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key, value) {
      var index3 = getIndex(this.__entries__, key);
      if (~index3) {
        this.__entries__[index3][1] = value;
      } else {
        this.__entries__.push([key, value]);
      }
    };
    class_1.prototype.delete = function(key) {
      var entries = this.__entries__;
      var index3 = getIndex(entries, key);
      if (~index3) {
        entries.splice(index3, 1);
      }
    };
    class_1.prototype.has = function(key) {
      return !!~getIndex(this.__entries__, key);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx) {
      if (ctx === void 0) {
        ctx = null;
      }
      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
        var entry = _a[_i];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer) {
    var observers2 = this.observers_;
    var index3 = observers2.indexOf(observer);
    if (~index3) {
      observers2.splice(index3, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    activeObservers.forEach(function(observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
    var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
    var isReflowProperty = transitionKeys.some(function(key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x2 = _a.x, y3 = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x2,
    y: y3,
    width,
    height,
    top: y3,
    right: x2 + width,
    bottom: height + y3,
    left: x2
  });
  return rect;
}
function createRectInit(x2, y3, width, height) {
  return { x: x2, y: y3, width, height };
}
var ResizeObservation = function() {
  function ResizeObservation2(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, { target, contentRect });
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    var entries = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver = function() {
  function ResizeObserver2(callback) {
    if (!(this instanceof ResizeObserver2)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver2;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method) {
  ResizeObserver.prototype[method] = function() {
    var _a;
    return (_a = observers.get(this))[method].apply(_a, arguments);
  };
});
var index2 = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver;
}();
var useMeasure = function useMeasure2() {
  var measureRef = (0, import_react3.useRef)(null);
  var _useState = (0, import_react3.useState)({
    left: 0,
    top: 0,
    width: 0,
    height: 0
  }), _useState2 = _slicedToArray2(_useState, 2), bounds = _useState2[0], setBounds = _useState2[1];
  var _useState3 = (0, import_react3.useState)(function() {
    return new index2(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), entry = _ref2[0];
      return setBounds(entry.contentRect);
    });
  }), _useState4 = _slicedToArray2(_useState3, 1), observer = _useState4[0];
  (0, import_react3.useEffect)(function() {
    if (measureRef.current) {
      observer.observe(measureRef.current);
    }
    return function() {
      return observer.disconnect();
    };
  }, []);
  return [measureRef, bounds];
};
var usePartialTheme = function usePartialTheme2(partialTheme) {
  return (0, import_react3.useMemo)(function() {
    return extendDefaultTheme(defaultTheme, partialTheme);
  }, [partialTheme]);
};
var getValueFormatter = function getValueFormatter2(format$1) {
  if (typeof format$1 === "function")
    return format$1;
  if (typeof format$1 === "string") {
    if (format$1.indexOf("time:") === 0) {
      return timeFormat(format$1.slice("5"));
    }
    return format(format$1);
  }
  return function(v) {
    return v;
  };
};
var useValueFormatter = function useValueFormatter2(format2) {
  return (0, import_react3.useMemo)(function() {
    return getValueFormatter(format2);
  }, [format2]);
};
var themeContext = (0, import_react3.createContext)();
var defaultPartialTheme = {};
var ThemeProvider = function ThemeProvider2(_ref) {
  var _ref$theme = _ref.theme, partialTheme = _ref$theme === void 0 ? defaultPartialTheme : _ref$theme, children = _ref.children;
  var theme = usePartialTheme(partialTheme);
  return import_react3.default.createElement(themeContext.Provider, {
    value: theme
  }, children);
};
var useTheme = function useTheme2() {
  return (0, import_react3.useContext)(themeContext);
};
var motionConfigContext = (0, import_react3.createContext)();
var MotionConfigProvider = function MotionConfigProvider2(_ref) {
  var children = _ref.children, animate = _ref.animate, stiffness = _ref.stiffness, damping = _ref.damping, config$1 = _ref.config;
  var value = (0, import_react3.useMemo)(function() {
    var reactSpringConfig = (0, import_lodash.isString)(config$1) ? config[config$1] : config$1;
    return {
      animate,
      springConfig: {
        stiffness,
        damping
      },
      config: reactSpringConfig
    };
  }, [animate, stiffness, damping, config$1]);
  return import_react3.default.createElement(motionConfigContext.Provider, {
    value
  }, children);
};
var motionPropTypes = {
  animate: import_prop_types2.default.bool,
  motionStiffness: import_prop_types2.default.number,
  motionDamping: import_prop_types2.default.number,
  motionConfig: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(Object.keys(config)), import_prop_types2.default.shape({
    mass: import_prop_types2.default.number,
    tension: import_prop_types2.default.number,
    friction: import_prop_types2.default.number,
    clamp: import_prop_types2.default.bool,
    precision: import_prop_types2.default.number,
    velocity: import_prop_types2.default.number,
    duration: import_prop_types2.default.number,
    easing: import_prop_types2.default.func
  })])
};
var motionDefaultProps = {
  animate: true,
  stiffness: 90,
  damping: 15,
  config: "default"
};
MotionConfigProvider.defaultProps = motionDefaultProps;
var useMotionConfig = function useMotionConfig2() {
  return (0, import_react3.useContext)(motionConfigContext);
};
var ResponsiveWrapper = function ResponsiveWrapper2(_ref) {
  var children = _ref.children;
  var _useMeasure = useMeasure(), _useMeasure2 = _slicedToArray2(_useMeasure, 2), measureRef = _useMeasure2[0], bounds = _useMeasure2[1];
  var shouldRender = bounds.width > 0 && bounds.height > 0;
  return import_react3.default.createElement("div", {
    ref: measureRef,
    style: {
      width: "100%",
      height: "100%"
    }
  }, shouldRender && children({
    width: bounds.width,
    height: bounds.height
  }));
};
var LinearGradient = function LinearGradient2(_ref) {
  var id = _ref.id, colors2 = _ref.colors;
  return import_react3.default.createElement("linearGradient", {
    id,
    x1: 0,
    x2: 0,
    y1: 0,
    y2: 1
  }, colors2.map(function(_ref2) {
    var offset = _ref2.offset, color2 = _ref2.color, opacity = _ref2.opacity;
    return import_react3.default.createElement("stop", {
      key: offset,
      offset: "".concat(offset, "%"),
      stopColor: color2,
      stopOpacity: opacity !== void 0 ? opacity : 1
    });
  }));
};
var gradientTypes = {
  linearGradient: LinearGradient
};
var PatternDots = (0, import_react3.memo)(function(_ref) {
  var id = _ref.id, background = _ref.background, color2 = _ref.color, size = _ref.size, padding = _ref.padding, stagger = _ref.stagger;
  var fullSize = size + padding;
  var radius = size / 2;
  var halfPadding = padding / 2;
  if (stagger === true) {
    fullSize = size * 2 + padding * 2;
  }
  return import_react3.default.createElement("pattern", {
    id,
    width: fullSize,
    height: fullSize,
    patternUnits: "userSpaceOnUse"
  }, import_react3.default.createElement("rect", {
    width: fullSize,
    height: fullSize,
    fill: background
  }), import_react3.default.createElement("circle", {
    cx: halfPadding + radius,
    cy: halfPadding + radius,
    r: radius,
    fill: color2
  }), stagger && import_react3.default.createElement("circle", {
    cx: padding * 1.5 + size + radius,
    cy: padding * 1.5 + size + radius,
    r: radius,
    fill: color2
  }));
});
PatternDots.displayName = "PatternDots";
PatternDots.defaultProps = {
  color: "#000000",
  background: "#ffffff",
  size: 4,
  padding: 4,
  stagger: false
};
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
}
var TWO_PI = Math.PI * 2;
var degreesToRadians = function degreesToRadians2(degrees4) {
  return degrees4 * Math.PI / 180;
};
var PatternLines = (0, import_react3.memo)(function(_ref) {
  var id = _ref.id, _spacing = _ref.spacing, _rotation = _ref.rotation, background = _ref.background, color2 = _ref.color, lineWidth = _ref.lineWidth;
  var rotation = Math.round(_rotation) % 360;
  var spacing = Math.abs(_spacing);
  if (rotation > 180)
    rotation = rotation - 360;
  else if (rotation > 90)
    rotation = rotation - 180;
  else if (rotation < -180)
    rotation = rotation + 360;
  else if (rotation < -90)
    rotation = rotation + 180;
  var width = spacing;
  var height = spacing;
  var path2;
  if (rotation === 0) {
    path2 = "\n                M 0 0 L ".concat(width, " 0\n                M 0 ").concat(height, " L ").concat(width, " ").concat(height, "\n            ");
  } else if (rotation === 90) {
    path2 = "\n                M 0 0 L 0 ".concat(height, "\n                M ").concat(width, " 0 L ").concat(width, " ").concat(height, "\n            ");
  } else {
    width = Math.abs(spacing / Math.sin(degreesToRadians(rotation)));
    height = spacing / Math.sin(degreesToRadians(90 - rotation));
    if (rotation > 0) {
      path2 = "\n                    M 0 ".concat(-height, " L ").concat(width * 2, " ").concat(height, "\n                    M ").concat(-width, " ").concat(-height, " L ").concat(width, " ").concat(height, "\n                    M ").concat(-width, " 0 L ").concat(width, " ").concat(height * 2, "\n                ");
    } else {
      path2 = "\n                    M ".concat(-width, " ").concat(height, " L ").concat(width, " ").concat(-height, "\n                    M ").concat(-width, " ").concat(height * 2, " L ").concat(width * 2, " ").concat(-height, "\n                    M 0 ").concat(height * 2, " L ").concat(width * 2, " 0\n                ");
    }
  }
  return import_react3.default.createElement("pattern", {
    id,
    width,
    height,
    patternUnits: "userSpaceOnUse"
  }, import_react3.default.createElement("rect", {
    width,
    height,
    fill: background,
    stroke: "rgba(255, 0, 0, 0.1)",
    strokeWidth: 0
  }), import_react3.default.createElement("path", {
    d: path2,
    strokeWidth: lineWidth,
    stroke: color2,
    strokeLinecap: "square"
  }));
});
PatternLines.displayName = "PatternLines";
PatternLines.defaultProps = {
  spacing: 5,
  rotation: 0,
  color: "#000000",
  background: "#ffffff",
  lineWidth: 2
};
var PatternSquares = (0, import_react3.memo)(function(_ref) {
  var id = _ref.id, background = _ref.background, color2 = _ref.color, size = _ref.size, padding = _ref.padding, stagger = _ref.stagger;
  var fullSize = size + padding;
  var halfPadding = padding / 2;
  if (stagger === true) {
    fullSize = size * 2 + padding * 2;
  }
  return import_react3.default.createElement("pattern", {
    id,
    width: fullSize,
    height: fullSize,
    patternUnits: "userSpaceOnUse"
  }, import_react3.default.createElement("rect", {
    width: fullSize,
    height: fullSize,
    fill: background
  }), import_react3.default.createElement("rect", {
    x: halfPadding,
    y: halfPadding,
    width: size,
    height: size,
    fill: color2
  }), stagger && import_react3.default.createElement("rect", {
    x: padding * 1.5 + size,
    y: padding * 1.5 + size,
    width: size,
    height: size,
    fill: color2
  }));
});
PatternSquares.displayName = "PatternSquares";
PatternSquares.defaultProps = {
  color: "#000000",
  background: "#ffffff",
  size: 4,
  padding: 4,
  stagger: false
};
var patternTypes = {
  patternDots: PatternDots,
  patternLines: PatternLines,
  patternSquares: PatternSquares
};
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var defsMapping = _objectSpread22(_objectSpread22({}, gradientTypes), patternTypes);
var Defs = function Defs2(_ref) {
  var definitions = _ref.defs;
  if (!definitions || definitions.length < 1)
    return null;
  return import_react3.default.createElement("defs", null, definitions.map(function(_ref2) {
    var type = _ref2.type, def = _objectWithoutProperties(_ref2, ["type"]);
    if (defsMapping[type])
      return import_react3.default.createElement(defsMapping[type], _objectSpread22({
        key: def.id
      }, def));
    return null;
  }));
};
var Defs$1 = (0, import_react3.memo)(Defs);
var SvgWrapper = function SvgWrapper2(_ref) {
  var width = _ref.width, height = _ref.height, margin = _ref.margin, defs = _ref.defs, children = _ref.children, role = _ref.role;
  var theme = useTheme();
  return import_react3.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    role,
    width,
    height
  }, import_react3.default.createElement(Defs$1, {
    defs
  }), import_react3.default.createElement("rect", {
    width,
    height,
    fill: theme.background
  }), import_react3.default.createElement("g", {
    transform: "translate(".concat(margin.left, ",").concat(margin.top, ")")
  }, children));
};
var DotsItemSymbol = function DotsItemSymbol2(_ref) {
  var size = _ref.size, color2 = _ref.color, borderWidth = _ref.borderWidth, borderColor = _ref.borderColor;
  return import_react3.default.createElement("circle", {
    r: size / 2,
    fill: color2,
    stroke: borderColor,
    strokeWidth: borderWidth,
    style: {
      pointerEvents: "none"
    }
  });
};
var DotsItemSymbol$1 = (0, import_react3.memo)(DotsItemSymbol);
var DotsItem = function DotsItem2(_ref) {
  var x2 = _ref.x, y3 = _ref.y, symbol = _ref.symbol, size = _ref.size, datum = _ref.datum, color2 = _ref.color, borderWidth = _ref.borderWidth, borderColor = _ref.borderColor, label = _ref.label, labelTextAnchor = _ref.labelTextAnchor, labelYOffset = _ref.labelYOffset, theme = _ref.theme;
  var _useMotionConfig = useMotionConfig(), animate = _useMotionConfig.animate, springConfig = _useMotionConfig.config;
  var animatedProps = useSpring({
    transform: "translate(".concat(x2, ", ").concat(y3, ")"),
    config: springConfig,
    immediate: !animate
  });
  return import_react3.default.createElement(extendedAnimated.g, {
    transform: animatedProps.transform,
    style: {
      pointerEvents: "none"
    }
  }, import_react3.default.createElement(symbol, {
    size,
    color: color2,
    datum,
    borderWidth,
    borderColor
  }), label && import_react3.default.createElement("text", {
    textAnchor: labelTextAnchor,
    y: labelYOffset,
    style: theme.dots.text
  }, label));
};
var DotsItemDefaultProps = {
  symbol: DotsItemSymbol$1,
  labelTextAnchor: "middle",
  labelYOffset: -12
};
DotsItem.defaultProps = DotsItemDefaultProps;
var DotsItem$1 = (0, import_react3.memo)(DotsItem);
var computeLabel = function computeLabel2(_ref) {
  var axis = _ref.axis, width = _ref.width, height = _ref.height, position = _ref.position, offsetX = _ref.offsetX, offsetY = _ref.offsetY, orientation = _ref.orientation;
  var x2 = 0;
  var y3 = 0;
  var rotation = orientation === "vertical" ? -90 : 0;
  var textAnchor = "start";
  if (axis === "x") {
    switch (position) {
      case "top-left":
        x2 = -offsetX;
        y3 = offsetY;
        textAnchor = "end";
        break;
      case "top":
        y3 = -offsetY;
        if (orientation === "horizontal") {
          textAnchor = "middle";
        } else {
          textAnchor = "start";
        }
        break;
      case "top-right":
        x2 = offsetX;
        y3 = offsetY;
        if (orientation === "horizontal") {
          textAnchor = "start";
        } else {
          textAnchor = "end";
        }
        break;
      case "right":
        x2 = offsetX;
        y3 = height / 2;
        if (orientation === "horizontal") {
          textAnchor = "start";
        } else {
          textAnchor = "middle";
        }
        break;
      case "bottom-right":
        x2 = offsetX;
        y3 = height - offsetY;
        textAnchor = "start";
        break;
      case "bottom":
        y3 = height + offsetY;
        if (orientation === "horizontal") {
          textAnchor = "middle";
        } else {
          textAnchor = "end";
        }
        break;
      case "bottom-left":
        y3 = height - offsetY;
        x2 = -offsetX;
        if (orientation === "horizontal") {
          textAnchor = "end";
        } else {
          textAnchor = "start";
        }
        break;
      case "left":
        x2 = -offsetX;
        y3 = height / 2;
        if (orientation === "horizontal") {
          textAnchor = "end";
        } else {
          textAnchor = "middle";
        }
        break;
    }
  } else {
    switch (position) {
      case "top-left":
        x2 = offsetX;
        y3 = -offsetY;
        textAnchor = "start";
        break;
      case "top":
        x2 = width / 2;
        y3 = -offsetY;
        if (orientation === "horizontal") {
          textAnchor = "middle";
        } else {
          textAnchor = "start";
        }
        break;
      case "top-right":
        x2 = width - offsetX;
        y3 = -offsetY;
        if (orientation === "horizontal") {
          textAnchor = "end";
        } else {
          textAnchor = "start";
        }
        break;
      case "right":
        x2 = width + offsetX;
        if (orientation === "horizontal") {
          textAnchor = "start";
        } else {
          textAnchor = "middle";
        }
        break;
      case "bottom-right":
        x2 = width - offsetX;
        y3 = offsetY;
        textAnchor = "end";
        break;
      case "bottom":
        x2 = width / 2;
        y3 = offsetY;
        if (orientation === "horizontal") {
          textAnchor = "middle";
        } else {
          textAnchor = "end";
        }
        break;
      case "bottom-left":
        x2 = offsetX;
        y3 = offsetY;
        if (orientation === "horizontal") {
          textAnchor = "start";
        } else {
          textAnchor = "end";
        }
        break;
      case "left":
        x2 = -offsetX;
        if (orientation === "horizontal") {
          textAnchor = "end";
        } else {
          textAnchor = "middle";
        }
        break;
    }
  }
  return {
    x: x2,
    y: y3,
    rotation,
    textAnchor
  };
};
var CartesianMarkersItem = function CartesianMarkersItem2(_ref2) {
  var width = _ref2.width, height = _ref2.height, axis = _ref2.axis, scale = _ref2.scale, value = _ref2.value, lineStyle = _ref2.lineStyle, textStyle = _ref2.textStyle, legend = _ref2.legend, legendPosition = _ref2.legendPosition, legendOffsetX = _ref2.legendOffsetX, legendOffsetY = _ref2.legendOffsetY, legendOrientation = _ref2.legendOrientation;
  var theme = useTheme();
  var x2 = 0;
  var x22 = 0;
  var y3 = 0;
  var y22 = 0;
  if (axis === "y") {
    y3 = scale(value);
    x22 = width;
  } else {
    x2 = scale(value);
    y22 = height;
  }
  var legendNode = null;
  if (legend) {
    var legendProps = computeLabel({
      axis,
      width,
      height,
      position: legendPosition,
      offsetX: legendOffsetX,
      offsetY: legendOffsetY,
      orientation: legendOrientation
    });
    legendNode = import_react3.default.createElement("text", {
      transform: "translate(".concat(legendProps.x, ", ").concat(legendProps.y, ") rotate(").concat(legendProps.rotation, ")"),
      textAnchor: legendProps.textAnchor,
      dominantBaseline: "central",
      style: textStyle
    }, legend);
  }
  return import_react3.default.createElement("g", {
    transform: "translate(".concat(x2, ", ").concat(y3, ")")
  }, import_react3.default.createElement("line", {
    x1: 0,
    x2: x22,
    y1: 0,
    y2: y22,
    stroke: theme.markers.lineColor,
    strokeWidth: theme.markers.lineStrokeWidth,
    style: lineStyle
  }), legendNode);
};
CartesianMarkersItem.defaultProps = {
  legendPosition: "top-right",
  legendOffsetX: 14,
  legendOffsetY: 14,
  legendOrientation: "horizontal"
};
var CartesianMarkersItem$1 = (0, import_react3.memo)(CartesianMarkersItem);
var CartesianMarkers = function CartesianMarkers2(_ref) {
  var markers = _ref.markers, width = _ref.width, height = _ref.height, xScale = _ref.xScale, yScale = _ref.yScale;
  if (!markers || markers.length === 0)
    return null;
  return markers.map(function(marker, i2) {
    return import_react3.default.createElement(CartesianMarkersItem$1, Object.assign({
      key: i2
    }, marker, {
      width,
      height,
      scale: marker.axis === "y" ? yScale : xScale
    }));
  });
};
var CartesianMarkers$1 = (0, import_react3.memo)(CartesianMarkers);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _setPrototypeOf(o2, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf3(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf(o2, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call2) {
  if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
    return call2;
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived), result;
    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
var containerStyle$1 = {
  position: "relative"
};
var Container$1 = function Container(_ref) {
  var theme = _ref.theme, _ref$renderWrapper = _ref.renderWrapper, renderWrapper = _ref$renderWrapper === void 0 ? true : _ref$renderWrapper, children = _ref.children, animate = _ref.animate, motionStiffness = _ref.motionStiffness, motionDamping = _ref.motionDamping, motionConfig = _ref.motionConfig;
  var container = (0, import_react3.useRef)(null);
  var _useTooltipHandlers = useTooltipHandlers(container), showTooltipAt = _useTooltipHandlers.showTooltipAt, showTooltipFromEvent = _useTooltipHandlers.showTooltipFromEvent, hideTooltip = _useTooltipHandlers.hideTooltip, isTooltipVisible = _useTooltipHandlers.isTooltipVisible, tooltipContent = _useTooltipHandlers.tooltipContent, tooltipPosition = _useTooltipHandlers.tooltipPosition, tooltipAnchor = _useTooltipHandlers.tooltipAnchor;
  return import_react3.default.createElement(ThemeProvider, {
    theme
  }, import_react3.default.createElement(MotionConfigProvider, {
    animate,
    stiffness: motionStiffness,
    damping: motionDamping,
    config: motionConfig
  }, import_react3.default.createElement(tooltipContext.Provider, {
    value: {
      showTooltipAt,
      showTooltipFromEvent,
      hideTooltip
    }
  }, renderWrapper === true && import_react3.default.createElement("div", {
    style: containerStyle$1,
    ref: container
  }, children, isTooltipVisible && import_react3.default.createElement(TooltipWrapper$1, {
    position: tooltipPosition,
    anchor: tooltipAnchor
  }, tooltipContent)), renderWrapper !== true && children)));
};
var withContainer = function withContainer2(WrappedComponent) {
  return function(_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class() {
      _classCallCheck(this, _class);
      return _super.apply(this, arguments);
    }
    _createClass(_class, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, theme = _this$props.theme, renderWrapper = _this$props.renderWrapper, childProps = _objectWithoutProperties(_this$props, ["theme", "renderWrapper"]);
        return import_react3.default.createElement(Container$1, {
          theme,
          renderWrapper,
          animate: childProps.animate,
          motionStiffness: childProps.motionStiffness,
          motionDamping: childProps.motionDamping,
          motionConfig: childProps.motionConfig
        }, import_react3.default.createElement(WrappedComponent, childProps));
      }
    }]);
    return _class;
  }(import_react3.Component);
};
var getRelativeCursor = function getRelativeCursor2(el, event2) {
  var clientX = event2.clientX, clientY = event2.clientY;
  var bounds = el.getBoundingClientRect();
  return [clientX - bounds.left, clientY - bounds.top];
};
var gradientKeys = Object.keys(gradientTypes);
var patternKeys = Object.keys(patternTypes);
var isMatchingDef = function isMatchingDef2(predicate, node, dataKey) {
  if (predicate === "*") {
    return true;
  } else if ((0, import_isFunction.default)(predicate)) {
    return predicate(node);
  } else if ((0, import_isPlainObject.default)(predicate)) {
    var data = dataKey ? (0, import_get.default)(node, dataKey) : node;
    return (0, import_isEqual.default)((0, import_pick.default)(data, Object.keys(predicate)), predicate);
  }
  return false;
};
var bindDefs = function bindDefs2(defs, nodes, rules) {
  var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, dataKey = _ref.dataKey, _ref$colorKey = _ref.colorKey, colorKey = _ref$colorKey === void 0 ? "color" : _ref$colorKey, _ref$targetKey = _ref.targetKey, targetKey = _ref$targetKey === void 0 ? "fill" : _ref$targetKey;
  var boundDefs = [];
  var generatedIds = {};
  if (defs.length && nodes.length) {
    boundDefs = _toConsumableArray(defs);
    nodes.forEach(function(node) {
      var _loop = function _loop2(i3) {
        var _rules$i = rules[i3], id = _rules$i.id, match = _rules$i.match;
        if (isMatchingDef(match, node, dataKey)) {
          var def = defs.find(function(_ref2) {
            var defId = _ref2.id;
            return defId === id;
          });
          if (def) {
            if (patternKeys.includes(def.type)) {
              if (def.background === "inherit" || def.color === "inherit") {
                var nodeColor = (0, import_get.default)(node, colorKey);
                var background = def.background;
                var color2 = def.color;
                var inheritedId = id;
                if (def.background === "inherit") {
                  inheritedId = "".concat(inheritedId, ".bg.").concat(nodeColor);
                  background = nodeColor;
                }
                if (def.color === "inherit") {
                  inheritedId = "".concat(inheritedId, ".fg.").concat(nodeColor);
                  color2 = nodeColor;
                }
                (0, import_set2.default)(node, targetKey, "url(#".concat(inheritedId, ")"));
                if (!generatedIds[inheritedId]) {
                  boundDefs.push(_objectSpread22(_objectSpread22({}, def), {}, {
                    id: inheritedId,
                    background,
                    color: color2
                  }));
                  generatedIds[inheritedId] = 1;
                }
              } else {
                (0, import_set2.default)(node, targetKey, "url(#".concat(id, ")"));
              }
            } else if (gradientKeys.includes(def.type)) {
              var allColors = def.colors.map(function(_ref3) {
                var color3 = _ref3.color;
                return color3;
              });
              if (allColors.includes("inherit")) {
                var _nodeColor = (0, import_get.default)(node, colorKey);
                var _inheritedId = id;
                var inheritedDef = _objectSpread22(_objectSpread22({}, def), {}, {
                  colors: def.colors.map(function(colorStop, i4) {
                    if (colorStop.color !== "inherit")
                      return colorStop;
                    _inheritedId = "".concat(_inheritedId, ".").concat(i4, ".").concat(_nodeColor);
                    return _objectSpread22(_objectSpread22({}, colorStop), {}, {
                      color: colorStop.color === "inherit" ? _nodeColor : colorStop.color
                    });
                  })
                });
                inheritedDef.id = _inheritedId;
                (0, import_set2.default)(node, targetKey, "url(#".concat(_inheritedId, ")"));
                if (!generatedIds[_inheritedId]) {
                  boundDefs.push(inheritedDef);
                  generatedIds[_inheritedId] = 1;
                }
              } else {
                (0, import_set2.default)(node, targetKey, "url(#".concat(id, ")"));
              }
            }
          }
          return "break";
        }
      };
      for (var i2 = 0; i2 < rules.length; i2++) {
        var _ret = _loop(i2);
        if (_ret === "break")
          break;
      }
    });
  }
  return boundDefs;
};

// node_modules/@nivo/geo/dist/nivo-geo.es.js
var import_prop_types5 = __toESM(require_prop_types());

// node_modules/@nivo/geo/node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_react4 = __toESM(require_react());
var import_lodash2 = __toESM(require_lodash2());
var import_lodash3 = __toESM(require_lodash3());
var import_prop_types3 = __toESM(require_prop_types());
var import_react_motion = __toESM(require_react_motion());
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys3(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly)
      symbols2 = symbols2.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread23(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var categoricalColorSchemes = {
  nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"],
  category10: category10_default,
  accent: Accent_default,
  dark2: Dark2_default,
  paired: Paired_default,
  pastel1: Pastel1_default,
  pastel2: Pastel2_default,
  set1: Set1_default,
  set2: Set2_default,
  set3: Set3_default
};
var categoricalColorSchemeIds = Object.keys(categoricalColorSchemes);
var divergingColorSchemes = {
  brown_blueGreen: scheme,
  purpleRed_green: scheme2,
  pink_yellowGreen: scheme3,
  purple_orange: scheme4,
  red_blue: scheme5,
  red_grey: scheme6,
  red_yellow_blue: scheme7,
  red_yellow_green: scheme8,
  spectral: scheme9
};
var divergingColorSchemeIds = Object.keys(divergingColorSchemes);
var sequentialColorSchemes = {
  blues: scheme22,
  greens: scheme23,
  greys: scheme24,
  oranges: scheme27,
  purples: scheme25,
  reds: scheme26,
  blue_green: scheme10,
  blue_purple: scheme11,
  green_blue: scheme12,
  orange_red: scheme13,
  purple_blue_green: scheme14,
  purple_blue: scheme15,
  purple_red: scheme16,
  red_purple: scheme17,
  yellow_green_blue: scheme18,
  yellow_green: scheme19,
  yellow_orange_brown: scheme20,
  yellow_orange_red: scheme21
};
var sequentialColorSchemeIds = Object.keys(sequentialColorSchemes);
var colorSchemes2 = _objectSpread23(_objectSpread23(_objectSpread23({}, categoricalColorSchemes), divergingColorSchemes), sequentialColorSchemes);
var colorSchemeIds = Object.keys(colorSchemes2);
var colorInterpolators = {
  brown_blueGreen: BrBG_default,
  purpleRed_green: PRGn_default,
  pink_yellowGreen: PiYG_default,
  purple_orange: PuOr_default,
  red_blue: RdBu_default,
  red_grey: RdGy_default,
  red_yellow_blue: RdYlBu_default,
  red_yellow_green: RdYlGn_default,
  spectral: Spectral_default,
  blues: Blues_default,
  greens: Greens_default,
  greys: Greys_default,
  oranges: Oranges_default,
  purples: Purples_default,
  reds: Reds_default,
  viridis: viridis_default,
  inferno,
  magma,
  plasma,
  warm,
  cool,
  cubehelixDefault: cubehelix_default3,
  blue_green: BuGn_default,
  blue_purple: BuPu_default,
  green_blue: GnBu_default,
  orange_red: OrRd_default,
  purple_blue_green: PuBuGn_default,
  purple_blue: PuBu_default,
  purple_red: PuRd_default,
  red_purple: RdPu_default,
  yellow_green_blue: YlGnBu_default,
  yellow_green: YlGn_default,
  yellow_orange_brown: YlOrBr_default,
  yellow_orange_red: YlOrRd_default,
  rainbow: rainbow_default,
  sinebow: sinebow_default
};
var colorInterpolatorIds = Object.keys(colorInterpolators);
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit3(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _unsupportedIterableToArray3(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray3(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(n2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray3(o2, minLen);
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray3(arr, i2) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i2) || _unsupportedIterableToArray3(arr, i2) || _nonIterableRest3();
}
function _createForOfIteratorHelper(o2) {
  if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
    if (Array.isArray(o2) || (o2 = _unsupportedIterableToArray3(o2))) {
      var i2 = 0;
      var F = function F2() {
      };
      return {
        s: F,
        n: function n2() {
          if (i2 >= o2.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o2[i2++]
          };
        },
        e: function e3(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var it, normalCompletion = true, didErr = false, err;
  return {
    s: function s2() {
      it = o2[Symbol.iterator]();
    },
    n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e3(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var getInheritedColorGenerator = function getInheritedColorGenerator2(inheritedColor, theme) {
  if (typeof inheritedColor === "function")
    return function(node) {
      return inheritedColor(node);
    };
  if ((0, import_lodash3.default)(inheritedColor)) {
    if (inheritedColor.theme !== void 0) {
      if (theme === void 0) {
        throw new Error("Unable to use color from theme as no theme was provided");
      }
      var themeColor = (0, import_lodash2.default)(theme, inheritedColor.theme);
      if (themeColor === void 0) {
        throw new Error("Color from theme is undefined at path: '".concat(inheritedColor.theme, "'"));
      }
      return function() {
        return themeColor;
      };
    }
    if (inheritedColor.from !== void 0) {
      var getColor = function getColor2(datum) {
        return (0, import_lodash2.default)(datum, inheritedColor.from);
      };
      if (Array.isArray(inheritedColor.modifiers)) {
        var modifiers = [];
        var _iterator = _createForOfIteratorHelper(inheritedColor.modifiers), _step;
        try {
          var _loop = function _loop2() {
            var modifier = _step.value;
            var _modifier = _slicedToArray3(modifier, 2), modifierType = _modifier[0], amount = _modifier[1];
            if (modifierType === "brighter") {
              modifiers.push(function(color2) {
                return color2.brighter(amount);
              });
            } else if (modifierType === "darker") {
              modifiers.push(function(color2) {
                return color2.darker(amount);
              });
            } else if (modifierType === "opacity") {
              modifiers.push(function(color2) {
                color2.opacity = amount;
                return color2;
              });
            } else {
              throw new Error("Invalid color modifier: '".concat(modifierType, "', must be one of: 'brighter', 'darker', 'opacity'"));
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (modifiers.length === 0)
          return getColor;
        return function(datum) {
          return modifiers.reduce(function(color2, modify) {
            return modify(color2);
          }, rgb2(getColor(datum))).toString();
        };
      }
      return getColor;
    }
    throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
  }
  return function() {
    return inheritedColor;
  };
};
var useInheritedColor = function useInheritedColor2(parentColor, theme) {
  return (0, import_react4.useMemo)(function() {
    return getInheritedColorGenerator(parentColor, theme);
  }, [parentColor, theme]);
};
var ordinalColorsPropType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.arrayOf(import_prop_types3.default.string), import_prop_types3.default.shape({
  scheme: import_prop_types3.default.oneOf(colorSchemeIds).isRequired,
  size: import_prop_types3.default.number
}), import_prop_types3.default.shape({
  datum: import_prop_types3.default.string.isRequired
}), import_prop_types3.default.string]);
var colorPropertyAccessorPropType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.string]);
var inheritedColorPropType = import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.func, import_prop_types3.default.shape({
  theme: import_prop_types3.default.string.isRequired
}), import_prop_types3.default.shape({
  from: import_prop_types3.default.string.isRequired,
  modifiers: import_prop_types3.default.arrayOf(import_prop_types3.default.array)
})]);

// node_modules/@nivo/geo/dist/nivo-geo.es.js
var import_lodash4 = __toESM(require_lodash());

// node_modules/d3-geo/src/adder.js
function adder_default() {
  return new Adder2();
}
function Adder2() {
  this.reset();
}
Adder2.prototype = {
  constructor: Adder2,
  reset: function() {
    this.s = // rounded value
    this.t = 0;
  },
  add: function(y3) {
    add(temp, y3, this.t);
    add(this, temp.s, this.s);
    if (this.s)
      this.t += temp.t;
    else
      this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};
var temp = new Adder2();
function add(adder, a2, b) {
  var x2 = adder.s = a2 + b, bv = x2 - a2, av = x2 - bv;
  adder.t = a2 - av + (b - bv);
}

// node_modules/d3-geo/src/math.js
var epsilon4 = 1e-6;
var epsilon22 = 1e-12;
var pi3 = Math.PI;
var halfPi2 = pi3 / 2;
var quarterPi = pi3 / 4;
var tau3 = pi3 * 2;
var degrees3 = 180 / pi3;
var radians = pi3 / 180;
var abs2 = Math.abs;
var atan = Math.atan;
var atan22 = Math.atan2;
var cos2 = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var log2 = Math.log;
var sin2 = Math.sin;
var sign2 = Math.sign || function(x2) {
  return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
};
var sqrt4 = Math.sqrt;
var tan = Math.tan;
function acos2(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi3 : Math.acos(x2);
}
function asin2(x2) {
  return x2 > 1 ? halfPi2 : x2 < -1 ? -halfPi2 : Math.asin(x2);
}

// node_modules/d3-geo/src/noop.js
function noop() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object2, stream) {
    streamGeometry(object2.geometry, stream);
  },
  FeatureCollection: function(object2, stream) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2)
      streamGeometry(features[i2].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream) {
    stream.sphere();
  },
  Point: function(object2, stream) {
    object2 = object2.coordinates;
    stream.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      object2 = coordinates2[i2], stream.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream) {
    streamLine(object2.coordinates, stream, 0);
  },
  MultiLineString: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      streamLine(coordinates2[i2], stream, 0);
  },
  Polygon: function(object2, stream) {
    streamPolygon(object2.coordinates, stream);
  },
  MultiPolygon: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      streamPolygon(coordinates2[i2], stream);
  },
  GeometryCollection: function(object2, stream) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2)
      streamGeometry(geometries[i2], stream);
  }
};
function streamLine(coordinates2, stream, closed) {
  var i2 = -1, n2 = coordinates2.length - closed, coordinate;
  stream.lineStart();
  while (++i2 < n2)
    coordinate = coordinates2[i2], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates2, stream) {
  var i2 = -1, n2 = coordinates2.length;
  stream.polygonStart();
  while (++i2 < n2)
    streamLine(coordinates2[i2], stream, 1);
  stream.polygonEnd();
}
function stream_default(object2, stream) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream);
  } else {
    streamGeometry(object2, stream);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = adder_default();
var areaSum = adder_default();

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan22(cartesian2[1], cartesian2[0]), asin2(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi2 = spherical2[1], cosPhi = cos2(phi2);
  return [cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi2)];
}
function cartesianDot(a2, b) {
  return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
}
function cartesianCross(a2, b) {
  return [a2[1] * b[2] - a2[2] * b[1], a2[2] * b[0] - a2[0] * b[2], a2[0] * b[1] - a2[1] * b[0]];
}
function cartesianAddInPlace(a2, b) {
  a2[0] += b[0], a2[1] += b[1], a2[2] += b[2];
}
function cartesianScale(vector, k2) {
  return [vector[0] * k2, vector[1] * k2, vector[2] * k2];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt4(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo/src/bounds.js
var deltaSum = adder_default();

// node_modules/d3-geo/src/compose.js
function compose_default(a2, b) {
  function compose2(x2, y3) {
    return x2 = a2(x2, y3), b(x2[0], x2[1]);
  }
  if (a2.invert && b.invert)
    compose2.invert = function(x2, y3) {
      return x2 = b.invert(x2, y3), x2 && a2.invert(x2[0], x2[1]);
    };
  return compose2;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi2) {
  return [abs2(lambda) > pi3 ? lambda + Math.round(-lambda / tau3) * tau3 : lambda, phi2];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau3) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi2) {
    return lambda += deltaLambda, [lambda > pi3 ? lambda - tau3 : lambda < -pi3 ? lambda + tau3 : lambda, phi2];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos2(deltaPhi), sinDeltaPhi = sin2(deltaPhi), cosDeltaGamma = cos2(deltaGamma), sinDeltaGamma = sin2(deltaGamma);
  function rotation(lambda, phi2) {
    var cosPhi = cos2(phi2), x2 = cos2(lambda) * cosPhi, y3 = sin2(lambda) * cosPhi, z2 = sin2(phi2), k2 = z2 * cosDeltaPhi + x2 * sinDeltaPhi;
    return [
      atan22(y3 * cosDeltaGamma - k2 * sinDeltaGamma, x2 * cosDeltaPhi - z2 * sinDeltaPhi),
      asin2(k2 * cosDeltaGamma + y3 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi2) {
    var cosPhi = cos2(phi2), x2 = cos2(lambda) * cosPhi, y3 = sin2(lambda) * cosPhi, z2 = sin2(phi2), k2 = z2 * cosDeltaGamma - y3 * sinDeltaGamma;
    return [
      atan22(y3 * cosDeltaGamma + z2 * sinDeltaGamma, x2 * cosDeltaPhi + k2 * sinDeltaPhi),
      asin2(k2 * cosDeltaPhi - x2 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
  function forward(coordinates2) {
    coordinates2 = rotate(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees3, coordinates2[1] *= degrees3, coordinates2;
  }
  forward.invert = function(coordinates2) {
    coordinates2 = rotate.invert(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees3, coordinates2[1] *= degrees3, coordinates2;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction, t04, t14) {
  if (!delta)
    return;
  var cosRadius = cos2(radius), sinRadius = sin2(radius), step = direction * delta;
  if (t04 == null) {
    t04 = radius + direction * tau3;
    t14 = radius - step / 2;
  } else {
    t04 = circleRadius(cosRadius, t04);
    t14 = circleRadius(cosRadius, t14);
    if (direction > 0 ? t04 < t14 : t04 > t14)
      t04 += direction * tau3;
  }
  for (var point6, t4 = t04; direction > 0 ? t4 > t14 : t4 < t14; t4 -= step) {
    point6 = spherical([cosRadius, -sinRadius * cos2(t4), -sinRadius * sin2(t4)]);
    stream.point(point6[0], point6[1]);
  }
}
function circleRadius(cosRadius, point6) {
  point6 = cartesian(point6), point6[0] -= cosRadius;
  cartesianNormalizeInPlace(point6);
  var radius = acos2(-point6[1]);
  return ((-point6[2] < 0 ? -radius : radius) + tau3 - epsilon4) % tau3;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x2, y3, m2) {
      line.push([x2, y3, m2]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a2, b) {
  return abs2(a2[0] - b[0]) < epsilon4 && abs2(a2[1] - b[1]) < epsilon4;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point6, points, other, entry) {
  this.x = point6;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate2, stream) {
  var subject = [], clip = [], i2, n2;
  segments.forEach(function(segment) {
    if ((n3 = segment.length - 1) <= 0)
      return;
    var n3, p0 = segment[0], p1 = segment[n3], x2;
    if (pointEqual_default(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i2 = 0; i2 < n3; ++i2)
          stream.point((p0 = segment[i2])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon4;
    }
    subject.push(x2 = new Intersection(p0, segment, null, true));
    clip.push(x2.o = new Intersection(p0, null, x2, false));
    subject.push(x2 = new Intersection(p1, segment, null, false));
    clip.push(x2.o = new Intersection(p1, null, x2, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i2 = 0, n2 = clip.length; i2 < n2; ++i2) {
    clip[i2].e = startInside = !startInside;
  }
  var start2 = subject[0], points, point6;
  while (1) {
    var current = start2, isSubject = true;
    while (current.v)
      if ((current = current.n) === start2)
        return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i2 = 0, n2 = points.length; i2 < n2; ++i2)
            stream.point((point6 = points[i2])[0], point6[1]);
        } else {
          interpolate2(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i2 = points.length - 1; i2 >= 0; --i2)
            stream.point((point6 = points[i2])[0], point6[1]);
        } else {
          interpolate2(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array3) {
  if (!(n2 = array3.length))
    return;
  var n2, i2 = 0, a2 = array3[0], b;
  while (++i2 < n2) {
    a2.n = b = array3[i2];
    b.p = a2;
    a2 = b;
  }
  a2.n = b = array3[0];
  b.p = a2;
}

// node_modules/d3-geo/src/polygonContains.js
var sum3 = adder_default();
function longitude(point6) {
  if (abs2(point6[0]) <= pi3)
    return point6[0];
  else
    return sign2(point6[0]) * ((abs2(point6[0]) + pi3) % tau3 - pi3);
}
function polygonContains_default(polygon, point6) {
  var lambda = longitude(point6), phi2 = point6[1], sinPhi = sin2(phi2), normal = [sin2(lambda), -cos2(lambda), 0], angle = 0, winding = 0;
  sum3.reset();
  if (sinPhi === 1)
    phi2 = halfPi2 + epsilon4;
  else if (sinPhi === -1)
    phi2 = -halfPi2 - epsilon4;
  for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
    if (!(m2 = (ring = polygon[i2]).length))
      continue;
    var ring, m2, point0 = ring[m2 - 1], lambda02 = longitude(point0), phi0 = point0[1] / 2 + quarterPi, sinPhi02 = sin2(phi0), cosPhi02 = cos2(phi0);
    for (var j = 0; j < m2; ++j, lambda02 = lambda1, sinPhi02 = sinPhi1, cosPhi02 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin2(phi1), cosPhi1 = cos2(phi1), delta = lambda1 - lambda02, sign3 = delta >= 0 ? 1 : -1, absDelta = sign3 * delta, antimeridian = absDelta > pi3, k2 = sinPhi02 * sinPhi1;
      sum3.add(atan22(k2 * sign3 * sin2(absDelta), cosPhi02 * cosPhi1 + k2 * cos2(absDelta)));
      angle += antimeridian ? delta + sign3 * tau3 : delta;
      if (antimeridian ^ lambda02 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection2 = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection2);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin2(intersection2[2]);
        if (phi2 > phiArc || phi2 === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle < -epsilon4 || angle < epsilon4 && sum3 < -epsilon4) ^ winding & 1;
}

// node_modules/d3-geo/node_modules/d3-array/src/ascending.js
function ascending_default3(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-geo/node_modules/d3-array/src/bisector.js
function bisector_default2(compare) {
  if (compare.length === 1)
    compare = ascendingComparator2(compare);
  return {
    left: function(a2, x2, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) < 0)
          lo = mid + 1;
        else
          hi = mid;
      }
      return lo;
    },
    right: function(a2, x2, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) > 0)
          hi = mid;
        else
          lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator2(f) {
  return function(d, x2) {
    return ascending_default3(f(d), x2);
  };
}

// node_modules/d3-geo/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default2(ascending_default3);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;

// node_modules/d3-geo/node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice4 = array2.slice;
var map4 = array2.map;

// node_modules/d3-geo/node_modules/d3-array/src/range.js
function range_default2(start2, stop2, step) {
  start2 = +start2, stop2 = +stop2, step = (n2 = arguments.length) < 2 ? (stop2 = start2, start2 = 0, 1) : n2 < 3 ? 1 : +step;
  var i2 = -1, n2 = Math.max(0, Math.ceil((stop2 - start2) / step)) | 0, range = new Array(n2);
  while (++i2 < n2) {
    range[i2] = start2 + i2 * step;
  }
  return range;
}

// node_modules/d3-geo/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);

// node_modules/d3-geo/node_modules/d3-array/src/merge.js
function merge_default(arrays) {
  var n2 = arrays.length, m2, i2 = -1, j = 0, merged, array3;
  while (++i2 < n2)
    j += arrays[i2].length;
  merged = new Array(j);
  while (--n2 >= 0) {
    array3 = arrays[n2];
    m2 = array3.length;
    while (--m2 >= 0) {
      merged[--j] = array3[m2];
    }
  }
  return merged;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate2, start2) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point6;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge_default(segments);
        var startInside = polygonContains_default(polygon, start2);
        if (segments.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate2, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate2(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate2(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point6(lambda, phi2) {
      if (pointVisible(lambda, phi2))
        sink.point(lambda, phi2);
    }
    function pointLine(lambda, phi2) {
      line.point(lambda, phi2);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point6;
      line.lineEnd();
    }
    function pointRing(lambda, phi2) {
      ring.push([lambda, phi2]);
      ringSink.point(lambda, phi2);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i2, n2 = ringSegments.length, m2, segment, point7;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n2)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m2 = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i2 = 0; i2 < m2; ++i2)
            sink.point((point7 = segment[i2])[0], point7[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n2 > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a2, b) {
  return ((a2 = a2.x)[0] < 0 ? a2[1] - halfPi2 - epsilon4 : halfPi2 - a2[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi2 - epsilon4 : halfPi2 - b[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi3, -halfPi2]
);
function clipAntimeridianLine(stream) {
  var lambda02 = NaN, phi0 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi3 : -pi3, delta = abs2(lambda1 - lambda02);
      if (abs2(delta - pi3) < epsilon4) {
        stream.point(lambda02, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi2 : -halfPi2);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi3) {
        if (abs2(lambda02 - sign0) < epsilon4)
          lambda02 -= sign0 * epsilon4;
        if (abs2(lambda1 - sign1) < epsilon4)
          lambda1 -= sign1 * epsilon4;
        phi0 = clipAntimeridianIntersect(lambda02, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda02 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda02 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda02, phi0, lambda1, phi1) {
  var cosPhi02, cosPhi1, sinLambda0Lambda1 = sin2(lambda02 - lambda1);
  return abs2(sinLambda0Lambda1) > epsilon4 ? atan((sin2(phi0) * (cosPhi1 = cos2(phi1)) * sin2(lambda1) - sin2(phi1) * (cosPhi02 = cos2(phi0)) * sin2(lambda02)) / (cosPhi02 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi2;
  if (from == null) {
    phi2 = direction * halfPi2;
    stream.point(-pi3, phi2);
    stream.point(0, phi2);
    stream.point(pi3, phi2);
    stream.point(pi3, 0);
    stream.point(pi3, -phi2);
    stream.point(0, -phi2);
    stream.point(-pi3, -phi2);
    stream.point(-pi3, 0);
    stream.point(-pi3, phi2);
  } else if (abs2(from[0] - to[0]) > epsilon4) {
    var lambda = from[0] < to[0] ? pi3 : -pi3;
    phi2 = direction * lambda / 2;
    stream.point(-lambda, phi2);
    stream.point(0, phi2);
    stream.point(lambda, phi2);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default2(radius) {
  var cr = cos2(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs2(cr) > epsilon4;
  function interpolate2(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }
  function visible(lambda, phi2) {
    return cos2(lambda) * cos2(phi2) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi2) {
        var point1 = [lambda, phi2], point22, v = visible(lambda, phi2), c3 = smallRadius ? v ? 0 : code(lambda, phi2) : v ? code(lambda + (lambda < 0 ? pi3 : -pi3), phi2) : 0;
        if (!point0 && (v00 = v0 = v))
          stream.lineStart();
        if (v !== v0) {
          point22 = intersect(point0, point1);
          if (!point22 || pointEqual_default(point0, point22) || pointEqual_default(point1, point22))
            point1[2] = 1;
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            stream.lineStart();
            point22 = intersect(point1, point0);
            stream.point(point22[0], point22[1]);
          } else {
            point22 = intersect(point0, point1);
            stream.point(point22[0], point22[1], 2);
            stream.lineEnd();
          }
          point0 = point22;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t4;
          if (!(c3 & c0) && (t4 = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1]);
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1], 3);
            }
          }
        }
        if (v && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c3;
      },
      lineEnd: function() {
        if (v0)
          stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a2, b, two) {
    var pa = cartesian(a2), pb = cartesian(b);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
      return !two && a2;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A6 = cartesianScale(n1, c1), B2 = cartesianScale(n2, c22);
    cartesianAddInPlace(A6, B2);
    var u = n1xn2, w = cartesianDot(A6, u), uu = cartesianDot(u, u), t22 = w * w - uu * (cartesianDot(A6, A6) - 1);
    if (t22 < 0)
      return;
    var t4 = sqrt4(t22), q = cartesianScale(u, (-w - t4) / uu);
    cartesianAddInPlace(q, A6);
    q = spherical(q);
    if (!two)
      return q;
    var lambda02 = a2[0], lambda1 = b[0], phi0 = a2[1], phi1 = b[1], z2;
    if (lambda1 < lambda02)
      z2 = lambda02, lambda02 = lambda1, lambda1 = z2;
    var delta2 = lambda1 - lambda02, polar = abs2(delta2 - pi3) < epsilon4, meridian = polar || delta2 < epsilon4;
    if (!polar && phi1 < phi0)
      z2 = phi0, phi0 = phi1, phi1 = z2;
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs2(q[0] - lambda02) < epsilon4 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta2 > pi3 ^ (lambda02 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t4) / uu);
      cartesianAddInPlace(q1, A6);
      return [q, spherical(q1)];
    }
  }
  function code(lambda, phi2) {
    var r2 = smallRadius ? radius : pi3 - radius, code2 = 0;
    if (lambda < -r2)
      code2 |= 1;
    else if (lambda > r2)
      code2 |= 2;
    if (phi2 < -r2)
      code2 |= 4;
    else if (phi2 > r2)
      code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate2, smallRadius ? [0, -radius] : [-pi3, radius - pi3]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default2(a2, b, x05, y05, x12, y12) {
  var ax = a2[0], ay = a2[1], bx = b[0], by = b[1], t04 = 0, t14 = 1, dx = bx - ax, dy = by - ay, r2;
  r2 = x05 - ax;
  if (!dx && r2 > 0)
    return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 < t04)
      return;
    if (r2 < t14)
      t14 = r2;
  } else if (dx > 0) {
    if (r2 > t14)
      return;
    if (r2 > t04)
      t04 = r2;
  }
  r2 = x12 - ax;
  if (!dx && r2 < 0)
    return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 > t14)
      return;
    if (r2 > t04)
      t04 = r2;
  } else if (dx > 0) {
    if (r2 < t04)
      return;
    if (r2 < t14)
      t14 = r2;
  }
  r2 = y05 - ay;
  if (!dy && r2 > 0)
    return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 < t04)
      return;
    if (r2 < t14)
      t14 = r2;
  } else if (dy > 0) {
    if (r2 > t14)
      return;
    if (r2 > t04)
      t04 = r2;
  }
  r2 = y12 - ay;
  if (!dy && r2 < 0)
    return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 > t14)
      return;
    if (r2 > t04)
      t04 = r2;
  } else if (dy > 0) {
    if (r2 < t04)
      return;
    if (r2 < t14)
      t14 = r2;
  }
  if (t04 > 0)
    a2[0] = ax + t04 * dx, a2[1] = ay + t04 * dy;
  if (t14 < 1)
    b[0] = ax + t14 * dx, b[1] = ay + t14 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x05, y05, x12, y12) {
  function visible(x2, y3) {
    return x05 <= x2 && x2 <= x12 && y05 <= y3 && y3 <= y12;
  }
  function interpolate2(from, to, direction, stream) {
    var a2 = 0, a1 = 0;
    if (from == null || (a2 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream.point(a2 === 0 || a2 === 3 ? x05 : x12, a2 > 1 ? y12 : y05);
      while ((a2 = (a2 + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs2(p[0] - x05) < epsilon4 ? direction > 0 ? 0 : 3 : abs2(p[0] - x12) < epsilon4 ? direction > 0 ? 2 : 1 : abs2(p[1] - y05) < epsilon4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a2, b) {
    return comparePoint(a2.x, b.x);
  }
  function comparePoint(a2, b) {
    var ca = corner(a2, 1), cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a2[1] : ca === 1 ? a2[0] - b[0] : ca === 2 ? a2[1] - b[1] : b[0] - a2[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point6(x2, y3) {
      if (visible(x2, y3))
        activeStream.point(x2, y3);
    }
    function polygonInside() {
      var winding = 0;
      for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
        for (var ring2 = polygon[i2], j = 1, m2 = ring2.length, point7 = ring2[0], a0, a1, b0 = point7[0], b1 = point7[1]; j < m2; ++j) {
          a0 = b0, a1 = b1, point7 = ring2[j], b0 = point7[0], b1 = point7[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x05 - a0))
              ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x05 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge_default(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate2(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate2, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint;
      if (polygon)
        polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point6;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint(x2, y3) {
      var v = visible(x2, y3);
      if (polygon)
        ring.push([x2, y3]);
      if (first) {
        x__ = x2, y__ = y3, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x2, y3);
        }
      } else {
        if (v && v_)
          activeStream.point(x2, y3);
        else {
          var a2 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x2 = Math.max(clipMin, Math.min(clipMax, x2)), y3 = Math.max(clipMin, Math.min(clipMax, y3))];
          if (line_default2(a2, b, x05, y05, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a2[0], a2[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v)
              activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x2, y3);
            clean = false;
          }
        }
      }
      x_ = x2, y_ = y3, v_ = v;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/length.js
var lengthSum = adder_default();
var lambda0;
var sinPhi0;
var cosPhi0;
var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}
function lengthPointFirst(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  lambda0 = lambda, sinPhi0 = sin2(phi2), cosPhi0 = cos2(phi2);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var sinPhi = sin2(phi2), cosPhi = cos2(phi2), delta = abs2(lambda - lambda0), cosDelta = cos2(delta), sinDelta = sin2(delta), x2 = cosPhi * sinDelta, y3 = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta, z2 = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add(atan22(sqrt4(x2 * x2 + y3 * y3), z2));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}
function length_default(object2) {
  lengthSum.reset();
  stream_default(object2, lengthStream);
  return +lengthSum;
}

// node_modules/d3-geo/src/distance.js
var coordinates = [null, null];
var object = { type: "LineString", coordinates };
function distance_default(a2, b) {
  coordinates[0] = a2;
  coordinates[1] = b;
  return length_default(object);
}

// node_modules/d3-geo/src/contains.js
var containsObjectType = {
  Feature: function(object2, point6) {
    return containsGeometry(object2.geometry, point6);
  },
  FeatureCollection: function(object2, point6) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2)
      if (containsGeometry(features[i2].geometry, point6))
        return true;
    return false;
  }
};
var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object2, point6) {
    return containsPoint(object2.coordinates, point6);
  },
  MultiPoint: function(object2, point6) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      if (containsPoint(coordinates2[i2], point6))
        return true;
    return false;
  },
  LineString: function(object2, point6) {
    return containsLine(object2.coordinates, point6);
  },
  MultiLineString: function(object2, point6) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      if (containsLine(coordinates2[i2], point6))
        return true;
    return false;
  },
  Polygon: function(object2, point6) {
    return containsPolygon(object2.coordinates, point6);
  },
  MultiPolygon: function(object2, point6) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2)
      if (containsPolygon(coordinates2[i2], point6))
        return true;
    return false;
  },
  GeometryCollection: function(object2, point6) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2)
      if (containsGeometry(geometries[i2], point6))
        return true;
    return false;
  }
};
function containsGeometry(geometry, point6) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point6) : false;
}
function containsPoint(coordinates2, point6) {
  return distance_default(coordinates2, point6) === 0;
}
function containsLine(coordinates2, point6) {
  var ao, bo, ab;
  for (var i2 = 0, n2 = coordinates2.length; i2 < n2; i2++) {
    bo = distance_default(coordinates2[i2], point6);
    if (bo === 0)
      return true;
    if (i2 > 0) {
      ab = distance_default(coordinates2[i2], coordinates2[i2 - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon22 * ab)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates2, point6) {
  return !!polygonContains_default(coordinates2.map(ringRadians), pointRadians(point6));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point6) {
  return [point6[0] * radians, point6[1] * radians];
}
function contains_default(object2, point6) {
  return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point6);
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y05, y12, dy) {
  var y3 = range_default2(y05, y12 - epsilon4, dy).concat(y12);
  return function(x2) {
    return y3.map(function(y4) {
      return [x2, y4];
    });
  };
}
function graticuleY(x05, x12, dx) {
  var x2 = range_default2(x05, x12 - epsilon4, dx).concat(x12);
  return function(y3) {
    return x2.map(function(x3) {
      return [x3, y3];
    });
  };
}
function graticule() {
  var x12, x05, X12, X02, y12, y05, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x2, y3, X3, Y3, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range_default2(ceil(X02 / DX) * DX, X12, DX).map(X3).concat(range_default2(ceil(Y02 / DY) * DY, Y12, DY).map(Y3)).concat(range_default2(ceil(x05 / dx) * dx, x12, dx).filter(function(x3) {
      return abs2(x3 % DX) > epsilon4;
    }).map(x2)).concat(range_default2(ceil(y05 / dy) * dy, y12, dy).filter(function(y4) {
      return abs2(y4 % DY) > epsilon4;
    }).map(y3));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates2) {
      return { type: "LineString", coordinates: coordinates2 };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X3(X02).concat(
          Y3(Y12).slice(1),
          X3(X12).reverse().slice(1),
          Y3(Y02).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_2) {
    if (!arguments.length)
      return graticule2.extentMinor();
    return graticule2.extentMajor(_2).extentMinor(_2);
  };
  graticule2.extentMajor = function(_2) {
    if (!arguments.length)
      return [[X02, Y02], [X12, Y12]];
    X02 = +_2[0][0], X12 = +_2[1][0];
    Y02 = +_2[0][1], Y12 = +_2[1][1];
    if (X02 > X12)
      _2 = X02, X02 = X12, X12 = _2;
    if (Y02 > Y12)
      _2 = Y02, Y02 = Y12, Y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_2) {
    if (!arguments.length)
      return [[x05, y05], [x12, y12]];
    x05 = +_2[0][0], x12 = +_2[1][0];
    y05 = +_2[0][1], y12 = +_2[1][1];
    if (x05 > x12)
      _2 = x05, x05 = x12, x12 = _2;
    if (y05 > y12)
      _2 = y05, y05 = y12, y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_2) {
    if (!arguments.length)
      return graticule2.stepMinor();
    return graticule2.stepMajor(_2).stepMinor(_2);
  };
  graticule2.stepMajor = function(_2) {
    if (!arguments.length)
      return [DX, DY];
    DX = +_2[0], DY = +_2[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_2) {
    if (!arguments.length)
      return [dx, dy];
    dx = +_2[0], dy = +_2[1];
    return graticule2;
  };
  graticule2.precision = function(_2) {
    if (!arguments.length)
      return precision;
    precision = +_2;
    x2 = graticuleX(y05, y12, 90);
    y3 = graticuleY(x05, x12, precision);
    X3 = graticuleX(Y02, Y12, 90);
    Y3 = graticuleY(X02, X12, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon4], [180, 90 - epsilon4]]).extentMinor([[-180, -80 - epsilon4], [180, 80 + epsilon4]]);
}

// node_modules/d3-geo/src/identity.js
function identity_default5(x2) {
  return x2;
}

// node_modules/d3-geo/src/path/area.js
var areaSum2 = adder_default();
var areaRingSum2 = adder_default();
var x00;
var y00;
var x0;
var y0;
var areaStream2 = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaStream2.lineStart = areaRingStart;
    areaStream2.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream2.lineStart = areaStream2.lineEnd = areaStream2.point = noop;
    areaSum2.add(abs2(areaRingSum2));
    areaRingSum2.reset();
  },
  result: function() {
    var area = areaSum2 / 2;
    areaSum2.reset();
    return area;
  }
};
function areaRingStart() {
  areaStream2.point = areaPointFirst;
}
function areaPointFirst(x2, y3) {
  areaStream2.point = areaPoint;
  x00 = x0 = x2, y00 = y0 = y3;
}
function areaPoint(x2, y3) {
  areaRingSum2.add(y0 * x2 - x0 * y3);
  x0 = x2, y0 = y3;
}
function areaRingEnd() {
  areaPoint(x00, y00);
}
var area_default2 = areaStream2;

// node_modules/d3-geo/src/path/bounds.js
var x02 = Infinity;
var y02 = x02;
var x1 = -x02;
var y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x02, y02], [x1, y1]];
    x1 = y1 = -(y02 = x02 = Infinity);
    return bounds;
  }
};
function boundsPoint(x2, y3) {
  if (x2 < x02)
    x02 = x2;
  if (x2 > x1)
    x1 = x2;
  if (y3 < y02)
    y02 = y3;
  if (y3 > y1)
    y1 = y3;
}
var bounds_default = boundsStream;

// node_modules/d3-geo/src/path/centroid.js
var X0 = 0;
var Y0 = 0;
var Z0 = 0;
var X1 = 0;
var Y1 = 0;
var Z1 = 0;
var X2 = 0;
var Y2 = 0;
var Z2 = 0;
var x002;
var y002;
var x03;
var y03;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};
function centroidPoint(x2, y3) {
  X0 += x2;
  Y0 += y3;
  ++Z0;
}
function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x2, y3) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x03 = x2, y03 = y3);
}
function centroidPointLine(x2, y3) {
  var dx = x2 - x03, dy = y3 - y03, z2 = sqrt4(dx * dx + dy * dy);
  X1 += z2 * (x03 + x2) / 2;
  Y1 += z2 * (y03 + y3) / 2;
  Z1 += z2;
  centroidPoint(x03 = x2, y03 = y3);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x2, y3) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x002 = x03 = x2, y002 = y03 = y3);
}
function centroidPointRing(x2, y3) {
  var dx = x2 - x03, dy = y3 - y03, z2 = sqrt4(dx * dx + dy * dy);
  X1 += z2 * (x03 + x2) / 2;
  Y1 += z2 * (y03 + y3) / 2;
  Z1 += z2;
  z2 = y03 * x2 - x03 * y3;
  X2 += z2 * (x03 + x2);
  Y2 += z2 * (y03 + y3);
  Z2 += z2 * 3;
  centroidPoint(x03 = x2, y03 = y3);
}
var centroid_default = centroidStream;

// node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_2) {
    return this._radius = _2, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x2, y3) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x2, y3);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x2, y3);
        break;
      }
      default: {
        this._context.moveTo(x2 + this._radius, y3);
        this._context.arc(x2, y3, this._radius, 0, tau3);
        break;
      }
    }
  },
  result: noop
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum2 = adder_default();
var lengthRing;
var x003;
var y003;
var x04;
var y04;
var lengthStream2 = {
  point: noop,
  lineStart: function() {
    lengthStream2.point = lengthPointFirst2;
  },
  lineEnd: function() {
    if (lengthRing)
      lengthPoint2(x003, y003);
    lengthStream2.point = noop;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum2;
    lengthSum2.reset();
    return length;
  }
};
function lengthPointFirst2(x2, y3) {
  lengthStream2.point = lengthPoint2;
  x003 = x04 = x2, y003 = y04 = y3;
}
function lengthPoint2(x2, y3) {
  x04 -= x2, y04 -= y3;
  lengthSum2.add(sqrt4(x04 * x04 + y04 * y04));
  x04 = x2, y04 = y3;
}
var measure_default = lengthStream2;

// node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_2) {
    if ((_2 = +_2) !== this._radius)
      this._radius = _2, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._string.push("Z");
    this._point = NaN;
  },
  point: function(x2, y3) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x2, ",", y3);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x2, ",", y3);
        break;
      }
      default: {
        if (this._circle == null)
          this._circle = circle(this._radius);
        this._string.push("M", x2, ",", y3, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

// node_modules/d3-geo/src/path/index.js
function path_default3(projection2, context) {
  var pointRadius = 4.5, projectionStream, contextStream;
  function path2(object2) {
    if (object2) {
      if (typeof pointRadius === "function")
        contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object2, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path2.area = function(object2) {
    stream_default(object2, projectionStream(area_default2));
    return area_default2.result();
  };
  path2.measure = function(object2) {
    stream_default(object2, projectionStream(measure_default));
    return measure_default.result();
  };
  path2.bounds = function(object2) {
    stream_default(object2, projectionStream(bounds_default));
    return bounds_default.result();
  };
  path2.centroid = function(object2) {
    stream_default(object2, projectionStream(centroid_default));
    return centroid_default.result();
  };
  path2.projection = function(_2) {
    return arguments.length ? (projectionStream = _2 == null ? (projection2 = null, identity_default5) : (projection2 = _2).stream, path2) : projection2;
  };
  path2.context = function(_2) {
    if (!arguments.length)
      return context;
    contextStream = _2 == null ? (context = null, new PathString()) : new PathContext(context = _2);
    if (typeof pointRadius !== "function")
      contextStream.pointRadius(pointRadius);
    return path2;
  };
  path2.pointRadius = function(_2) {
    if (!arguments.length)
      return pointRadius;
    pointRadius = typeof _2 === "function" ? _2 : (contextStream.pointRadius(+_2), +_2);
    return path2;
  };
  return path2.projection(projection2).context(context);
}

// node_modules/d3-geo/src/transform.js
function transformer2(methods) {
  return function(stream) {
    var s2 = new TransformStream();
    for (var key in methods)
      s2[key] = methods[key];
    s2.stream = stream;
    return s2;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x2, y3) {
    this.stream.point(x2, y3);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object2) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null)
    projection2.clipExtent(null);
  stream_default(object2, projection2.stream(bounds_default));
  fitBounds(bounds_default.result());
  if (clip != null)
    projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent, object2) {
  return fit(projection2, function(b) {
    var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k2 = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x2 = +extent[0][0] + (w - k2 * (b[1][0] + b[0][0])) / 2, y3 = +extent[0][1] + (h - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object2);
}
function fitSize(projection2, size, object2) {
  return fitExtent(projection2, [[0, 0], size], object2);
}
function fitWidth(projection2, width, object2) {
  return fit(projection2, function(b) {
    var w = +width, k2 = w / (b[1][0] - b[0][0]), x2 = (w - k2 * (b[1][0] + b[0][0])) / 2, y3 = -k2 * b[0][1];
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object2);
}
function fitHeight(projection2, height, object2) {
  return fit(projection2, function(b) {
    var h = +height, k2 = h / (b[1][1] - b[0][1]), x2 = -k2 * b[0][0], y3 = (h - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object2);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos2(30 * radians);
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer2({
    point: function(x2, y3) {
      x2 = project(x2, y3);
      this.stream.point(x2[0], x2[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x05, y05, lambda02, a0, b0, c0, x12, y12, lambda1, a1, b1, c1, depth, stream) {
    var dx = x12 - x05, dy = y12 - y05, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a2 = a0 + a1, b = b0 + b1, c3 = c0 + c1, m2 = sqrt4(a2 * a2 + b * b + c3 * c3), phi2 = asin2(c3 /= m2), lambda2 = abs2(abs2(c3) - 1) < epsilon4 || abs2(lambda02 - lambda1) < epsilon4 ? (lambda02 + lambda1) / 2 : atan22(b, a2), p = project(lambda2, phi2), x2 = p[0], y22 = p[1], dx2 = x2 - x05, dy2 = y22 - y05, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x05, y05, lambda02, a0, b0, c0, x2, y22, lambda2, a2 /= m2, b /= m2, c3, depth, stream);
        stream.point(x2, y22);
        resampleLineTo(x2, y22, lambda2, a2, b, c3, x12, y12, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x004, y004, a00, b00, c00, lambda02, x05, y05, a0, b0, c0;
    var resampleStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point6(x2, y3) {
      x2 = project(x2, y3);
      stream.point(x2[0], x2[1]);
    }
    function lineStart() {
      x05 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }
    function linePoint(lambda, phi2) {
      var c3 = cartesian([lambda, phi2]), p = project(lambda, phi2);
      resampleLineTo(x05, y05, lambda02, a0, b0, c0, x05 = p[0], y05 = p[1], lambda02 = lambda, a0 = c3[0], b0 = c3[1], c0 = c3[2], maxDepth, stream);
      stream.point(x05, y05);
    }
    function lineEnd() {
      resampleStream.point = point6;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi2) {
      linePoint(lambda00 = lambda, phi2), x004 = x05, y004 = y05, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }
    function ringEnd() {
      resampleLineTo(x05, y05, lambda02, a0, b0, c0, x004, y004, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer2({
  point: function(x2, y3) {
    this.stream.point(x2 * radians, y3 * radians);
  }
});
function transformRotate(rotate) {
  return transformer2({
    point: function(x2, y3) {
      var r2 = rotate(x2, y3);
      return this.stream.point(r2[0], r2[1]);
    }
  });
}
function scaleTranslate(k2, dx, dy, sx, sy) {
  function transform(x2, y3) {
    x2 *= sx;
    y3 *= sy;
    return [dx + k2 * x2, dy - k2 * y3];
  }
  transform.invert = function(x2, y3) {
    return [(x2 - dx) / k2 * sx, (dy - y3) / k2 * sy];
  };
  return transform;
}
function scaleTranslateRotate(k2, dx, dy, sx, sy, alpha) {
  var cosAlpha = cos2(alpha), sinAlpha = sin2(alpha), a2 = cosAlpha * k2, b = sinAlpha * k2, ai = cosAlpha / k2, bi = sinAlpha / k2, ci = (sinAlpha * dy - cosAlpha * dx) / k2, fi = (sinAlpha * dx + cosAlpha * dy) / k2;
  function transform(x2, y3) {
    x2 *= sx;
    y3 *= sy;
    return [a2 * x2 - b * y3 + dx, dy - b * x2 - a2 * y3];
  }
  transform.invert = function(x2, y3) {
    return [sx * (ai * x2 - bi * y3 + ci), sy * (fi - bi * x2 - ai * y3)];
  };
  return transform;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k2 = 150, x2 = 480, y3 = 250, lambda = 0, phi2 = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x05 = null, y05, x12, y12, postclip = identity_default5, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection2(point6) {
    return projectRotateTransform(point6[0] * radians, point6[1] * radians);
  }
  function invert(point6) {
    point6 = projectRotateTransform.invert(point6[0], point6[1]);
    return point6 && [point6[0] * degrees3, point6[1] * degrees3];
  }
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_2) {
    return arguments.length ? (preclip = _2, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_2) {
    return arguments.length ? (postclip = _2, x05 = y05 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_2) {
    return arguments.length ? (preclip = +_2 ? circle_default2(theta = _2 * radians) : (theta = null, antimeridian_default), reset()) : theta * degrees3;
  };
  projection2.clipExtent = function(_2) {
    return arguments.length ? (postclip = _2 == null ? (x05 = y05 = x12 = y12 = null, identity_default5) : clipRectangle(x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  projection2.scale = function(_2) {
    return arguments.length ? (k2 = +_2, recenter()) : k2;
  };
  projection2.translate = function(_2) {
    return arguments.length ? (x2 = +_2[0], y3 = +_2[1], recenter()) : [x2, y3];
  };
  projection2.center = function(_2) {
    return arguments.length ? (lambda = _2[0] % 360 * radians, phi2 = _2[1] % 360 * radians, recenter()) : [lambda * degrees3, phi2 * degrees3];
  };
  projection2.rotate = function(_2) {
    return arguments.length ? (deltaLambda = _2[0] % 360 * radians, deltaPhi = _2[1] % 360 * radians, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees3, deltaPhi * degrees3, deltaGamma * degrees3];
  };
  projection2.angle = function(_2) {
    return arguments.length ? (alpha = _2 % 360 * radians, recenter()) : alpha * degrees3;
  };
  projection2.reflectX = function(_2) {
    return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_2) {
    return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_2) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset()) : sqrt4(delta2);
  };
  projection2.fitExtent = function(extent, object2) {
    return fitExtent(projection2, extent, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  function recenter() {
    var center = scaleTranslateRotate(k2, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi2)), transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k2, x2 - center[0], y3 - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale) {
  return function(x2, y3) {
    var cx = cos2(x2), cy = cos2(y3), k2 = scale(cx * cy);
    return [
      k2 * cy * sin2(x2),
      k2 * sin2(y3)
    ];
  };
}
function azimuthalInvert(angle) {
  return function(x2, y3) {
    var z2 = sqrt4(x2 * x2 + y3 * y3), c3 = angle(z2), sc = sin2(c3), cc = cos2(c3);
    return [
      atan22(x2 * sc, z2 * cc),
      asin2(z2 && y3 * sc / z2)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt4(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z2) {
  return 2 * asin2(z2 / 2);
});
function azimuthalEqualArea_default() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c3) {
  return (c3 = acos2(c3)) && c3 / sin2(c3);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z2) {
  return z2;
});
function azimuthalEquidistant_default() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi2) {
  return [lambda, log2(tan((halfPi2 + phi2) / 2))];
}
mercatorRaw.invert = function(x2, y3) {
  return [x2, 2 * atan(exp(y3)) - halfPi2];
};
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau3);
}
function mercatorProjection(project) {
  var m2 = projection(project), center = m2.center, scale = m2.scale, translate = m2.translate, clipExtent = m2.clipExtent, x05 = null, y05, x12, y12;
  m2.scale = function(_2) {
    return arguments.length ? (scale(_2), reclip()) : scale();
  };
  m2.translate = function(_2) {
    return arguments.length ? (translate(_2), reclip()) : translate();
  };
  m2.center = function(_2) {
    return arguments.length ? (center(_2), reclip()) : center();
  };
  m2.clipExtent = function(_2) {
    return arguments.length ? (_2 == null ? x05 = y05 = x12 = y12 = null : (x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reclip()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  function reclip() {
    var k2 = pi3 * scale(), t4 = m2(rotation_default(m2.rotate()).invert([0, 0]));
    return clipExtent(x05 == null ? [[t4[0] - k2, t4[1] - k2], [t4[0] + k2, t4[1] + k2]] : project === mercatorRaw ? [[Math.max(t4[0] - k2, x05), y05], [Math.min(t4[0] + k2, x12), y12]] : [[x05, Math.max(t4[1] - k2, y05)], [x12, Math.min(t4[1] + k2, y12)]]);
  }
  return reclip();
}

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi2) {
  return [lambda, phi2];
}
equirectangularRaw.invert = equirectangularRaw;
function equirectangular_default() {
  return projection(equirectangularRaw).scale(152.63);
}

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt4(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi2) {
  var l = asin2(M * sin2(phi2)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos2(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x2, y3) {
  var l = y3, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i2 = 0, delta, fy, fpy; i2 < iterations; ++i2) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y3;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs2(delta) < epsilon22)
      break;
  }
  return [
    M * x2 * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos2(l),
    asin2(sin2(l) / M)
  ];
};
function equalEarth_default() {
  return projection(equalEarthRaw).scale(177.158);
}

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x2, y3) {
  var cy = cos2(y3), k2 = cos2(x2) * cy;
  return [cy * sin2(x2) / k2, sin2(y3) / k2];
}
gnomonicRaw.invert = azimuthalInvert(atan);
function gnomonic_default() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi2) {
  var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
  return [
    lambda * (0.8707 - 0.131979 * phi22 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi22 - 1529e-6 * phi4))),
    phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x2, y3) {
  var phi2 = y3, i2 = 25, delta;
  do {
    var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
    phi2 -= delta = (phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4))) - y3) / (1.007226 + phi22 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi22 - 5916e-6 * 11 * phi4)));
  } while (abs2(delta) > epsilon4 && --i2 > 0);
  return [
    x2 / (0.8707 + (phi22 = phi2 * phi2) * (-0.131979 + phi22 * (-0.013791 + phi22 * phi22 * phi22 * (3971e-6 - 1529e-6 * phi22)))),
    phi2
  ];
};
function naturalEarth1_default() {
  return projection(naturalEarth1Raw).scale(175.295);
}

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x2, y3) {
  return [cos2(y3) * sin2(x2), sin2(y3)];
}
orthographicRaw.invert = azimuthalInvert(asin2);
function orthographic_default() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon4);
}

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x2, y3) {
  var cy = cos2(y3), k2 = 1 + cos2(x2) * cy;
  return [cy * sin2(x2) / k2, sin2(y3) / k2];
}
stereographicRaw.invert = azimuthalInvert(function(z2) {
  return 2 * atan(z2);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi2) {
  return [log2(tan((halfPi2 + phi2) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x2, y3) {
  return [-y3, 2 * atan(exp(x2)) - halfPi2];
};
function transverseMercator_default() {
  var m2 = mercatorProjection(transverseMercatorRaw), center = m2.center, rotate = m2.rotate;
  m2.center = function(_2) {
    return arguments.length ? center([-_2[1], _2[0]]) : (_2 = center(), [_2[1], -_2[0]]);
  };
  m2.rotate = function(_2) {
    return arguments.length ? rotate([_2[0], _2[1], _2.length > 2 ? _2[2] + 90 : 90]) : (_2 = rotate(), [_2[0], _2[1], _2[2] - 90]);
  };
  return rotate([0, 0, 90]).scale(159.155);
}

// node_modules/@nivo/geo/node_modules/@nivo/legends/dist/nivo-legends.es.js
var import_react5 = __toESM(require_react());
var import_isFunction2 = __toESM(require_isFunction());
var import_prop_types4 = __toESM(require_prop_types());
var import_isNumber = __toESM(require_isNumber());
var import_isPlainObject2 = __toESM(require_isPlainObject());
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys4(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly)
      symbols2 = symbols2.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread24(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys4(Object(source), true).forEach(function(key) {
        _defineProperty4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit4(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _unsupportedIterableToArray4(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray4(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(n2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray4(o2, minLen);
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray4(arr, i2) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i2) || _unsupportedIterableToArray4(arr, i2) || _nonIterableRest4();
}
var DIRECTION_ROW = "row";
var DIRECTION_COLUMN = "column";
var ANCHOR_TOP = "top";
var ANCHOR_TOP_RIGHT = "top-right";
var ANCHOR_RIGHT = "right";
var ANCHOR_BOTTOM_RIGHT = "bottom-right";
var ANCHOR_BOTTOM = "bottom";
var ANCHOR_BOTTOM_LEFT = "bottom-left";
var ANCHOR_LEFT = "left";
var ANCHOR_TOP_LEFT = "top-left";
var ANCHOR_CENTER = "center";
var DIRECTION_LEFT_TO_RIGHT = "left-to-right";
var DIRECTION_RIGHT_TO_LEFT = "right-to-left";
var DIRECTION_TOP_TO_BOTTOM = "top-to-bottom";
var DIRECTION_BOTTOM_TO_TOP = "bottom-to-top";
var legendEffectPropType = import_prop_types4.default.shape({
  on: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["hover"])]).isRequired,
  style: import_prop_types4.default.shape({
    itemTextColor: import_prop_types4.default.string,
    itemBackground: import_prop_types4.default.string,
    itemOpacity: import_prop_types4.default.number,
    symbolSize: import_prop_types4.default.number,
    symbolBorderWidth: import_prop_types4.default.number,
    symbolBorderColor: import_prop_types4.default.string
  }).isRequired
});
var symbolPropTypes = {
  symbolShape: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.func]),
  symbolSize: import_prop_types4.default.number,
  symbolSpacing: import_prop_types4.default.number,
  symbolBorderWidth: import_prop_types4.default.number,
  symbolBorderColor: import_prop_types4.default.string
};
var interactivityPropTypes = {
  onClick: import_prop_types4.default.func,
  onMouseEnter: import_prop_types4.default.func,
  onMouseLeave: import_prop_types4.default.func
};
var datumPropType = import_prop_types4.default.shape({
  id: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]).isRequired,
  label: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]).isRequired,
  color: import_prop_types4.default.string.isRequired,
  fill: import_prop_types4.default.string
});
var LegendPropShape = _objectSpread24(_objectSpread24(_objectSpread24({
  data: import_prop_types4.default.arrayOf(datumPropType),
  anchor: import_prop_types4.default.oneOf([ANCHOR_TOP, ANCHOR_TOP_RIGHT, ANCHOR_RIGHT, ANCHOR_BOTTOM_RIGHT, ANCHOR_BOTTOM, ANCHOR_BOTTOM_LEFT, ANCHOR_LEFT, ANCHOR_TOP_LEFT, ANCHOR_CENTER]).isRequired,
  translateX: import_prop_types4.default.number,
  translateY: import_prop_types4.default.number,
  direction: import_prop_types4.default.oneOf([DIRECTION_ROW, DIRECTION_COLUMN]).isRequired,
  itemsSpacing: import_prop_types4.default.number,
  itemWidth: import_prop_types4.default.number.isRequired,
  itemHeight: import_prop_types4.default.number.isRequired,
  itemDirection: import_prop_types4.default.oneOf([DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_TOP_TO_BOTTOM, DIRECTION_BOTTOM_TO_TOP]),
  itemTextColor: import_prop_types4.default.string,
  itemBackground: import_prop_types4.default.string,
  itemOpacity: import_prop_types4.default.number
}, symbolPropTypes), interactivityPropTypes), {}, {
  effects: import_prop_types4.default.arrayOf(legendEffectPropType)
});
var zeroPadding = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var computeDimensions = function computeDimensions2(_ref) {
  var direction = _ref.direction, itemsSpacing = _ref.itemsSpacing, _padding = _ref.padding, itemCount = _ref.itemCount, itemWidth = _ref.itemWidth, itemHeight = _ref.itemHeight;
  var padding;
  if ((0, import_isNumber.default)(_padding)) {
    padding = {
      top: _padding,
      right: _padding,
      bottom: _padding,
      left: _padding
    };
  } else if ((0, import_isPlainObject2.default)(_padding)) {
    padding = _objectSpread24(_objectSpread24({}, zeroPadding), _padding);
  } else {
    throw new TypeError("Invalid property padding, must be one of: number, object");
  }
  var horizontalPadding = padding.left + padding.right;
  var verticalPadding = padding.top + padding.bottom;
  var width = itemWidth + horizontalPadding;
  var height = itemHeight + verticalPadding;
  var spacing = (itemCount - 1) * itemsSpacing;
  if (direction === DIRECTION_ROW) {
    width = itemWidth * itemCount + spacing + horizontalPadding;
  } else if (direction === DIRECTION_COLUMN) {
    height = itemHeight * itemCount + spacing + verticalPadding;
  }
  return {
    width,
    height,
    padding
  };
};
var computePositionFromAnchor = function computePositionFromAnchor2(_ref2) {
  var anchor = _ref2.anchor, translateX = _ref2.translateX, translateY = _ref2.translateY, containerWidth = _ref2.containerWidth, containerHeight = _ref2.containerHeight, width = _ref2.width, height = _ref2.height;
  var x2 = translateX;
  var y3 = translateY;
  switch (anchor) {
    case ANCHOR_TOP:
      x2 += (containerWidth - width) / 2;
      break;
    case ANCHOR_TOP_RIGHT:
      x2 += containerWidth - width;
      break;
    case ANCHOR_RIGHT:
      x2 += containerWidth - width;
      y3 += (containerHeight - height) / 2;
      break;
    case ANCHOR_BOTTOM_RIGHT:
      x2 += containerWidth - width;
      y3 += containerHeight - height;
      break;
    case ANCHOR_BOTTOM:
      x2 += (containerWidth - width) / 2;
      y3 += containerHeight - height;
      break;
    case ANCHOR_BOTTOM_LEFT:
      y3 += containerHeight - height;
      break;
    case ANCHOR_LEFT:
      y3 += (containerHeight - height) / 2;
      break;
    case ANCHOR_CENTER:
      x2 += (containerWidth - width) / 2;
      y3 += (containerHeight - height) / 2;
      break;
  }
  return {
    x: x2,
    y: y3
  };
};
var computeItemLayout = function computeItemLayout2(_ref3) {
  var direction = _ref3.direction, justify = _ref3.justify, symbolSize = _ref3.symbolSize, symbolSpacing = _ref3.symbolSpacing, width = _ref3.width, height = _ref3.height;
  var symbolX;
  var symbolY;
  var labelX;
  var labelY;
  var labelAnchor;
  var labelAlignment;
  switch (direction) {
    case DIRECTION_LEFT_TO_RIGHT:
      symbolX = 0;
      symbolY = (height - symbolSize) / 2;
      labelY = height / 2;
      labelAlignment = "central";
      if (justify === true) {
        labelX = width;
        labelAnchor = "end";
      } else {
        labelX = symbolSize + symbolSpacing;
        labelAnchor = "start";
      }
      break;
    case DIRECTION_RIGHT_TO_LEFT:
      symbolX = width - symbolSize;
      symbolY = (height - symbolSize) / 2;
      labelY = height / 2;
      labelAlignment = "central";
      if (justify === true) {
        labelX = 0;
        labelAnchor = "start";
      } else {
        labelX = width - symbolSize - symbolSpacing;
        labelAnchor = "end";
      }
      break;
    case DIRECTION_TOP_TO_BOTTOM:
      symbolX = (width - symbolSize) / 2;
      symbolY = 0;
      labelX = width / 2;
      labelAnchor = "middle";
      if (justify === true) {
        labelY = height;
        labelAlignment = "alphabetic";
      } else {
        labelY = symbolSize + symbolSpacing;
        labelAlignment = "text-before-edge";
      }
      break;
    case DIRECTION_BOTTOM_TO_TOP:
      symbolX = (width - symbolSize) / 2;
      symbolY = height - symbolSize;
      labelX = width / 2;
      labelAnchor = "middle";
      if (justify === true) {
        labelY = 0;
        labelAlignment = "text-before-edge";
      } else {
        labelY = height - symbolSize - symbolSpacing;
        labelAlignment = "alphabetic";
      }
      break;
  }
  return {
    symbolX,
    symbolY,
    labelX,
    labelY,
    labelAnchor,
    labelAlignment
  };
};
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _setPrototypeOf2(o2, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf2(o2, p);
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _getPrototypeOf2(o2) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf2(o2);
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn2(self2, call2) {
  if (call2 && (_typeof2(call2) === "object" || typeof call2 === "function")) {
    return call2;
  }
  return _assertThisInitialized2(self2);
}
function _createSuper2(Derived) {
  return function() {
    var Super = _getPrototypeOf2(Derived), result;
    if (_isNativeReflectConstruct2()) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
var symbolPropTypes$1 = {
  x: import_prop_types4.default.number.isRequired,
  y: import_prop_types4.default.number.isRequired,
  size: import_prop_types4.default.number.isRequired,
  fill: import_prop_types4.default.string.isRequired,
  borderWidth: import_prop_types4.default.number.isRequired,
  borderColor: import_prop_types4.default.string.isRequired
};
var symbolDefaultProps = {
  borderWidth: 0,
  borderColor: "transparent"
};
var SymbolCircle = function(_PureComponent) {
  _inherits2(SymbolCircle2, _PureComponent);
  var _super = _createSuper2(SymbolCircle2);
  function SymbolCircle2() {
    _classCallCheck2(this, SymbolCircle2);
    return _super.apply(this, arguments);
  }
  _createClass2(SymbolCircle2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, x2 = _this$props.x, y3 = _this$props.y, size = _this$props.size, fill = _this$props.fill, borderWidth = _this$props.borderWidth, borderColor = _this$props.borderColor;
      return import_react5.default.createElement("circle", {
        r: size / 2,
        cx: x2 + size / 2,
        cy: y3 + size / 2,
        fill,
        strokeWidth: borderWidth,
        stroke: borderColor,
        style: {
          pointerEvents: "none"
        }
      });
    }
  }]);
  return SymbolCircle2;
}(import_react5.PureComponent);
SymbolCircle.defaultProps = _objectSpread24({}, symbolDefaultProps);
var SymbolDiamond = function(_PureComponent) {
  _inherits2(SymbolDiamond2, _PureComponent);
  var _super = _createSuper2(SymbolDiamond2);
  function SymbolDiamond2() {
    _classCallCheck2(this, SymbolDiamond2);
    return _super.apply(this, arguments);
  }
  _createClass2(SymbolDiamond2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, x2 = _this$props.x, y3 = _this$props.y, size = _this$props.size, fill = _this$props.fill, borderWidth = _this$props.borderWidth, borderColor = _this$props.borderColor;
      return import_react5.default.createElement("g", {
        transform: "translate(".concat(x2, ",").concat(y3, ")")
      }, import_react5.default.createElement("path", {
        d: "\n                    M".concat(size / 2, " 0\n                    L").concat(size * 0.8, " ").concat(size / 2, "\n                    L").concat(size / 2, " ").concat(size, "\n                    L").concat(size * 0.2, " ").concat(size / 2, "\n                    L").concat(size / 2, " 0\n                "),
        fill,
        strokeWidth: borderWidth,
        stroke: borderColor,
        style: {
          pointerEvents: "none"
        }
      }));
    }
  }]);
  return SymbolDiamond2;
}(import_react5.PureComponent);
SymbolDiamond.defaultProps = _objectSpread24({}, symbolDefaultProps);
var SymbolSquare = function(_PureComponent) {
  _inherits2(SymbolSquare2, _PureComponent);
  var _super = _createSuper2(SymbolSquare2);
  function SymbolSquare2() {
    _classCallCheck2(this, SymbolSquare2);
    return _super.apply(this, arguments);
  }
  _createClass2(SymbolSquare2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, x2 = _this$props.x, y3 = _this$props.y, size = _this$props.size, fill = _this$props.fill, borderWidth = _this$props.borderWidth, borderColor = _this$props.borderColor;
      return import_react5.default.createElement("rect", {
        x: x2,
        y: y3,
        fill,
        strokeWidth: borderWidth,
        stroke: borderColor,
        width: size,
        height: size,
        style: {
          pointerEvents: "none"
        }
      });
    }
  }]);
  return SymbolSquare2;
}(import_react5.PureComponent);
SymbolSquare.defaultProps = _objectSpread24({}, symbolDefaultProps);
var SymbolTriangle = function(_PureComponent) {
  _inherits2(SymbolTriangle2, _PureComponent);
  var _super = _createSuper2(SymbolTriangle2);
  function SymbolTriangle2() {
    _classCallCheck2(this, SymbolTriangle2);
    return _super.apply(this, arguments);
  }
  _createClass2(SymbolTriangle2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, x2 = _this$props.x, y3 = _this$props.y, size = _this$props.size, fill = _this$props.fill, borderWidth = _this$props.borderWidth, borderColor = _this$props.borderColor;
      return import_react5.default.createElement("g", {
        transform: "translate(".concat(x2, ",").concat(y3, ")")
      }, import_react5.default.createElement("path", {
        d: "\n                M".concat(size / 2, " 0\n                L").concat(size, " ").concat(size, "\n                L0 ").concat(size, "\n                L").concat(size / 2, " 0\n            "),
        fill,
        strokeWidth: borderWidth,
        stroke: borderColor,
        style: {
          pointerEvents: "none"
        }
      }));
    }
  }]);
  return SymbolTriangle2;
}(import_react5.PureComponent);
SymbolTriangle.defaultProps = _objectSpread24({}, symbolDefaultProps);
var symbolByShape = {
  circle: SymbolCircle,
  diamond: SymbolDiamond,
  square: SymbolSquare,
  triangle: SymbolTriangle
};
var LegendSvgItem = function LegendSvgItem2(_ref) {
  var x2 = _ref.x, y3 = _ref.y, width = _ref.width, height = _ref.height, data = _ref.data, direction = _ref.direction, justify = _ref.justify, textColor = _ref.textColor, background = _ref.background, opacity = _ref.opacity, symbolShape = _ref.symbolShape, symbolSize = _ref.symbolSize, symbolSpacing = _ref.symbolSpacing, symbolBorderWidth = _ref.symbolBorderWidth, symbolBorderColor = _ref.symbolBorderColor, onClick = _ref.onClick, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, effects = _ref.effects;
  var _useState = (0, import_react5.useState)({}), _useState2 = _slicedToArray4(_useState, 2), style = _useState2[0], setStyle = _useState2[1];
  var theme = useTheme();
  var handleClick = (0, import_react5.useCallback)(function(event2) {
    return onClick && onClick(data, event2);
  }, [onClick, data]);
  var handleMouseEnter = (0, import_react5.useCallback)(function(event2) {
    if (effects.length > 0) {
      var applyEffects = effects.filter(function(_ref2) {
        var on = _ref2.on;
        return on === "hover";
      });
      var _style = applyEffects.reduce(function(acc, effect) {
        return _objectSpread24(_objectSpread24({}, acc), effect.style);
      }, {});
      setStyle(_style);
    }
    if (onMouseEnter === void 0)
      return;
    onMouseEnter(data, event2);
  }, [onMouseEnter, data, effects]);
  var handleMouseLeave = (0, import_react5.useCallback)(function() {
    if (effects.length > 0) {
      var applyEffects = effects.filter(function(_ref3) {
        var on = _ref3.on;
        return on !== "hover";
      });
      var _style2 = applyEffects.reduce(function(acc, effect) {
        return _objectSpread24(_objectSpread24({}, acc), effect.style);
      }, {});
      setStyle(_style2);
    }
    if (onMouseLeave === void 0)
      return;
    onMouseLeave(data, event);
  }, [onMouseLeave, data, effects]);
  var _computeItemLayout = computeItemLayout({
    direction,
    justify,
    symbolSize: style.symbolSize || symbolSize,
    symbolSpacing,
    width,
    height
  }), symbolX = _computeItemLayout.symbolX, symbolY = _computeItemLayout.symbolY, labelX = _computeItemLayout.labelX, labelY = _computeItemLayout.labelY, labelAnchor = _computeItemLayout.labelAnchor, labelAlignment = _computeItemLayout.labelAlignment;
  var isInteractive = [onClick, onMouseEnter, onMouseLeave].some(function(handler) {
    return handler !== void 0;
  });
  var Symbol2;
  if ((0, import_isFunction2.default)(symbolShape)) {
    Symbol2 = symbolShape;
  } else {
    Symbol2 = symbolByShape[symbolShape];
  }
  return import_react5.default.createElement("g", {
    transform: "translate(".concat(x2, ",").concat(y3, ")"),
    style: {
      opacity: style.itemOpacity !== void 0 ? style.itemOpacity : opacity
    }
  }, import_react5.default.createElement("rect", {
    width,
    height,
    fill: style.itemBackground || background,
    style: {
      cursor: isInteractive ? "pointer" : "auto"
    },
    onClick: handleClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }), import_react5.default.createElement(Symbol2, {
    id: data.id,
    x: symbolX,
    y: symbolY,
    size: style.symbolSize || symbolSize,
    fill: data.fill || data.color,
    borderWidth: style.symbolBorderWidth !== void 0 ? style.symbolBorderWidth : symbolBorderWidth,
    borderColor: style.symbolBorderColor || symbolBorderColor
  }), import_react5.default.createElement("text", {
    textAnchor: labelAnchor,
    style: _objectSpread24(_objectSpread24({}, theme.legends.text), {}, {
      fill: style.itemTextColor || theme.legends.text.fill || textColor,
      dominantBaseline: labelAlignment,
      pointerEvents: "none",
      userSelect: "none"
    }),
    x: labelX,
    y: labelY
  }, data.label));
};
LegendSvgItem.displayName = "LegendSvgItem";
LegendSvgItem.defaultProps = {
  direction: "left-to-right",
  justify: false,
  textColor: "black",
  background: "transparent",
  opacity: 1,
  symbolShape: "square",
  symbolSize: 16,
  symbolSpacing: 8,
  symbolBorderWidth: 0,
  symbolBorderColor: "transparent",
  effects: []
};
var LegendSvg = function LegendSvg2(_ref) {
  var data = _ref.data, x2 = _ref.x, y3 = _ref.y, direction = _ref.direction, _padding = _ref.padding, justify = _ref.justify, effects = _ref.effects, itemWidth = _ref.itemWidth, itemHeight = _ref.itemHeight, itemDirection = _ref.itemDirection, itemsSpacing = _ref.itemsSpacing, itemTextColor = _ref.itemTextColor, itemBackground = _ref.itemBackground, itemOpacity = _ref.itemOpacity, symbolShape = _ref.symbolShape, symbolSize = _ref.symbolSize, symbolSpacing = _ref.symbolSpacing, symbolBorderWidth = _ref.symbolBorderWidth, symbolBorderColor = _ref.symbolBorderColor, onClick = _ref.onClick, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave;
  var _computeDimensions = computeDimensions({
    itemCount: data.length,
    itemWidth,
    itemHeight,
    itemsSpacing,
    direction,
    padding: _padding
  }), padding = _computeDimensions.padding;
  var xStep = 0;
  var yStep = 0;
  if (direction === "row") {
    xStep = itemWidth + itemsSpacing;
  } else if (direction === "column") {
    yStep = itemHeight + itemsSpacing;
  }
  return import_react5.default.createElement("g", {
    transform: "translate(".concat(x2, ",").concat(y3, ")")
  }, data.map(function(data2, i2) {
    return import_react5.default.createElement(LegendSvgItem, {
      key: i2,
      data: data2,
      x: i2 * xStep + padding.left,
      y: i2 * yStep + padding.top,
      width: itemWidth,
      height: itemHeight,
      direction: itemDirection,
      justify,
      effects,
      textColor: itemTextColor,
      background: itemBackground,
      opacity: itemOpacity,
      symbolShape,
      symbolSize,
      symbolSpacing,
      symbolBorderWidth,
      symbolBorderColor,
      onClick,
      onMouseEnter,
      onMouseLeave
    });
  }));
};
LegendSvg.defaultProps = {
  padding: 0,
  justify: false,
  itemsSpacing: 0,
  itemDirection: "left-to-right",
  itemTextColor: "black",
  itemBackground: "transparent",
  itemOpacity: 1
};
var BoxLegendSvg = function BoxLegendSvg2(_ref) {
  var data = _ref.data, containerWidth = _ref.containerWidth, containerHeight = _ref.containerHeight, translateX = _ref.translateX, translateY = _ref.translateY, anchor = _ref.anchor, direction = _ref.direction, padding = _ref.padding, justify = _ref.justify, itemsSpacing = _ref.itemsSpacing, itemWidth = _ref.itemWidth, itemHeight = _ref.itemHeight, itemDirection = _ref.itemDirection, itemTextColor = _ref.itemTextColor, itemBackground = _ref.itemBackground, itemOpacity = _ref.itemOpacity, symbolShape = _ref.symbolShape, symbolSize = _ref.symbolSize, symbolSpacing = _ref.symbolSpacing, symbolBorderWidth = _ref.symbolBorderWidth, symbolBorderColor = _ref.symbolBorderColor, onClick = _ref.onClick, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, effects = _ref.effects;
  var _computeDimensions = computeDimensions({
    itemCount: data.length,
    itemsSpacing,
    itemWidth,
    itemHeight,
    direction,
    padding
  }), width = _computeDimensions.width, height = _computeDimensions.height;
  var _computePositionFromA = computePositionFromAnchor({
    anchor,
    translateX,
    translateY,
    containerWidth,
    containerHeight,
    width,
    height
  }), x2 = _computePositionFromA.x, y3 = _computePositionFromA.y;
  return import_react5.default.createElement(LegendSvg, {
    data,
    x: x2,
    y: y3,
    direction,
    padding,
    justify,
    effects,
    itemsSpacing,
    itemWidth,
    itemHeight,
    itemDirection,
    itemTextColor,
    itemBackground,
    itemOpacity,
    symbolShape,
    symbolSize,
    symbolSpacing,
    symbolBorderWidth,
    symbolBorderColor,
    onClick,
    onMouseEnter,
    onMouseLeave
  });
};
BoxLegendSvg.defaultProps = {
  translateX: 0,
  translateY: 0,
  itemsSpacing: LegendSvg.defaultProps.itemsSpacing,
  padding: LegendSvg.defaultProps.padding
};
var textPropsMapping = {
  align: {
    start: "left",
    middle: "center",
    end: "right"
  },
  baseline: {
    hanging: "top",
    middle: "middle",
    central: "middle",
    baseline: "bottom"
  }
};
var renderLegendToCanvas = function renderLegendToCanvas2(ctx, _ref) {
  var data = _ref.data, containerWidth = _ref.containerWidth, containerHeight = _ref.containerHeight, _ref$translateX = _ref.translateX, translateX = _ref$translateX === void 0 ? BoxLegendSvg.defaultProps.translateX : _ref$translateX, _ref$translateY = _ref.translateY, translateY = _ref$translateY === void 0 ? BoxLegendSvg.defaultProps.translateY : _ref$translateY, anchor = _ref.anchor, direction = _ref.direction, _ref$padding = _ref.padding, _padding = _ref$padding === void 0 ? LegendSvg.defaultProps.padding : _ref$padding, _ref$justify = _ref.justify, justify = _ref$justify === void 0 ? LegendSvgItem.defaultProps.justify : _ref$justify, _ref$itemsSpacing = _ref.itemsSpacing, itemsSpacing = _ref$itemsSpacing === void 0 ? LegendSvg.defaultProps.itemsSpacing : _ref$itemsSpacing, itemWidth = _ref.itemWidth, itemHeight = _ref.itemHeight, _ref$itemDirection = _ref.itemDirection, itemDirection = _ref$itemDirection === void 0 ? LegendSvgItem.defaultProps.direction : _ref$itemDirection, _ref$itemTextColor = _ref.itemTextColor, itemTextColor = _ref$itemTextColor === void 0 ? LegendSvg.defaultProps.textColor : _ref$itemTextColor, _ref$symbolSize = _ref.symbolSize, symbolSize = _ref$symbolSize === void 0 ? LegendSvgItem.defaultProps.symbolSize : _ref$symbolSize, _ref$symbolSpacing = _ref.symbolSpacing, symbolSpacing = _ref$symbolSpacing === void 0 ? LegendSvgItem.defaultProps.symbolSpacing : _ref$symbolSpacing, theme = _ref.theme;
  var _computeDimensions = computeDimensions({
    itemCount: data.length,
    itemWidth,
    itemHeight,
    itemsSpacing,
    direction,
    padding: _padding
  }), width = _computeDimensions.width, height = _computeDimensions.height, padding = _computeDimensions.padding;
  var _computePositionFromA = computePositionFromAnchor({
    anchor,
    translateX,
    translateY,
    containerWidth,
    containerHeight,
    width,
    height
  }), x2 = _computePositionFromA.x, y3 = _computePositionFromA.y;
  var xStep = 0;
  var yStep = 0;
  if (direction === DIRECTION_ROW) {
    xStep = itemWidth + itemsSpacing;
  } else if (direction === DIRECTION_COLUMN) {
    yStep = itemHeight + itemsSpacing;
  }
  ctx.save();
  ctx.translate(x2, y3);
  ctx.font = "".concat(theme.legends.text.fontSize, "px ").concat(theme.legends.text.fontFamily || "sans-serif");
  data.forEach(function(d, i2) {
    var itemX = i2 * xStep + padding.left;
    var itemY = i2 * yStep + padding.top;
    var _computeItemLayout = computeItemLayout({
      direction: itemDirection,
      justify,
      symbolSize,
      symbolSpacing,
      width: itemWidth,
      height: itemHeight
    }), symbolX = _computeItemLayout.symbolX, symbolY = _computeItemLayout.symbolY, labelX = _computeItemLayout.labelX, labelY = _computeItemLayout.labelY, labelAnchor = _computeItemLayout.labelAnchor, labelAlignment = _computeItemLayout.labelAlignment;
    ctx.fillStyle = d.color;
    ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize);
    ctx.textAlign = textPropsMapping.align[labelAnchor];
    ctx.textBaseline = textPropsMapping.baseline[labelAlignment];
    ctx.fillStyle = itemTextColor || theme.legends.text.fill;
    ctx.fillText(d.label, itemX + labelX, itemY + labelY);
  });
  ctx.restore();
};
var useQuantizeColorScaleLegendData = function useQuantizeColorScaleLegendData2(_ref) {
  var scale = _ref.scale, overriddenDomain = _ref.domain, _ref$reverse = _ref.reverse, reverse2 = _ref$reverse === void 0 ? false : _ref$reverse, _ref$valueFormat = _ref.valueFormat, valueFormat = _ref$valueFormat === void 0 ? function(v) {
    return v;
  } : _ref$valueFormat, _ref$separator = _ref.separator, separator = _ref$separator === void 0 ? " - " : _ref$separator;
  return (0, import_react5.useMemo)(function() {
    var domain = overriddenDomain || scale.range();
    var items = domain.map(function(domainValue, index3) {
      var _scale$invertExtent = scale.invertExtent(domainValue), _scale$invertExtent2 = _slicedToArray4(_scale$invertExtent, 2), start2 = _scale$invertExtent2[0], end = _scale$invertExtent2[1];
      return {
        id: domainValue,
        index: index3,
        extent: [start2, end],
        label: "".concat(valueFormat(start2)).concat(separator).concat(valueFormat(end)),
        value: scale(start2),
        color: domainValue
      };
    });
    if (reverse2 === true)
      items.reverse();
    return items;
  }, [overriddenDomain, scale, reverse2]);
};

// node_modules/@nivo/geo/dist/nivo-geo.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
function I() {
  return I = Object.assign ? Object.assign.bind() : function(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var o2 = arguments[r2];
      for (var t4 in o2)
        Object.prototype.hasOwnProperty.call(o2, t4) && (e3[t4] = o2[t4]);
    }
    return e3;
  }, I.apply(this, arguments);
}
var D2 = { azimuthalEqualArea: azimuthalEqualArea_default, azimuthalEquidistant: azimuthalEquidistant_default, gnomonic: gnomonic_default, orthographic: orthographic_default, stereographic: stereographic_default, equalEarth: equalEarth_default, equirectangular: equirectangular_default, mercator: mercator_default, transverseMercator: transverseMercator_default, naturalEarth1: naturalEarth1_default };
var z = function(r2) {
  var o2 = r2.width, t4 = r2.height, i2 = r2.projectionType, n2 = r2.projectionScale, u = r2.projectionTranslation, l = r2.projectionRotation, c3 = r2.fillColor, d = r2.borderWidth, s2 = r2.borderColor, f = (0, import_react6.useMemo)(function() {
    return D2[i2]().scale(n2).translate([o2 * u[0], t4 * u[1]]).rotate(l);
  }, [o2, t4, i2, n2, u[0], u[1], l[0], l[1], l[2]]), h = (0, import_react6.useMemo)(function() {
    return path_default3(f);
  }, [f]), p = (0, import_react6.useMemo)(function() {
    return graticule();
  }), g = useTheme(), v = (0, import_react6.useMemo)(function() {
    return "function" == typeof d ? d : function() {
      return d;
    };
  }, [d]), m2 = useInheritedColor(s2, g), b = (0, import_react6.useMemo)(function() {
    return "function" == typeof c3 ? c3 : function() {
      return c3;
    };
  }, [c3]);
  return { projection: f, path: h, graticule: p, getBorderWidth: v, getBorderColor: m2, getFillColor: b };
};
var K2 = function(r2) {
  var o2 = r2.features, t4 = r2.data, i2 = r2.match, n2 = r2.label, a2 = r2.value, l = r2.valueFormat, c3 = r2.colors, d = r2.unknownColor, s2 = r2.domain, f = (0, import_react6.useMemo)(function() {
    return (0, import_lodash4.isFunction)(i2) ? i2 : function(e3, r3) {
      var o3 = (0, import_lodash4.get)(e3, i2), t5 = (0, import_lodash4.get)(r3, i2);
      return o3 && o3 === t5;
    };
  }, [i2]), h = (0, import_react6.useMemo)(function() {
    return (0, import_lodash4.isFunction)(n2) ? n2 : function(e3) {
      return (0, import_lodash4.get)(e3, n2);
    };
  }, [n2]), p = (0, import_react6.useMemo)(function() {
    return (0, import_lodash4.isFunction)(a2) ? a2 : function(e3) {
      return (0, import_lodash4.get)(e3, a2);
    };
  }, [a2]), g = (0, import_react6.useMemo)(function() {
    return void 0 === l ? function(e3) {
      return e3;
    } : (0, import_lodash4.isFunction)(l) ? l : format(l);
  }, [l]), v = (0, import_react6.useMemo)(function() {
    return guessQuantizeColorScale(c3).domain(s2);
  }, [c3, s2]), m2 = (0, import_react6.useMemo)(function() {
    return function(e3) {
      return void 0 === e3.value ? d : v(e3.value);
    };
  }, [v, d]), C2 = (0, import_react6.useMemo)(function() {
    return o2.map(function(e3) {
      var r3 = t4.find(function(r4) {
        return f(e3, r4);
      }), o3 = p(r3);
      if (r3) {
        var i3 = I({}, e3, { data: r3, value: o3, formattedValue: g(o3) });
        return i3.color = m2(i3), i3.label = h(i3), i3;
      }
      return e3;
    });
  }, [o2, t4, f, p, g, m2]), b = useQuantizeColorScaleLegendData({ scale: v, valueFormat: g });
  return { colorScale: v, getFillColor: m2, boundFeatures: C2, valueFormatter: g, legendData: b };
};
var V = (0, import_react6.memo)(function(e3) {
  var r2 = e3.feature;
  return void 0 === r2.data ? null : (0, import_jsx_runtime.jsx)(BasicTooltip, { id: r2.label, color: r2.color, enableChip: true, value: r2.formattedValue });
});
V.propTypes = { feature: import_prop_types5.default.object.isRequired }, V.displayName = "ChoroplethTooltip";
var A5 = { features: import_prop_types5.default.arrayOf(import_prop_types5.default.shape({ id: import_prop_types5.default.string.isRequired, type: import_prop_types5.default.oneOf(["Feature"]).isRequired, properties: import_prop_types5.default.object, geometry: import_prop_types5.default.object.isRequired })).isRequired, projectionType: import_prop_types5.default.oneOf(Object.keys(D2)).isRequired, projectionScale: import_prop_types5.default.number.isRequired, projectionTranslation: import_prop_types5.default.arrayOf(import_prop_types5.default.number).isRequired, projectionRotation: import_prop_types5.default.arrayOf(import_prop_types5.default.number).isRequired, fillColor: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]).isRequired, borderWidth: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.func]).isRequired, borderColor: inheritedColorPropType.isRequired, enableGraticule: import_prop_types5.default.bool.isRequired, graticuleLineWidth: import_prop_types5.default.number.isRequired, graticuleLineColor: import_prop_types5.default.string.isRequired, isInteractive: import_prop_types5.default.bool.isRequired, onMouseEnter: import_prop_types5.default.func.isRequired, onMouseMove: import_prop_types5.default.func.isRequired, onMouseLeave: import_prop_types5.default.func.isRequired, onClick: import_prop_types5.default.func.isRequired, tooltip: import_prop_types5.default.any, layers: import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["graticule", "features"]), import_prop_types5.default.func])).isRequired };
var J = I({}, A5, { role: import_prop_types5.default.string.isRequired });
var Q = I({ pixelRatio: import_prop_types5.default.number.isRequired }, A5);
var U = { data: import_prop_types5.default.arrayOf(import_prop_types5.default.object).isRequired, match: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]).isRequired, label: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]).isRequired, value: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]).isRequired, valueFormat: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]), colors: quantizeColorScalePropType.isRequired, domain: import_prop_types5.default.arrayOf(import_prop_types5.default.number).isRequired, unknownColor: import_prop_types5.default.string.isRequired, layers: import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["graticule", "features", "legends"]), import_prop_types5.default.func])).isRequired };
var X = I({}, J, U, { role: import_prop_types5.default.string.isRequired });
var Y = I({}, Q, U);
var Z = { projectionType: "mercator", projectionScale: 100, projectionTranslation: [0.5, 0.5], projectionRotation: [0, 0, 0], enableGraticule: false, graticuleLineWidth: 0.5, graticuleLineColor: "#999999", fillColor: "#dddddd", borderWidth: 0, borderColor: "#000000", isInteractive: true, onMouseEnter: function() {
}, onMouseLeave: function() {
}, onMouseMove: function() {
}, onClick: function() {
}, layers: ["graticule", "features"], legends: [], fill: [], defs: [] };
var $ = I({}, Z, { role: "img" });
var _ = I({}, Z, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var ee = { match: "id", label: "id", value: "value", colors: "PuBuGn", unknownColor: "#999", tooltip: V, layers: ["graticule", "features", "legends"] };
var re2 = I({}, $, ee, { role: "img" });
var oe = I({}, _, ee);
var te = (0, import_react6.memo)(function(e3) {
  var r2 = e3.path, o2 = e3.graticule, t4 = e3.lineWidth, i2 = e3.lineColor;
  return (0, import_jsx_runtime.jsx)("path", { fill: "none", strokeWidth: t4, stroke: i2, d: r2(o2()) });
});
te.propTypes = { path: import_prop_types5.default.func.isRequired, graticule: import_prop_types5.default.func.isRequired, lineWidth: import_prop_types5.default.number.isRequired, lineColor: import_prop_types5.default.string.isRequired }, te.displayName = "GeoGraticule";
var ie = (0, import_react6.memo)(function(e3) {
  var r2, o2 = e3.feature, t4 = e3.path, i2 = e3.fillColor, n2 = e3.borderWidth, a2 = e3.borderColor, u = e3.onClick, l = e3.onMouseEnter, c3 = e3.onMouseMove, d = e3.onMouseLeave;
  return (0, import_jsx_runtime.jsx)("path", { fill: null != (r2 = null == o2 ? void 0 : o2.fill) ? r2 : i2, strokeWidth: n2, stroke: a2, strokeLinejoin: "bevel", d: t4(o2), onMouseEnter: function(e4) {
    return l(o2, e4);
  }, onMouseMove: function(e4) {
    return c3(o2, e4);
  }, onMouseLeave: function(e4) {
    return d(o2, e4);
  }, onClick: function(e4) {
    return u(o2, e4);
  } }, o2.id);
});
ie.propTypes = { feature: import_prop_types5.default.shape({ id: import_prop_types5.default.string.isRequired, type: import_prop_types5.default.oneOf(["Feature"]).isRequired, properties: import_prop_types5.default.object, geometry: import_prop_types5.default.object.isRequired }).isRequired, path: import_prop_types5.default.func.isRequired, fillColor: import_prop_types5.default.string.isRequired, borderWidth: import_prop_types5.default.number.isRequired, borderColor: import_prop_types5.default.string.isRequired, onMouseEnter: import_prop_types5.default.func.isRequired, onMouseMove: import_prop_types5.default.func.isRequired, onMouseLeave: import_prop_types5.default.func.isRequired, onClick: import_prop_types5.default.func.isRequired }, ie.displayName = "GeoMapFeature";
var ne = (0, import_react6.memo)(function(e3) {
  var r2 = e3.width, i2 = e3.height, n2 = e3.margin, u = e3.features, l = e3.layers, s2 = e3.projectionType, f = e3.projectionScale, h = e3.projectionTranslation, p = e3.projectionRotation, g = e3.fillColor, m2 = e3.borderWidth, C2 = e3.borderColor, b = e3.enableGraticule, y3 = e3.graticuleLineWidth, R2 = e3.graticuleLineColor, j = e3.isInteractive, q = e3.onClick, T = e3.tooltip, M2 = e3.role, W = useDimensions(r2, i2, n2), w = W.margin, k2 = W.outerWidth, O = W.outerHeight, F = z({ width: r2, height: i2, projectionType: s2, projectionScale: f, projectionTranslation: h, projectionRotation: p, fillColor: g, borderWidth: m2, borderColor: C2 }), L = F.graticule, E2 = F.path, S = F.getFillColor, G2 = F.getBorderWidth, x2 = F.getBorderColor, B2 = useTheme(), P = useTooltip(), N = P.showTooltipFromEvent, I2 = P.hideTooltip, D3 = (0, import_react6.useCallback)(function(e4, r3) {
    return j && q && q(e4, r3);
  }, [j, q]), K3 = (0, import_react6.useCallback)(function(e4, r3) {
    return j && T && N((0, import_jsx_runtime.jsx)(T, { feature: e4 }), r3);
  }, [j, N, T]), V2 = (0, import_react6.useCallback)(function(e4, r3) {
    return j && T && N((0, import_jsx_runtime.jsx)(T, { feature: e4 }), r3);
  }, [j, N, T]), A6 = (0, import_react6.useCallback)(function() {
    return j && I2();
  }, [j, I2]);
  return (0, import_jsx_runtime.jsx)(SvgWrapper, { width: k2, height: O, margin: w, theme: B2, role: M2, children: l.map(function(r3, o2) {
    return "graticule" === r3 ? true !== b ? null : (0, import_jsx_runtime.jsx)(te, { path: E2, graticule: L, lineWidth: y3, lineColor: R2 }, "graticule") : "features" === r3 ? (0, import_jsx_runtime.jsx)(import_react6.Fragment, { children: u.map(function(e4) {
      return (0, import_jsx_runtime.jsx)(ie, { feature: e4, path: E2, fillColor: S(e4), borderWidth: G2(e4), borderColor: x2(e4), onMouseEnter: K3, onMouseMove: V2, onMouseLeave: A6, onClick: D3 }, e4.id);
    }) }, "features") : (0, import_jsx_runtime.jsx)(import_react6.Fragment, { children: r3(e3) }, o2);
  }) });
});
ne.displayName = "GeoMap", ne.propTypes = J, ne.defaultProps = $;
var ae = withContainer(ne);
var ue = function(e3) {
  return (0, import_jsx_runtime.jsx)(ResponsiveWrapper, { children: function(r2) {
    var o2 = r2.width, t4 = r2.height;
    return (0, import_jsx_runtime.jsx)(ae, I({ width: o2, height: t4 }, e3));
  } });
};
var le = function(e3, r2, o2, t4) {
  var i2 = getRelativeCursor(r2, e3), n2 = i2[0], a2 = i2[1];
  return o2.find(function(e4) {
    return contains_default(e4, t4.invert([n2, a2]));
  });
};
var ce = (0, import_react6.memo)(function(e3) {
  var r2 = e3.width, t4 = e3.height, u = e3.margin, l = e3.pixelRatio, d = e3.features, s2 = e3.layers, f = e3.projectionType, h = e3.projectionScale, p = e3.projectionTranslation, g = e3.projectionRotation, m2 = e3.fillColor, C2 = e3.borderWidth, b = e3.borderColor, y3 = e3.enableGraticule, R2 = e3.graticuleLineWidth, j = e3.graticuleLineColor, q = e3.isInteractive, T = e3.onClick, M2 = e3.onMouseMove, W = e3.tooltip, w = (0, import_react6.useRef)(null), k2 = useTheme(), O = useDimensions(r2, t4, u), F = O.margin, L = O.outerWidth, E2 = O.outerHeight, S = z({ width: r2, height: t4, projectionType: f, projectionScale: h, projectionTranslation: p, projectionRotation: g, fillColor: m2, borderWidth: C2, borderColor: b }), G2 = S.projection, x2 = S.graticule, B2 = S.path, P = S.getFillColor, N = S.getBorderWidth, I2 = S.getBorderColor;
  (0, import_react6.useEffect)(function() {
    if (w) {
      w.current.width = L * l, w.current.height = E2 * l;
      var r3 = w.current.getContext("2d");
      r3.scale(l, l), r3.fillStyle = k2.background, r3.fillRect(0, 0, L, E2), r3.translate(F.left, F.top), B2.context(r3), s2.forEach(function(o2) {
        "graticule" === o2 ? true === y3 && (r3.lineWidth = R2, r3.strokeStyle = j, r3.beginPath(), B2(x2()), r3.stroke()) : "features" === o2 ? d.forEach(function(e4) {
          r3.beginPath(), B2(e4), r3.fillStyle = P(e4), r3.fill();
          var o3 = N(e4);
          o3 > 0 && (r3.strokeStyle = I2(e4), r3.lineWidth = o3, r3.stroke());
        }) : o2(r3, e3);
      });
    }
  }, [w, L, E2, F, l, k2, B2, x2, P, N, I2, d, s2]);
  var D3 = useTooltip(), K3 = D3.showTooltipFromEvent, V2 = D3.hideTooltip, A6 = (0, import_react6.useCallback)(function(e4) {
    if (q && W) {
      var r3 = le(e4, w.current, d, G2);
      r3 ? K3((0, import_jsx_runtime.jsx)(W, { feature: r3 }), e4) : V2(), M2 && M2(r3 || null, e4);
    }
  }, [K3, V2, q, W, w, d, G2]), J2 = (0, import_react6.useCallback)(function() {
    return q && V2();
  }, [q, V2]), Q2 = (0, import_react6.useCallback)(function(e4) {
    if (q && T) {
      var r3 = le(e4, w.current, d, G2);
      r3 && T(r3, e4);
    }
  }, [q, w, d, G2, T]);
  return (0, import_jsx_runtime.jsx)("canvas", { ref: w, width: L * l, height: E2 * l, style: { width: L, height: E2, cursor: q ? "auto" : "normal" }, onMouseMove: A6, onMouseLeave: J2, onClick: Q2 });
});
ce.displatName = "GeoMapCanvas", ce.propTypes = Q, ce.defaultProps = _;
var de = withContainer(ce);
var se = function(e3) {
  return (0, import_jsx_runtime.jsx)(ResponsiveWrapper, { children: function(r2) {
    var o2 = r2.width, t4 = r2.height;
    return (0, import_jsx_runtime.jsx)(de, I({ width: o2, height: t4 }, e3));
  } });
};
var fe = (0, import_react6.memo)(function(e3) {
  var r2 = e3.width, i2 = e3.height, n2 = e3.margin, u = e3.features, l = e3.data, s2 = e3.match, f = e3.label, h = e3.value, g = e3.valueFormat, m2 = e3.projectionType, C2 = e3.projectionScale, b = e3.projectionTranslation, y3 = e3.projectionRotation, R2 = e3.colors, j = e3.domain, q = e3.unknownColor, T = e3.borderWidth, M2 = e3.borderColor, W = e3.enableGraticule, w = e3.graticuleLineWidth, k2 = e3.graticuleLineColor, O = e3.layers, F = e3.legends, L = e3.isInteractive, E2 = e3.onClick, S = e3.tooltip, G2 = e3.role, x2 = e3.defs, B2 = void 0 === x2 ? re2.defs : x2, N = e3.fill, D3 = void 0 === N ? re2.fill : N, V2 = useDimensions(r2, i2, n2), A6 = V2.margin, J2 = V2.outerWidth, Q2 = V2.outerHeight, U2 = z({ width: r2, height: i2, projectionType: m2, projectionScale: C2, projectionTranslation: b, projectionRotation: y3, fillColor: function() {
  }, borderWidth: T, borderColor: M2 }), X3 = U2.graticule, Y3 = U2.path, Z3 = U2.getBorderWidth, $2 = U2.getBorderColor, _2 = K2({ features: u, data: l, match: s2, label: f, value: h, valueFormat: g, colors: R2, unknownColor: q, domain: j }), ee2 = _2.getFillColor, oe2 = _2.boundFeatures, ne2 = _2.legendData, ae2 = useTheme(), ue2 = bindDefs(B2, oe2, D3, { dataKey: "data", targetKey: "fill" }), le2 = useTooltip(), ce2 = le2.showTooltipFromEvent, de2 = le2.hideTooltip, se2 = (0, import_react6.useCallback)(function(e4, r3) {
    return L && E2 && E2(e4, r3);
  }, [L, E2]), fe2 = (0, import_react6.useCallback)(function(e4, r3) {
    return L && S && ce2((0, import_jsx_runtime.jsx)(S, { feature: e4 }), r3);
  }, [L, ce2, S]), he2 = (0, import_react6.useCallback)(function(e4, r3) {
    return L && S && ce2((0, import_jsx_runtime.jsx)(S, { feature: e4 }), r3);
  }, [L, ce2, S]), pe2 = (0, import_react6.useCallback)(function() {
    return L && de2();
  }, [L, de2]);
  return (0, import_jsx_runtime.jsx)(SvgWrapper, { width: J2, height: Q2, margin: A6, theme: ae2, defs: ue2, role: G2, children: O.map(function(e4, o2) {
    return "graticule" === e4 ? true !== W ? null : (0, import_jsx_runtime.jsx)(te, { path: Y3, graticule: X3, lineWidth: w, lineColor: k2 }, "graticule") : "features" === e4 ? (0, import_jsx_runtime.jsx)(import_react6.Fragment, { children: oe2.map(function(e6) {
      return (0, import_jsx_runtime.jsx)(ie, { feature: e6, path: Y3, fillColor: ee2(e6), borderWidth: Z3(e6), borderColor: $2(e6), onMouseEnter: fe2, onMouseMove: he2, onMouseLeave: pe2, onClick: se2 }, e6.id);
    }) }, "features") : "legends" === e4 ? F.map(function(e6, o3) {
      return (0, import_jsx_runtime.jsx)(BoxLegendSvg, I({ containerWidth: r2, containerHeight: i2, data: ne2 }, e6), o3);
    }) : (0, import_jsx_runtime.jsx)(import_react6.Fragment, { children: e4({}) }, o2);
  }) });
});
fe.displayName = "Choropleth", fe.propTypes = X, fe.defaultProps = re2;
var he = withContainer(fe);
var pe = function(e3) {
  return (0, import_jsx_runtime.jsx)(ResponsiveWrapper, { children: function(r2) {
    var o2 = r2.width, t4 = r2.height;
    return (0, import_jsx_runtime.jsx)(he, I({ width: o2, height: t4 }, e3));
  } });
};
var ge = function(e3, r2, o2, t4) {
  var i2 = getRelativeCursor(r2, e3), n2 = i2[0], a2 = i2[1];
  return o2.find(function(e4) {
    return contains_default(e4, t4.invert([n2, a2]));
  });
};
var ve = (0, import_react6.memo)(function(e3) {
  var r2 = e3.width, t4 = e3.height, u = e3.margin, l = e3.pixelRatio, d = e3.features, s2 = e3.data, f = e3.match, h = e3.label, p = e3.value, g = e3.valueFormat, m2 = e3.projectionType, C2 = e3.projectionScale, b = e3.projectionTranslation, y3 = e3.projectionRotation, R2 = e3.colors, j = e3.domain, q = e3.unknownColor, T = e3.borderWidth, M2 = e3.borderColor, W = e3.enableGraticule, w = e3.graticuleLineWidth, k2 = e3.graticuleLineColor, O = e3.layers, F = e3.legends, L = e3.isInteractive, E2 = e3.onClick, S = e3.onMouseMove, G2 = e3.tooltip, x2 = (0, import_react6.useRef)(null), B2 = useTheme(), P = useDimensions(r2, t4, u), D3 = P.margin, V2 = P.outerWidth, A6 = P.outerHeight, J2 = z({ width: r2, height: t4, projectionType: m2, projectionScale: C2, projectionTranslation: b, projectionRotation: y3, fillColor: function() {
  }, borderWidth: T, borderColor: M2 }), Q2 = J2.projection, U2 = J2.graticule, X3 = J2.path, Y3 = J2.getBorderWidth, Z3 = J2.getBorderColor, $2 = K2({ features: d, data: s2, match: f, label: h, value: p, valueFormat: g, colors: R2, unknownColor: q, domain: j }), _2 = $2.getFillColor, ee2 = $2.boundFeatures, re3 = $2.legendData;
  (0, import_react6.useEffect)(function() {
    if (x2) {
      x2.current.width = V2 * l, x2.current.height = A6 * l;
      var e4 = x2.current.getContext("2d");
      e4.scale(l, l), e4.fillStyle = B2.background, e4.fillRect(0, 0, V2, A6), e4.translate(D3.left, D3.top), X3.context(e4), O.forEach(function(o2) {
        "graticule" === o2 ? true === W && (e4.lineWidth = w, e4.strokeStyle = k2, e4.beginPath(), X3(U2()), e4.stroke()) : "features" === o2 ? ee2.forEach(function(r3) {
          e4.beginPath(), X3(r3), e4.fillStyle = _2(r3), e4.fill();
          var o3 = Y3(r3);
          o3 > 0 && (e4.strokeStyle = Z3(r3), e4.lineWidth = o3, e4.stroke());
        }) : "legends" === o2 && F.forEach(function(o3) {
          renderLegendToCanvas(e4, I({}, o3, { data: re3, containerWidth: r2, containerHeight: t4, theme: B2 }));
        });
      });
    }
  }, [x2, V2, A6, D3, l, B2, X3, U2, _2, Y3, Z3, ee2, F, O]);
  var oe2 = useTooltip(), te2 = oe2.showTooltipFromEvent, ie2 = oe2.hideTooltip, ne2 = (0, import_react6.useCallback)(function(e4) {
    if (L && G2) {
      var r3 = ge(e4, x2.current, ee2, Q2);
      r3 ? te2((0, import_jsx_runtime.jsx)(G2, { feature: r3 }), e4) : ie2(), S && S(r3 || null, e4);
    }
  }, [te2, ie2, L, G2, x2, ee2, Q2]), ae2 = (0, import_react6.useCallback)(function() {
    return L && ie2();
  }, [L, ie2]), ue2 = (0, import_react6.useCallback)(function(e4) {
    if (L && E2) {
      var r3 = ge(e4, x2.current, ee2, Q2);
      r3 && E2(r3, e4);
    }
  }, [L, x2, ee2, Q2, E2]);
  return (0, import_jsx_runtime.jsx)("canvas", { ref: x2, width: V2 * l, height: A6 * l, style: { width: V2, height: A6, cursor: L ? "auto" : "normal" }, onMouseMove: ne2, onMouseLeave: ae2, onClick: ue2 });
});
ve.displayName = "ChoroplethCanvas", ve.propTypes = Y, ve.defaultProps = oe;
var me = withContainer(ve);
var Ce = function(e3) {
  return (0, import_jsx_runtime.jsx)(ResponsiveWrapper, { children: function(r2) {
    var o2 = r2.width, t4 = r2.height;
    return (0, import_jsx_runtime.jsx)(me, I({ width: o2, height: t4 }, e3));
  } });
};
export {
  he as Choropleth,
  me as ChoroplethCanvas,
  oe as ChoroplethCanvasDefaultProps,
  Y as ChoroplethCanvasPropTypes,
  re2 as ChoroplethDefaultProps,
  X as ChoroplethPropTypes,
  ae as GeoMap,
  de as GeoMapCanvas,
  _ as GeoMapCanvasDefaultProps,
  Q as GeoMapCanvasPropTypes,
  $ as GeoMapDefaultProps,
  J as GeoMapPropTypes,
  pe as ResponsiveChoropleth,
  Ce as ResponsiveChoroplethCanvas,
  ue as ResponsiveGeoMap,
  se as ResponsiveGeoMapCanvas,
  D2 as projectionById,
  K2 as useChoropleth,
  z as useGeoMap
};
//# sourceMappingURL=@nivo_geo.js.map
