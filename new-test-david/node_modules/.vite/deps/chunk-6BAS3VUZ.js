import {
  $r,
  Ut,
  animated,
  oi,
  pi,
  useSpring,
  useTransition
} from "./chunk-LHKJKD76.js";
import {
  require_sortBy,
  require_uniqBy
} from "./chunk-M57WKYPU.js";
import {
  require_prop_types
} from "./chunk-LOIX552A.js";
import {
  require_jsx_runtime
} from "./chunk-IPTSDMYC.js";
import {
  require_baseUniq
} from "./chunk-4LFHA4AN.js";
import {
  require_baseGetTag,
  require_baseUnary,
  require_isObjectLike,
  require_last,
  require_nodeUtil
} from "./chunk-SA67FZ35.js";
import {
  require_react
} from "./chunk-KKUTB7ST.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq(array3) {
      return array3 && array3.length ? baseUniq(array3) : [];
    }
    module.exports = uniq;
  }
});

// node_modules/lodash/_baseIsDate.js
var require_baseIsDate = __commonJS({
  "node_modules/lodash/_baseIsDate.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var dateTag = "[object Date]";
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    module.exports = baseIsDate;
  }
});

// node_modules/lodash/isDate.js
var require_isDate = __commonJS({
  "node_modules/lodash/isDate.js"(exports, module) {
    var baseIsDate = require_baseIsDate();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsDate = nodeUtil && nodeUtil.isDate;
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    module.exports = isDate;
  }
});

// node_modules/@nivo/scales/dist/nivo-scales.es.js
var import_uniq = __toESM(require_uniq());
var import_uniqBy = __toESM(require_uniqBy());
var import_sortBy = __toESM(require_sortBy());
var import_last = __toESM(require_last());
var import_isDate = __toESM(require_isDate());

// node_modules/@nivo/scales/node_modules/d3-time/src/interval.js
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count3, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = function(date2) {
    var d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count3(t0, t1));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/scales/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start, end) {
  return end - start;
});
millisecond.every = function(k2) {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond;
  return newInterval(function(date2) {
    date2.setTime(Math.floor(date2 / k2) * k2);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k2);
  }, function(start, end) {
    return (end - start) / k2;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

// node_modules/@nivo/scales/node_modules/d3-time/src/second.js
var second = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date2) {
  return date2.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/day.js
var day = newInterval(function(date2) {
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setDate(date2.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date2) {
  return date2.getDate() - 1;
});
var day_default = day;
var days = day.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/week.js
function weekday(i2) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/month.js
var month = newInterval(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/year.js
var year = newInterval(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k2);
  });
};
var year_default = year;
var years = year.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i2) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/@nivo/scales/node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y2, m, d) {
  return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale5) {
  var locale_dateTime = locale5.dateTime, locale_date = locale5.date, locale_time = locale5.time, locale_periods = locale5.periods, locale_weekdays = locale5.days, locale_shortWeekdays = locale5.shortDays, locale_months = locale5.months, locale_shortMonths = locale5.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i2 = -1, j = 0, n3 = specifier.length, c, pad3, format3;
      if (!(date2 instanceof Date))
        date2 = /* @__PURE__ */ new Date(+date2);
      while (++i2 < n3) {
        if (specifier.charCodeAt(i2) === 37) {
          string.push(specifier.slice(j, i2));
          if ((pad3 = pads[c = specifier.charAt(++i2)]) != null)
            c = specifier.charAt(++i2);
          else
            pad3 = c === "e" ? " " : "0";
          if (format3 = formats2[c])
            c = format3(date2, pad3);
          string.push(c);
          j = i2 + 1;
        }
      }
      string.push(specifier.slice(j, i2));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string += "", 0), week, day4;
      if (i2 != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day4 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day4 + 5) % 7 : d.w + d.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i2 = 0, n3 = specifier.length, m = string.length, c, parse;
    while (i2 < n3) {
      if (j >= m)
        return -1;
      c = specifier.charCodeAt(i2++);
      if (c === 37) {
        c = specifier.charAt(i2++);
        parse = parses[c in pads ? specifier.charAt(i2++) : c];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i2) {
    var n3 = periodRe.exec(string.slice(i2));
    return n3 ? (d.p = periodLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortWeekday(d, string, i2) {
    var n3 = shortWeekdayRe.exec(string.slice(i2));
    return n3 ? (d.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseWeekday(d, string, i2) {
    var n3 = weekdayRe.exec(string.slice(i2));
    return n3 ? (d.w = weekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortMonth(d, string, i2) {
    var n3 = shortMonthRe.exec(string.slice(i2));
    return n3 ? (d.m = shortMonthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseMonth(d, string, i2) {
    var n3 = monthRe.exec(string.slice(i2));
    return n3 ? (d.m = monthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i2) {
    return parseSpecifier(d, locale_dateTime, string, i2);
  }
  function parseLocaleDate(d, string, i2) {
    return parseSpecifier(d, locale_date, string, i2);
  }
  function parseLocaleTime(d, string, i2) {
    return parseSpecifier(d, locale_time, string, i2);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
  return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.w = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.u = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.U = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberISO(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.V = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.W = +n3[0], i2 + n3[0].length) : -1;
}
function parseFullYear(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 4));
  return n3 ? (d.y = +n3[0], i2 + n3[0].length) : -1;
}
function parseYear(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i2 + n3[0].length) : -1;
}
function parseZone(d, string, i2) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i2, i2 + 6));
  return n3 ? (d.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i2 + n3[0].length) : -1;
}
function parseQuarter(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.q = n3[0] * 3 - 3, i2 + n3[0].length) : -1;
}
function parseMonthNumber(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.m = n3[0] - 1, i2 + n3[0].length) : -1;
}
function parseDayOfMonth(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseDayOfYear(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 3));
  return n3 ? (d.m = 0, d.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseHour24(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.H = +n3[0], i2 + n3[0].length) : -1;
}
function parseMinutes(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.M = +n3[0], i2 + n3[0].length) : -1;
}
function parseSeconds(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.S = +n3[0], i2 + n3[0].length) : -1;
}
function parseMilliseconds(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 3));
  return n3 ? (d.L = +n3[0], i2 + n3[0].length) : -1;
}
function parseMicroseconds(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 6));
  return n3 ? (d.L = Math.floor(n3[0] / 1e3), i2 + n3[0].length) : -1;
}
function parseLiteralPercent(d, string, i2) {
  var n3 = percentRe.exec(string.slice(i2, i2 + 1));
  return n3 ? i2 + n3[0].length : -1;
}
function parseUnixTimestamp(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2));
  return n3 ? (d.Q = +n3[0], i2 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i2) {
  var n3 = numberRe.exec(string.slice(i2));
  return n3 ? (d.s = +n3[0], i2 + n3[0].length) : -1;
}
function formatDayOfMonth(d, p2) {
  return pad(d.getDate(), p2, 2);
}
function formatHour24(d, p2) {
  return pad(d.getHours(), p2, 2);
}
function formatHour12(d, p2) {
  return pad(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d, p2) {
  return pad(1 + day_default.count(year_default(d), d), p2, 3);
}
function formatMilliseconds(d, p2) {
  return pad(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d, p2) {
  return formatMilliseconds(d, p2) + "000";
}
function formatMonthNumber(d, p2) {
  return pad(d.getMonth() + 1, p2, 2);
}
function formatMinutes(d, p2) {
  return pad(d.getMinutes(), p2, 2);
}
function formatSeconds(d, p2) {
  return pad(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d) {
  var day4 = d.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday(d, p2) {
  return pad(sunday.count(year_default(d) - 1, d), p2, 2);
}
function dISO(d) {
  var day4 = d.getDay();
  return day4 >= 4 || day4 === 0 ? thursday(d) : thursday.ceil(d);
}
function formatWeekNumberISO(d, p2) {
  d = dISO(d);
  return pad(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p2) {
  return pad(monday.count(year_default(d) - 1, d), p2, 2);
}
function formatYear(d, p2) {
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatYearISO(d, p2) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatFullYear(d, p2) {
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d, p2) {
  var day4 = d.getDay();
  d = day4 >= 4 || day4 === 0 ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatZone(d) {
  var z2 = d.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p2) {
  return pad(d.getUTCDate(), p2, 2);
}
function formatUTCHour24(d, p2) {
  return pad(d.getUTCHours(), p2, 2);
}
function formatUTCHour12(d, p2) {
  return pad(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d, p2) {
  return pad(1 + utcDay_default.count(utcYear_default(d), d), p2, 3);
}
function formatUTCMilliseconds(d, p2) {
  return pad(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d, p2) {
  return formatUTCMilliseconds(d, p2) + "000";
}
function formatUTCMonthNumber(d, p2) {
  return pad(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d, p2) {
  return pad(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d, p2) {
  return pad(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p2) {
  return pad(utcSunday.count(utcYear_default(d) - 1, d), p2, 2);
}
function UTCdISO(d) {
  var day4 = d.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p2) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p2) {
  return pad(utcMonday.count(utcYear_default(d) - 1, d), p2, 2);
}
function formatUTCYear(d, p2) {
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d, p2) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d, p2) {
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d, p2) {
  var day4 = d.getUTCDay();
  d = day4 >= 4 || day4 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/defaultLocale.js
var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  timeParse = locale.parse;
  utcFormat = locale.utcFormat;
  utcParse = locale.utcParse;
  return locale;
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date2) {
  return date2.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/@nivo/scales/node_modules/d3-array/src/ascending.js
function ascending_default(a2, b2) {
  return a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
}

// node_modules/@nivo/scales/node_modules/d3-array/src/bisector.js
function bisector_default(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare = ascendingComparator(f);
  }
  function left(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    const i2 = left(a2, x, lo, hi - 1);
    return i2 > lo && delta(a2[i2 - 1], x) > -delta(a2[i2], x) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function ascendingComparator(f) {
  return (d, x) => ascending_default(f(d), x);
}

// node_modules/@nivo/scales/node_modules/d3-array/src/number.js
function number_default(x) {
  return x === null ? NaN : +x;
}

// node_modules/@nivo/scales/node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;
var bisect_default = bisectRight;

// node_modules/@nivo/scales/node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/@nivo/scales/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start, stop, count3) {
  var reverse3, i2 = -1, n3, ticks, step;
  stop = +stop, start = +start, count3 = +count3;
  if (start === stop && count3 > 0)
    return [start];
  if (reverse3 = stop < start)
    n3 = start, start = stop, stop = n3;
  if ((step = tickIncrement(start, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i2 < n3)
      ticks[i2] = (r0 + i2) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i2 < n3)
      ticks[i2] = (r0 + i2) / step;
  }
  if (reverse3)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count3) {
  var step = (stop - start) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count3) {
  var step0 = Math.abs(stop - start) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}

// node_modules/@nivo/scales/node_modules/d3-array/src/range.js
function range_default(start, stop, step) {
  start = +start, stop = +stop, step = (n3 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n3 < 3 ? 1 : +step;
  var i2 = -1, n3 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n3);
  while (++i2 < n3) {
    range[i2] = start + i2 * step;
  }
  return range;
}

// node_modules/@nivo/scales/node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array3, i0 = 0, i1 = array3.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i2 = random() * m-- | 0, t5 = array3[m + i0];
      array3[m + i0] = array3[i2 + i0];
      array3[i2 + i0] = t5;
    }
    return array3;
  };
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index3 = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
  function scale(d) {
    var key = d + "", i2 = index3.get(key);
    if (!i2) {
      if (unknown !== implicit)
        return unknown;
      index3.set(key, i2 = domain.push(d));
    }
    return range[(i2 - 1) % range.length];
  }
  scale.domain = function(_2) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index3 = /* @__PURE__ */ new Map();
    for (const value of _2) {
      const key = value + "";
      if (index3.has(key))
        continue;
      index3.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_2) {
    return arguments.length ? (range = Array.from(_2), scale) : range.slice();
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n3 = domain().length, reverse3 = r1 < r0, start = reverse3 ? r1 : r0, stop = reverse3 ? r0 : r1;
    step = (stop - start) / Math.max(1, n3 - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start += (stop - start - step * (n3 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range_default(n3).map(function(i2) {
      return start + step * i2;
    });
    return ordinalRange(reverse3 ? values.reverse() : values);
  }
  scale.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale.range = function(_2) {
    return arguments.length ? ([r0, r1] = _2, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_2) {
    return [r0, r1] = _2, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_2) {
    return arguments.length ? (round = !!_2, rescale()) : round;
  };
  scale.padding = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_2), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, _2), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_2) {
    return arguments.length ? (paddingOuter = +_2, rescale()) : paddingOuter;
  };
  scale.align = function(_2) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _2)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy3 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy3());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

// node_modules/@nivo/scales/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/@nivo/scales/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format3)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format3)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format3)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format3)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n3) {
  return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba(r2, g2, b2, a2) {
  if (a2 <= 0)
    r2 = g2 = b2 = NaN;
  return new Rgb(r2, g2, b2, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r2, g2, b2, opacity) {
  return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g2, b2, opacity == null ? 1 : opacity);
}
function Rgb(r2, g2, b2, opacity) {
  this.r = +r2;
  this.g = +g2;
  this.b = +b2;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a2 = this.opacity;
  a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
  return (a2 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a2 === 1 ? ")" : ", " + a2 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h2, s, l, a2) {
  if (a2 <= 0)
    h2 = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h2 = s = NaN;
  else if (s <= 0)
    h2 = NaN;
  return new Hsl(h2, s, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r2 = o.r / 255, g2 = o.g / 255, b2 = o.b / 255, min3 = Math.min(r2, g2, b2), max3 = Math.max(r2, g2, b2), h2 = NaN, s = max3 - min3, l = (max3 + min3) / 2;
  if (s) {
    if (r2 === max3)
      h2 = (g2 - b2) / s + (g2 < b2) * 6;
    else if (g2 === max3)
      h2 = (b2 - r2) / s + 2;
    else
      h2 = (r2 - g2) / s + 4;
    s /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h2 *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h2;
  }
  return new Hsl(h2, s, l, o.opacity);
}
function hsl(h2, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h2, s, l, opacity) {
  this.h = +h2;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
      hsl2rgb(h2, m1, m2),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a2 = this.opacity;
    a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
    return (a2 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a2 === 1 ? ")" : ", " + a2 + ")");
  }
}));
function hsl2rgb(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/@nivo/scales/node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/@nivo/scales/node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t02 = 4 / 29;
var t12 = 6 / 29;
var t2 = 3 * t12 * t12;
var t3 = t12 * t12 * t12;
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl)
    return hcl2lab(o);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r2 = rgb2lrgb(o.r), g2 = rgb2lrgb(o.g), b2 = rgb2lrgb(o.b), y2 = xyz2lab((0.2225045 * r2 + 0.7168786 * g2 + 0.0606169 * b2) / Yn), x, z2;
  if (r2 === g2 && g2 === b2)
    x = z2 = y2;
  else {
    x = xyz2lab((0.4360747 * r2 + 0.3850649 * g2 + 0.1430804 * b2) / Xn);
    z2 = xyz2lab((0.0139322 * r2 + 0.0971045 * g2 + 0.7141733 * b2) / Zn);
  }
  return new Lab(116 * y2 - 16, 500 * (x - y2), 200 * (y2 - z2), o.opacity);
}
function lab(l, a2, b2, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b2, opacity == null ? 1 : opacity);
}
function Lab(l, a2, b2, opacity) {
  this.l = +l;
  this.a = +a2;
  this.b = +b2;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter: function(k2) {
    return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  darker: function(k2) {
    return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y2 = (this.l + 16) / 116, x = isNaN(this.a) ? y2 : y2 + this.a / 500, z2 = isNaN(this.b) ? y2 : y2 - this.b / 200;
    x = Xn * lab2xyz(x);
    y2 = Yn * lab2xyz(y2);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x - 1.6168667 * y2 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y2 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x - 0.2289914 * y2 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t5) {
  return t5 > t3 ? Math.pow(t5, 1 / 3) : t5 / t2 + t02;
}
function lab2xyz(t5) {
  return t5 > t12 ? t5 * t5 * t5 : t2 * (t5 - t02);
}
function lrgb2rgb(x) {
  return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h2 = Math.atan2(o.b, o.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h2, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h2, c, l, opacity) {
  this.h = +h2;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h))
    return new Lab(o.l, 0, 0, o.opacity);
  var h2 = o.h * radians;
  return new Lab(o.l, Math.cos(h2) * o.c, Math.sin(h2) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter: function(k2) {
    return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
  },
  darker: function(k2) {
    return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/@nivo/scales/node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r2 = o.r / 255, g2 = o.g / 255, b2 = o.b / 255, l = (BC_DA * b2 + ED * r2 - EB * g2) / (BC_DA + ED - EB), bl = b2 - l, k2 = (E * (g2 - l) - C * bl) / D, s = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h2 = s ? Math.atan2(k2, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s, l, o.opacity);
}
function cubehelix(h2, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s, l, opacity) {
  this.h = +h2;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  darker: function(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l + a2 * (A * cosh2 + B * sinh2)),
      255 * (l + a2 * (C * cosh2 + D * sinh2)),
      255 * (l + a2 * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/basis.js
function basis(t15, v0, v1, v2, v3) {
  var t22 = t15 * t15, t32 = t22 * t15;
  return ((1 - 3 * t15 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t15 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n3 = values.length - 1;
  return function(t5) {
    var i2 = t5 <= 0 ? t5 = 0 : t5 >= 1 ? (t5 = 1, n3 - 1) : Math.floor(t5 * n3), v1 = values[i2], v2 = values[i2 + 1], v0 = i2 > 0 ? values[i2 - 1] : 2 * v1 - v2, v3 = i2 < n3 - 1 ? values[i2 + 2] : 2 * v2 - v1;
    return basis((t5 - i2 / n3) * n3, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n3 = values.length;
  return function(t5) {
    var i2 = Math.floor(((t5 %= 1) < 0 ? ++t5 : t5) * n3), v0 = values[(i2 + n3 - 1) % n3], v1 = values[i2 % n3], v2 = values[(i2 + 1) % n3], v3 = values[(i2 + 2) % n3];
    return basis((t5 - i2 / n3) * n3, v0, v1, v2, v3);
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x) => () => x;

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t5) {
    return a2 + t5 * d;
  };
}
function exponential(a2, b2, y2) {
  return a2 = Math.pow(a2, y2), b2 = Math.pow(b2, y2) - a2, y2 = 1 / y2, function(t5) {
    return Math.pow(a2 + t5 * b2, y2);
  };
}
function hue(a2, b2) {
  var d = b2 - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a2) ? b2 : a2);
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a2, b2) {
    return b2 - a2 ? exponential(a2, b2, y2) : constant_default2(isNaN(a2) ? b2 : a2);
  };
}
function nogamma(a2, b2) {
  var d = b2 - a2;
  return d ? linear(a2, d) : constant_default2(isNaN(a2) ? b2 : a2);
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb2(start, end) {
    var r2 = color2((start = rgb(start)).r, (end = rgb(end)).r), g2 = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t5) {
      start.r = r2(t5);
      start.g = g2(t5);
      start.b = b2(t5);
      start.opacity = opacity(t5);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n3 = colors.length, r2 = new Array(n3), g2 = new Array(n3), b2 = new Array(n3), i2, color2;
    for (i2 = 0; i2 < n3; ++i2) {
      color2 = rgb(colors[i2]);
      r2[i2] = color2.r || 0;
      g2[i2] = color2.g || 0;
      b2[i2] = color2.b || 0;
    }
    r2 = spline(r2);
    g2 = spline(g2);
    b2 = spline(b2);
    color2.opacity = 1;
    return function(t5) {
      color2.r = r2(t5);
      color2.g = g2(t5);
      color2.b = b2(t5);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b2) {
  if (!b2)
    b2 = [];
  var n3 = a2 ? Math.min(b2.length, a2.length) : 0, c = b2.slice(), i2;
  return function(t5) {
    for (i2 = 0; i2 < n3; ++i2)
      c[i2] = a2[i2] * (1 - t5) + b2[i2] * t5;
    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/array.js
function genericArray(a2, b2) {
  var nb = b2 ? b2.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x = new Array(na), c = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2)
    x[i2] = value_default(a2[i2], b2[i2]);
  for (; i2 < nb; ++i2)
    c[i2] = b2[i2];
  return function(t5) {
    for (i2 = 0; i2 < na; ++i2)
      c[i2] = x[i2](t5);
    return c;
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/date.js
function date_default(a2, b2) {
  var d = /* @__PURE__ */ new Date();
  return a2 = +a2, b2 = +b2, function(t5) {
    return d.setTime(a2 * (1 - t5) + b2 * t5), d;
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/number.js
function number_default2(a2, b2) {
  return a2 = +a2, b2 = +b2, function(t5) {
    return a2 * (1 - t5) + b2 * t5;
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/object.js
function object_default(a2, b2) {
  var i2 = {}, c = {}, k2;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b2 === null || typeof b2 !== "object")
    b2 = {};
  for (k2 in b2) {
    if (k2 in a2) {
      i2[k2] = value_default(a2[k2], b2[k2]);
    } else {
      c[k2] = b2[k2];
    }
  }
  return function(t5) {
    for (k2 in i2)
      c[k2] = i2[k2](t5);
    return c;
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b2) {
  return function() {
    return b2;
  };
}
function one(b2) {
  return function(t5) {
    return b2(t5) + "";
  };
}
function string_default(a2, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s = [], q = [];
  a2 = a2 + "", b2 = b2 + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s[i2])
        s[i2] += bs;
      else
        s[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i2])
        s[i2] += bm;
      else
        s[++i2] = bm;
    } else {
      s[++i2] = null;
      q.push({ i: i2, x: number_default2(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s[i2])
      s[i2] += bs;
    else
      s[++i2] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b2) : (b2 = q.length, function(t5) {
    for (var i3 = 0, o; i3 < b2; ++i3)
      s[(o = q[i3]).i] = o.x(t5);
    return s.join("");
  });
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/value.js
function value_default(a2, b2) {
  var t5 = typeof b2, c;
  return b2 == null || t5 === "boolean" ? constant_default2(b2) : (t5 === "number" ? number_default2 : t5 === "string" ? (c = color(b2)) ? (b2 = c, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default2)(a2, b2);
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/round.js
function round_default(a2, b2) {
  return a2 = +a2, b2 = +b2, function(t5) {
    return Math.round(a2 * (1 - t5) + b2 * t5);
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b2, c, d, e4, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b2 * b2))
    a2 /= scaleX, b2 /= scaleX;
  if (skewX = a2 * c + b2 * d)
    c -= a2 * skewX, d -= b2 * skewX;
  if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b2 * c)
    a2 = -a2, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e4,
    translateY: f,
    rotate: Math.atan2(b2, a2) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i2 - 4, x: number_default2(xa, xb) }, { i: i2 - 2, x: number_default2(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b2, s, q) {
    if (a2 !== b2) {
      if (a2 - b2 > 180)
        b2 += 360;
      else if (b2 - a2 > 180)
        a2 += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default2(a2, b2) });
    } else if (b2) {
      s.push(pop(s) + "rotate(" + b2 + degParen);
    }
  }
  function skewX(a2, b2, s, q) {
    if (a2 !== b2) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default2(a2, b2) });
    } else if (b2) {
      s.push(pop(s) + "skewX(" + b2 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i2 = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i2 - 4, x: number_default2(xa, xb) }, { i: i2 - 2, x: number_default2(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b2) {
    var s = [], q = [];
    a2 = parse(a2), b2 = parse(b2);
    translate(a2.translateX, a2.translateY, b2.translateX, b2.translateY, s, q);
    rotate(a2.rotate, b2.rotate, s, q);
    skewX(a2.skewX, b2.skewX, s, q);
    scale(a2.scaleX, a2.scaleY, b2.scaleX, b2.scaleY, s, q);
    a2 = b2 = null;
    return function(t5) {
      var i2 = -1, n3 = q.length, o;
      while (++i2 < n3)
        s[(o = q[i2]).i] = o.x(t5);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S2;
    if (d2 < epsilon2) {
      S2 = Math.log(w1 / w0) / rho;
      i2 = function(t5) {
        return [
          ux0 + t5 * dx,
          uy0 + t5 * dy,
          w0 * Math.exp(rho * t5 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i2 = function(t5) {
        var s = t5 * S2, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i2.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i2;
  }
  zoom.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start, end) {
    var h2 = hue2((start = hsl(start)).h, (end = hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t5) {
      start.h = h2(t5);
      start.s = s(t5);
      start.l = l(t5);
      start.opacity = opacity(t5);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start, end) {
    var h2 = hue2((start = hcl(start)).h, (end = hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t5) {
      start.h = h2(t5);
      start.c = c(t5);
      start.l = l(t5);
      start.opacity = opacity(t5);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/@nivo/scales/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y2) {
    y2 = +y2;
    function cubehelix3(start, end) {
      var h2 = hue2((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t5) {
        start.h = h2(t5);
        start.s = s(t5);
        start.l = l(Math.pow(t5, y2));
        start.opacity = opacity(t5);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/@nivo/scales/node_modules/d3-scale/src/constant.js
function constants(x) {
  return function() {
    return x;
  };
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/number.js
function number(x) {
  return +x;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x) {
  return x;
}
function normalize(a2, b2) {
  return (b2 -= a2 = +a2) ? function(x) {
    return (x - a2) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a2, b2) {
  var t5;
  if (a2 > b2)
    t5 = a2, a2 = b2, b2 = t5;
  return function(x) {
    return Math.max(a2, Math.min(b2, x));
  };
}
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r2 = new Array(j), i2 = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i2 < j) {
    d[i2] = normalize(domain[i2], domain[i2 + 1]);
    r2[i2] = interpolate(range[i2], range[i2 + 1]);
  }
  return function(x) {
    var i3 = bisect_default(domain, x, 1, j) - 1;
    return r2[i3](d[i3](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate = value_default, transform, untransform, unknown, clamp = identity2, piecewise2, output, input;
  function rescale() {
    var n3 = Math.min(domain.length, range.length);
    if (clamp !== identity2)
      clamp = clamper(domain[0], domain[n3 - 1]);
    piecewise2 = n3 > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise2(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }
  scale.invert = function(y2) {
    return clamp(untransform((input || (input = piecewise2(range, domain.map(transform), number_default2)))(y2)));
  };
  scale.domain = function(_2) {
    return arguments.length ? (domain = Array.from(_2, number), rescale()) : domain.slice();
  };
  scale.range = function(_2) {
    return arguments.length ? (range = Array.from(_2), rescale()) : range.slice();
  };
  scale.rangeRound = function(_2) {
    return range = Array.from(_2), interpolate = round_default, rescale();
  };
  scale.clamp = function(_2) {
    return arguments.length ? (clamp = _2 ? true : identity2, rescale()) : clamp !== identity2;
  };
  scale.interpolate = function(_2) {
    return arguments.length ? (interpolate = _2, rescale()) : interpolate;
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : unknown;
  };
  return function(t5, u) {
    transform = t5, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity2, identity2);
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p2) {
  if ((i2 = (x = p2 ? x.toExponential(p2 - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i2, coefficient = x.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i2 + 1)
  ];
}

// node_modules/@nivo/scales/node_modules/d3-format/src/exponent.js
function exponent_default(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t5 = [], j = 0, g2 = grouping[0], length = 0;
    while (i2 > 0 && g2 > 0) {
      if (length + g2 + 1 > width)
        g2 = Math.max(1, width - length);
      t5.push(value.substring(i2 -= g2, i2 + g2));
      if ((length += g2 + 1) > width)
        break;
      g2 = grouping[j = (j + 1) % grouping.length];
    }
    return t5.reverse().join(thousands);
  };
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/scales/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n3 = s.length, i2 = 1, i0 = -1, i1; i2 < n3; ++i2) {
      switch (s[i2]) {
        case ".":
          i0 = i1 = i2;
          break;
        case "0":
          if (i0 === 0)
            i0 = i2;
          i1 = i2;
          break;
        default:
          if (!+s[i2])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i2 === n3 ? coefficient : i2 > n3 ? coefficient + new Array(i2 - n3 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x, Math.max(0, p2 + i2 - 1))[0];
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/scales/node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x, p2) => (x * 100).toFixed(p2),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal_default,
  "e": (x, p2) => x.toExponential(p2),
  "f": (x, p2) => x.toFixed(p2),
  "g": (x, p2) => x.toPrecision(p2),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p2) => formatRounded_default(x * 100, p2),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

// node_modules/@nivo/scales/node_modules/d3-format/src/identity.js
function identity_default2(x) {
  return x;
}

// node_modules/@nivo/scales/node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale5) {
  var group3 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "−" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n3, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n3 = value.length;
          while (++i2 < n3) {
            if (c = value.charCodeAt(i2), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e4 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e4), prefix = prefixes[8 + e4 / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/@nivo/scales/node_modules/d3-format/src/defaultLocale.js
var locale2;
var format;
var formatPrefix;
defaultLocale2({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale2(definition) {
  locale2 = locale_default(definition);
  format = locale2.format;
  formatPrefix = locale2.formatPrefix;
  return locale2;
}

// node_modules/@nivo/scales/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/@nivo/scales/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/@nivo/scales/node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count3, specifier) {
  var step = tickStep(start, stop, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d = domain();
    return ticks_default(d[0], d[d.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count3);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/nice.js
function nice2(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t5;
  if (x1 < x0) {
    t5 = i0, i0 = i1, i1 = t5;
    t5 = x0, x0 = x1, x1 = t5;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/log.js
function transformLog(x) {
  return Math.log(x);
}
function transformExp(x) {
  return Math.exp(x);
}
function transformLogn(x) {
  return -Math.log(-x);
}
function transformExpn(x) {
  return -Math.exp(-x);
}
function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x) {
    return Math.pow(base, x);
  };
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x) {
    return Math.log(x) / base;
  });
}
function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}
function loggish(transform) {
  var scale = transform(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_2) {
    return arguments.length ? (base = +_2, rescale()) : base;
  };
  scale.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale.ticks = function(count3) {
    var d = domain(), u = d[0], v2 = d[d.length - 1], r2;
    if (r2 = v2 < u)
      i2 = u, u = v2, v2 = i2;
    var i2 = logs(u), j = logs(v2), p2, k2, t5, n3 = count3 == null ? 10 : +count3, z2 = [];
    if (!(base % 1) && j - i2 < n3) {
      i2 = Math.floor(i2), j = Math.ceil(j);
      if (u > 0)
        for (; i2 <= j; ++i2) {
          for (k2 = 1, p2 = pows(i2); k2 < base; ++k2) {
            t5 = p2 * k2;
            if (t5 < u)
              continue;
            if (t5 > v2)
              break;
            z2.push(t5);
          }
        }
      else
        for (; i2 <= j; ++i2) {
          for (k2 = base - 1, p2 = pows(i2); k2 >= 1; --k2) {
            t5 = p2 * k2;
            if (t5 < u)
              continue;
            if (t5 > v2)
              break;
            z2.push(t5);
          }
        }
      if (z2.length * 2 < n3)
        z2 = ticks_default(u, v2, n3);
    } else {
      z2 = ticks_default(i2, j, Math.min(j - i2, n3)).map(pows);
    }
    return r2 ? z2.reverse() : z2;
  };
  scale.tickFormat = function(count3, specifier) {
    if (specifier == null)
      specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function")
      specifier = format(specifier);
    if (count3 === Infinity)
      return specifier;
    if (count3 == null)
      count3 = 10;
    var k2 = Math.max(1, base * count3 / scale.ticks().length);
    return function(d) {
      var i2 = d / pows(Math.round(logs(d)));
      if (i2 * base < base - 0.5)
        i2 *= base;
      return i2 <= k2 ? specifier(d) : "";
    };
  };
  scale.nice = function() {
    return domain(nice2(domain(), {
      floor: function(x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function(x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };
  return scale;
}
function log() {
  var scale = loggish(transformer()).domain([1, 10]);
  scale.copy = function() {
    return copy(scale, log()).base(scale.base());
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/symlog.js
function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}
function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}
function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
  scale.constant = function(_2) {
    return arguments.length ? transform(transformSymlog(c = +_2), transformSymexp(c)) : c;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/interval.js
var t03 = /* @__PURE__ */ new Date();
var t13 = /* @__PURE__ */ new Date();
function newInterval2(floori, offseti, count3, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = function(date2) {
    var d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval2(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start, end) {
      t03.setTime(+start), t13.setTime(+end);
      floori(t03), floori(t13);
      return Math.floor(count3(t03, t13));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start, end) {
  return end - start;
});
millisecond2.every = function(k2) {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond2;
  return newInterval2(function(date2) {
    date2.setTime(Math.floor(date2 / k2) * k2);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k2);
  }, function(start, end) {
    return (end - start) / k2;
  });
};
var millisecond_default2 = millisecond2;
var milliseconds2 = millisecond2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth = durationDay2 * 30;
var durationYear = durationDay2 * 365;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond2);
}, function(start, end) {
  return (end - start) / durationSecond2;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default2 = second2;
var seconds2 = second2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond2);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default2 = minute2;
var minutes2 = minute2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond2 - date2.getMinutes() * durationMinute2);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date2) {
  return date2.getHours();
});
var hour_default2 = hour2;
var hours2 = hour2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/day.js
var day2 = newInterval2(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationDay2,
  (date2) => date2.getDate() - 1
);
var day_default2 = day2;
var days2 = day2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/week.js
function weekday2(i2) {
  return newInterval2(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default2 = month2;
var months2 = month2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year2.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval2(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k2);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default2 = utcMinute2;
var utcMinutes2 = utcMinute2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default2 = utcHour2;
var utcHours2 = utcHour2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay2;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i2) {
  return newInterval2(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default2 = utcMonth2;
var utcMonths2 = utcMonth2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear2.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval2(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/@nivo/scales/node_modules/d3-scale/node_modules/d3-time/src/ticks.js
function ticker(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default2, 1, durationSecond2],
    [second_default2, 5, 5 * durationSecond2],
    [second_default2, 15, 15 * durationSecond2],
    [second_default2, 30, 30 * durationSecond2],
    [minute4, 1, durationMinute2],
    [minute4, 5, 5 * durationMinute2],
    [minute4, 15, 15 * durationMinute2],
    [minute4, 30, 30 * durationMinute2],
    [hour4, 1, durationHour2],
    [hour4, 3, 3 * durationHour2],
    [hour4, 6, 6 * durationHour2],
    [hour4, 12, 12 * durationHour2],
    [day4, 1, durationDay2],
    [day4, 2, 2 * durationDay2],
    [week, 1, durationWeek2],
    [month4, 1, durationMonth],
    [month4, 3, 3 * durationMonth],
    [year4, 1, durationYear]
  ];
  function ticks(start, stop, count3) {
    const reverse3 = stop < start;
    if (reverse3)
      [start, stop] = [stop, start];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start, stop, count3);
    const ticks2 = interval ? interval.range(start, +stop + 1) : [];
    return reverse3 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start, stop, count3) {
    const target = Math.abs(stop - start) / count3;
    const i2 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i2 === tickIntervals.length)
      return year4.every(tickStep(start / durationYear, stop / durationYear, count3));
    if (i2 === 0)
      return millisecond_default2.every(Math.max(tickStep(start, stop, count3), 1));
    const [t5, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t5.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default2, utcMonth_default2, utcSunday2, utcDay_default2, utcHour_default2, utcMinute_default2);
var [timeTicks, timeTickInterval] = ticker(year_default2, month_default2, sunday2, day_default2, hour_default2, minute_default2);

// node_modules/@nivo/scales/node_modules/d3-scale/src/time.js
function date(t5) {
  return new Date(t5);
}
function number2(t5) {
  return t5 instanceof Date ? +t5 : +/* @__PURE__ */ new Date(+t5);
}
function calendar(ticks, tickInterval, year4, month4, week, day4, hour4, minute4, second4, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear3 = format3("%Y");
  function tickFormat2(date2) {
    return (second4(date2) < date2 ? formatMillisecond : minute4(date2) < date2 ? formatSecond : hour4(date2) < date2 ? formatMinute : day4(date2) < date2 ? formatHour : month4(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year4(date2) < date2 ? formatMonth : formatYear3)(date2);
  }
  scale.invert = function(y2) {
    return new Date(invert(y2));
  };
  scale.domain = function(_2) {
    return arguments.length ? domain(Array.from(_2, number2)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count3, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function")
      interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice2(d, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks, tickInterval, year4, month4, week, day4, hour4, minute4, second4, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, year_default2, month_default2, sunday2, day_default2, hour_default2, minute_default2, second_default2, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/@nivo/scales/node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default2, utcMonth_default2, utcSunday2, utcDay_default2, utcHour_default2, utcMinute_default2, second_default2, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// node_modules/@nivo/scales/dist/nivo-scales.es.js
function $() {
  return $ = Object.assign ? Object.assign.bind() : function(n3) {
    for (var t5 = 1; t5 < arguments.length; t5++) {
      var r2 = arguments[t5];
      for (var e4 in r2)
        Object.prototype.hasOwnProperty.call(r2, e4) && (n3[e4] = r2[e4]);
    }
    return n3;
  }, $.apply(this, arguments);
}
var J = [function(n3) {
  return n3.setMilliseconds(0);
}, function(n3) {
  return n3.setSeconds(0);
}, function(n3) {
  return n3.setMinutes(0);
}, function(n3) {
  return n3.setHours(0);
}, function(n3) {
  return n3.setDate(1);
}, function(n3) {
  return n3.setMonth(0);
}];
var K2 = { millisecond: [], second: J.slice(0, 1), minute: J.slice(0, 2), hour: J.slice(0, 3), day: J.slice(0, 4), month: J.slice(0, 5), year: J.slice(0, 6) };
var L = function(n3) {
  return function(t5) {
    return K2[n3].forEach(function(n4) {
      n4(t5);
    }), t5;
  };
};
var Q = function(n3) {
  var t5 = n3.format, r2 = void 0 === t5 ? "native" : t5, e4 = n3.precision, a2 = void 0 === e4 ? "millisecond" : e4, u = n3.useUTC, c = void 0 === u || u, s = L(a2);
  return function(n4) {
    if (void 0 === n4)
      return n4;
    if ("native" === r2 || n4 instanceof Date)
      return s(n4);
    var t6 = c ? utcParse(r2) : timeParse(r2);
    return s(t6(n4));
  };
};
var W = function(n3, t5, r2, e4) {
  var a2, i2, o, c, s = n3.min, d = void 0 === s ? 0 : s, f = n3.max, l = void 0 === f ? "auto" : f, m = n3.stacked, v2 = void 0 !== m && m, y2 = n3.reverse, p2 = void 0 !== y2 && y2, h2 = n3.clamp, g2 = void 0 !== h2 && h2, x = n3.nice, k2 = void 0 !== x && x;
  "auto" === d ? a2 = true === v2 ? null != (i2 = t5.minStacked) ? i2 : 0 : t5.min : a2 = d;
  "auto" === l ? o = true === v2 ? null != (c = t5.maxStacked) ? c : 0 : t5.max : o = l;
  var T2 = linear2().rangeRound("x" === e4 ? [0, r2] : [r2, 0]).domain(p2 ? [o, a2] : [a2, o]).clamp(g2);
  return true === k2 ? T2.nice() : "number" == typeof k2 && T2.nice(k2), X(T2, v2);
};
var X = function(n3, t5) {
  void 0 === t5 && (t5 = false);
  var r2 = n3;
  return r2.type = "linear", r2.stacked = t5, r2;
};
var Y = function(n3, t5, r2) {
  var e4 = point().range([0, r2]).domain(t5.all);
  return e4.type = "point", e4;
};
var _ = function(n3, t5, r2, e4) {
  var a2 = n3.round, i2 = void 0 === a2 || a2, o = band().range("x" === e4 ? [0, r2] : [r2, 0]).domain(t5.all).round(i2);
  return nn(o);
};
var nn = function(n3) {
  var t5 = n3;
  return t5.type = "band", t5;
};
var tn = function(n3, t5, r2) {
  var e4, a2, i2 = n3.format, o = void 0 === i2 ? "native" : i2, u = n3.precision, c = void 0 === u ? "millisecond" : u, s = n3.min, l = void 0 === s ? "auto" : s, m = n3.max, v2 = void 0 === m ? "auto" : m, y2 = n3.useUTC, p2 = void 0 === y2 || y2, h2 = n3.nice, g2 = void 0 !== h2 && h2, x = Q({ format: o, precision: c, useUTC: p2 });
  e4 = "auto" === l ? x(t5.min) : "native" !== o ? x(l) : l, a2 = "auto" === v2 ? x(t5.max) : "native" !== o ? x(v2) : v2;
  var k2 = p2 ? utcTime() : time();
  k2.range([0, r2]), e4 && a2 && k2.domain([e4, a2]), true === g2 ? k2.nice() : "object" != typeof g2 && "number" != typeof g2 || k2.nice(g2);
  var T2 = k2;
  return T2.type = "time", T2.useUTC = p2, T2;
};
var rn = function(n3, t5, r2, e4) {
  var a2, i2 = n3.base, o = void 0 === i2 ? 10 : i2, u = n3.min, c = void 0 === u ? "auto" : u, s = n3.max, d = void 0 === s ? "auto" : s;
  if (t5.all.some(function(n4) {
    return 0 === n4;
  }))
    throw new Error("a log scale domain must not include or cross zero");
  var f, m, v2 = false;
  if (t5.all.filter(function(n4) {
    return null != n4;
  }).forEach(function(n4) {
    v2 || (void 0 === a2 ? a2 = Math.sign(n4) : Math.sign(n4) !== a2 && (v2 = true));
  }), v2)
    throw new Error("a log scale domain must be strictly-positive or strictly-negative");
  f = "auto" === c ? t5.min : c, m = "auto" === d ? t5.max : d;
  var y2 = log().domain([f, m]).rangeRound("x" === e4 ? [0, r2] : [r2, 0]).base(o).nice();
  return y2.type = "log", y2;
};
var en = function(n3, t5, r2, e4) {
  var a2, i2, o = n3.constant, u = void 0 === o ? 1 : o, c = n3.min, s = void 0 === c ? "auto" : c, d = n3.max, f = void 0 === d ? "auto" : d, l = n3.reverse, v2 = void 0 !== l && l;
  a2 = "auto" === s ? t5.min : s, i2 = "auto" === f ? t5.max : f;
  var y2 = symlog().constant(u).rangeRound("x" === e4 ? [0, r2] : [r2, 0]).nice();
  true === v2 ? y2.domain([i2, a2]) : y2.domain([a2, i2]);
  var p2 = y2;
  return p2.type = "symlog", p2;
};
var an = function(n3) {
  return "x" === n3 ? "y" : "x";
};
var on = function(n3, t5) {
  return n3 === t5;
};
var un = function(n3, t5) {
  return n3.getTime() === t5.getTime();
};
function cn(n3, t5, r2, e4) {
  switch (n3.type) {
    case "linear":
      return W(n3, t5, r2, e4);
    case "point":
      return Y(n3, t5, r2);
    case "band":
      return _(n3, t5, r2, e4);
    case "time":
      return tn(n3, t5, r2);
    case "log":
      return rn(n3, t5, r2, e4);
    case "symlog":
      return en(n3, t5, r2, e4);
    default:
      throw new Error("invalid scale spec");
  }
}
var sn = function(n3, t5, r2) {
  var e4;
  if ("stacked" in r2 && r2.stacked) {
    var a2 = n3.data["x" === t5 ? "xStacked" : "yStacked"];
    return null == a2 ? null : r2(a2);
  }
  return null != (e4 = r2(n3.data[t5])) ? e4 : null;
};
var dn = function(n3, t5, r2, e4, a2) {
  var i2 = n3.map(function(n4) {
    return function(n5) {
      return $({}, n5, { data: n5.data.map(function(n6) {
        return { data: $({}, n6) };
      }) });
    }(n4);
  }), o = fn(i2, t5, r2);
  "stacked" in t5 && true === t5.stacked && vn(o, i2), "stacked" in r2 && true === r2.stacked && yn(o, i2);
  var u = cn(t5, o.x, e4, "x"), c = cn(r2, o.y, a2, "y"), s = i2.map(function(n4) {
    return $({}, n4, { data: n4.data.map(function(n5) {
      return $({}, n5, { position: { x: sn(n5, "x", u), y: sn(n5, "y", c) } });
    }) });
  });
  return $({}, o, { series: s, xScale: u, yScale: c });
};
var fn = function(n3, t5, r2) {
  return { x: ln(n3, "x", t5), y: ln(n3, "y", r2) };
};
var ln = function(a2, i2, o, u) {
  var c = void 0 === u ? {} : u, s = c.getValue, d = void 0 === s ? function(n3) {
    return n3.data[i2];
  } : s, f = c.setValue, l = void 0 === f ? function(n3, t5) {
    n3.data[i2] = t5;
  } : f;
  if ("linear" === o.type)
    a2.forEach(function(n3) {
      n3.data.forEach(function(n4) {
        var t5 = d(n4);
        t5 && l(n4, parseFloat(String(t5)));
      });
    });
  else if ("time" === o.type && "native" !== o.format) {
    var m = Q(o);
    a2.forEach(function(n3) {
      n3.data.forEach(function(n4) {
        var t5 = d(n4);
        t5 && l(n4, m(t5));
      });
    });
  }
  var v2 = [];
  switch (a2.forEach(function(n3) {
    n3.data.forEach(function(n4) {
      v2.push(d(n4));
    });
  }), o.type) {
    case "linear":
      var y2 = (0, import_sortBy.default)((0, import_uniq.default)(v2).filter(function(n3) {
        return null !== n3;
      }), function(n3) {
        return n3;
      });
      return { all: y2, min: Math.min.apply(Math, y2), max: Math.max.apply(Math, y2) };
    case "time":
      var p2 = (0, import_uniqBy.default)(v2, function(n3) {
        return n3.getTime();
      }).slice(0).sort(function(n3, t5) {
        return t5.getTime() - n3.getTime();
      }).reverse();
      return { all: p2, min: p2[0], max: (0, import_last.default)(p2) };
    default:
      var h2 = (0, import_uniq.default)(v2);
      return { all: h2, min: h2[0], max: (0, import_last.default)(h2) };
  }
};
var mn = function(n3, t5, r2) {
  var i2 = an(n3), o = [];
  t5[i2].all.forEach(function(t6) {
    var u = (0, import_isDate.default)(t6) ? un : on, c = [];
    r2.forEach(function(r3) {
      var a2 = r3.data.find(function(n4) {
        return u(n4.data[i2], t6);
      }), s = null, d = null;
      if (void 0 !== a2) {
        if (null !== (s = a2.data[n3])) {
          var f = (0, import_last.default)(c);
          void 0 === f ? d = s : null !== f && (d = f + s);
        }
        a2.data["x" === n3 ? "xStacked" : "yStacked"] = d;
      }
      c.push(d), null !== d && o.push(d);
    });
  }), t5[n3].minStacked = Math.min.apply(Math, o), t5[n3].maxStacked = Math.max.apply(Math, o);
};
var vn = function(n3, t5) {
  return mn("x", n3, t5);
};
var yn = function(n3, t5) {
  return mn("y", n3, t5);
};
var pn = function(n3) {
  var t5 = n3.bandwidth();
  if (0 === t5)
    return n3;
  var r2 = t5 / 2;
  return n3.round() && (r2 = Math.round(r2)), function(t6) {
    var e4;
    return (null != (e4 = n3(t6)) ? e4 : 0) + r2;
  };
};
var hn = { millisecond: [millisecond_default, millisecond_default], second: [second_default, second_default], minute: [minute_default, utcMinute_default], hour: [hour_default, utcHour_default], day: [newInterval(function(n3) {
  return n3.setHours(0, 0, 0, 0);
}, function(n3, t5) {
  return n3.setDate(n3.getDate() + t5);
}, function(n3, t5) {
  return (t5.getTime() - n3.getTime()) / 864e5;
}, function(n3) {
  return Math.floor(n3.getTime() / 864e5);
}), newInterval(function(n3) {
  return n3.setUTCHours(0, 0, 0, 0);
}, function(n3, t5) {
  return n3.setUTCDate(n3.getUTCDate() + t5);
}, function(n3, t5) {
  return (t5.getTime() - n3.getTime()) / 864e5;
}, function(n3) {
  return Math.floor(n3.getTime() / 864e5);
})], week: [sunday, utcSunday], sunday: [sunday, utcSunday], monday: [monday, utcMonday], tuesday: [tuesday, utcTuesday], wednesday: [wednesday, utcWednesday], thursday: [thursday, utcThursday], friday: [friday, utcFriday], saturday: [saturday, utcSaturday], month: [month_default, utcMonth_default], year: [year_default, utcYear_default] };
var gn = Object.keys(hn);
var xn = new RegExp("^every\\s*(\\d+)?\\s*(" + gn.join("|") + ")s?$", "i");
var kn = function(n3, t5) {
  if (Array.isArray(t5))
    return t5;
  if ("string" == typeof t5 && "useUTC" in n3) {
    var r2 = t5.match(xn);
    if (r2) {
      var e4 = r2[1], a2 = r2[2], i2 = hn[a2][n3.useUTC ? 1 : 0];
      if ("day" === a2) {
        var o, u, c = n3.domain(), s = c[0], d = c[1], f = new Date(d);
        return f.setDate(f.getDate() + 1), null != (o = null == (u = i2.every(Number(null != e4 ? e4 : 1))) ? void 0 : u.range(s, f)) ? o : [];
      }
      if (void 0 === e4)
        return n3.ticks(i2);
      var l = i2.every(Number(e4));
      if (l)
        return n3.ticks(l);
    }
    throw new Error("Invalid tickValues: " + t5);
  }
  if ("ticks" in n3) {
    if (void 0 === t5)
      return n3.ticks();
    if ("number" == typeof (m = t5) && isFinite(m) && Math.floor(m) === m)
      return n3.ticks(t5);
  }
  var m;
  return n3.domain();
};

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var t4 = __toESM(require_react());
var import_react = __toESM(require_react());

// node_modules/@nivo/axes/node_modules/d3-time/src/interval.js
var t04 = /* @__PURE__ */ new Date();
var t14 = /* @__PURE__ */ new Date();
function newInterval3(floori, offseti, count3, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = function(date2) {
    var d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval3(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval.count = function(start, end) {
      t04.setTime(+start), t14.setTime(+end);
      floori(t04), floori(t14);
      return Math.floor(count3(t04, t14));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/axes/node_modules/d3-time/src/millisecond.js
var millisecond3 = newInterval3(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start, end) {
  return end - start;
});
millisecond3.every = function(k2) {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond3;
  return newInterval3(function(date2) {
    date2.setTime(Math.floor(date2 / k2) * k2);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k2);
  }, function(start, end) {
    return (end - start) / k2;
  });
};
var millisecond_default3 = millisecond3;
var milliseconds3 = millisecond3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/duration.js
var durationSecond3 = 1e3;
var durationMinute3 = durationSecond3 * 60;
var durationHour3 = durationMinute3 * 60;
var durationDay3 = durationHour3 * 24;
var durationWeek3 = durationDay3 * 7;
var durationMonth2 = durationDay3 * 30;
var durationYear2 = durationDay3 * 365;

// node_modules/@nivo/axes/node_modules/d3-time/src/second.js
var second3 = newInterval3(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond3);
}, function(start, end) {
  return (end - start) / durationSecond3;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default3 = second3;
var seconds3 = second3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/minute.js
var minute3 = newInterval3(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond3);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute3);
}, function(start, end) {
  return (end - start) / durationMinute3;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default3 = minute3;
var minutes3 = minute3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/hour.js
var hour3 = newInterval3(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond3 - date2.getMinutes() * durationMinute3);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour3);
}, function(start, end) {
  return (end - start) / durationHour3;
}, function(date2) {
  return date2.getHours();
});
var hour_default3 = hour3;
var hours3 = hour3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/day.js
var day3 = newInterval3(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute3) / durationDay3,
  (date2) => date2.getDate() - 1
);
var day_default3 = day3;
var days3 = day3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/week.js
function weekday3(i2) {
  return newInterval3(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute3) / durationWeek3;
  });
}
var sunday3 = weekday3(0);
var monday3 = weekday3(1);
var tuesday3 = weekday3(2);
var wednesday3 = weekday3(3);
var thursday3 = weekday3(4);
var friday3 = weekday3(5);
var saturday3 = weekday3(6);
var sundays3 = sunday3.range;
var mondays3 = monday3.range;
var tuesdays3 = tuesday3.range;
var wednesdays3 = wednesday3.range;
var thursdays3 = thursday3.range;
var fridays3 = friday3.range;
var saturdays3 = saturday3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/month.js
var month3 = newInterval3(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default3 = month3;
var months3 = month3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/year.js
var year3 = newInterval3(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year3.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval3(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k2);
  });
};
var year_default3 = year3;
var years3 = year3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMinute.js
var utcMinute3 = newInterval3(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute3);
}, function(start, end) {
  return (end - start) / durationMinute3;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default3 = utcMinute3;
var utcMinutes3 = utcMinute3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcHour.js
var utcHour3 = newInterval3(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour3);
}, function(start, end) {
  return (end - start) / durationHour3;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default3 = utcHour3;
var utcHours3 = utcHour3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcDay.js
var utcDay3 = newInterval3(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay3;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default3 = utcDay3;
var utcDays3 = utcDay3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcWeek.js
function utcWeekday3(i2) {
  return newInterval3(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek3;
  });
}
var utcSunday3 = utcWeekday3(0);
var utcMonday3 = utcWeekday3(1);
var utcTuesday3 = utcWeekday3(2);
var utcWednesday3 = utcWeekday3(3);
var utcThursday3 = utcWeekday3(4);
var utcFriday3 = utcWeekday3(5);
var utcSaturday3 = utcWeekday3(6);
var utcSundays3 = utcSunday3.range;
var utcMondays3 = utcMonday3.range;
var utcTuesdays3 = utcTuesday3.range;
var utcWednesdays3 = utcWednesday3.range;
var utcThursdays3 = utcThursday3.range;
var utcFridays3 = utcFriday3.range;
var utcSaturdays3 = utcSaturday3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMonth.js
var utcMonth3 = newInterval3(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default3 = utcMonth3;
var utcMonths3 = utcMonth3.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcYear.js
var utcYear3 = newInterval3(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear3.every = function(k2) {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval3(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
  });
};
var utcYear_default3 = utcYear3;
var utcYears3 = utcYear3.range;

// node_modules/@nivo/axes/node_modules/d3-array/src/ascending.js
function ascending_default2(a2, b2) {
  return a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisector.js
function bisector_default2(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare = ascendingComparator2(f);
  }
  function left(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a2[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a2, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a2.length;
    const i2 = left(a2, x, lo, hi - 1);
    return i2 > lo && delta(a2[i2 - 1], x) > -delta(a2[i2], x) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function ascendingComparator2(f) {
  return (d, x) => ascending_default2(f(d), x);
}

// node_modules/@nivo/axes/node_modules/d3-array/src/number.js
function number_default3(x) {
  return x === null ? NaN : +x;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector_default2(ascending_default2);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;
var bisectCenter2 = bisector_default2(number_default3).center;

// node_modules/@nivo/axes/node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice2 = array2.slice;
var map4 = array2.map;

// node_modules/@nivo/axes/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);
function tickStep2(start, stop, count3) {
  var step0 = Math.abs(stop - start) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e102)
    step1 *= 10;
  else if (error >= e52)
    step1 *= 5;
  else if (error >= e22)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/shuffle.js
var shuffle_default2 = shuffler2(Math.random);
function shuffler2(random) {
  return function shuffle(array3, i0 = 0, i1 = array3.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i2 = random() * m-- | 0, t5 = array3[m + i0];
      array3[m + i0] = array3[i2 + i0];
      array3[i2 + i0] = t5;
    }
    return array3;
  };
}

// node_modules/@nivo/axes/node_modules/d3-time/src/ticks.js
function ticker2(year4, month4, week, day4, hour4, minute4) {
  const tickIntervals = [
    [second_default3, 1, durationSecond3],
    [second_default3, 5, 5 * durationSecond3],
    [second_default3, 15, 15 * durationSecond3],
    [second_default3, 30, 30 * durationSecond3],
    [minute4, 1, durationMinute3],
    [minute4, 5, 5 * durationMinute3],
    [minute4, 15, 15 * durationMinute3],
    [minute4, 30, 30 * durationMinute3],
    [hour4, 1, durationHour3],
    [hour4, 3, 3 * durationHour3],
    [hour4, 6, 6 * durationHour3],
    [hour4, 12, 12 * durationHour3],
    [day4, 1, durationDay3],
    [day4, 2, 2 * durationDay3],
    [week, 1, durationWeek3],
    [month4, 1, durationMonth2],
    [month4, 3, 3 * durationMonth2],
    [year4, 1, durationYear2]
  ];
  function ticks(start, stop, count3) {
    const reverse3 = stop < start;
    if (reverse3)
      [start, stop] = [stop, start];
    const interval = count3 && typeof count3.range === "function" ? count3 : tickInterval(start, stop, count3);
    const ticks2 = interval ? interval.range(start, +stop + 1) : [];
    return reverse3 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start, stop, count3) {
    const target = Math.abs(stop - start) / count3;
    const i2 = bisector_default2(([, , step2]) => step2).right(tickIntervals, target);
    if (i2 === tickIntervals.length)
      return year4.every(tickStep2(start / durationYear2, stop / durationYear2, count3));
    if (i2 === 0)
      return millisecond_default3.every(Math.max(tickStep2(start, stop, count3), 1));
    const [t5, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t5.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks2, utcTickInterval2] = ticker2(utcYear_default3, utcMonth_default3, utcSunday3, utcDay_default3, utcHour_default3, utcMinute_default3);
var [timeTicks2, timeTickInterval2] = ticker2(year_default3, month_default3, sunday3, day_default3, hour_default3, minute_default3);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/locale.js
function localDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate2(y2, m, d) {
  return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale2(locale5) {
  var locale_dateTime = locale5.dateTime, locale_date = locale5.date, locale_time = locale5.time, locale_periods = locale5.periods, locale_weekdays = locale5.days, locale_shortWeekdays = locale5.shortDays, locale_months = locale5.months, locale_shortMonths = locale5.shortMonths;
  var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth2,
    "e": formatDayOfMonth2,
    "f": formatMicroseconds2,
    "g": formatYearISO2,
    "G": formatFullYearISO2,
    "H": formatHour242,
    "I": formatHour122,
    "j": formatDayOfYear2,
    "L": formatMilliseconds2,
    "m": formatMonthNumber2,
    "M": formatMinutes2,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatSeconds2,
    "u": formatWeekdayNumberMonday2,
    "U": formatWeekNumberSunday2,
    "V": formatWeekNumberISO2,
    "w": formatWeekdayNumberSunday2,
    "W": formatWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear2,
    "Z": formatZone2,
    "%": formatLiteralPercent2
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth2,
    "e": formatUTCDayOfMonth2,
    "f": formatUTCMicroseconds2,
    "g": formatUTCYearISO2,
    "G": formatUTCFullYearISO2,
    "H": formatUTCHour242,
    "I": formatUTCHour122,
    "j": formatUTCDayOfYear2,
    "L": formatUTCMilliseconds2,
    "m": formatUTCMonthNumber2,
    "M": formatUTCMinutes2,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatUTCSeconds2,
    "u": formatUTCWeekdayNumberMonday2,
    "U": formatUTCWeekNumberSunday2,
    "V": formatUTCWeekNumberISO2,
    "w": formatUTCWeekdayNumberSunday2,
    "W": formatUTCWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatUTCYear2,
    "Y": formatUTCFullYear2,
    "Z": formatUTCZone2,
    "%": formatLiteralPercent2
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth2,
    "e": parseDayOfMonth2,
    "f": parseMicroseconds2,
    "g": parseYear2,
    "G": parseFullYear2,
    "H": parseHour242,
    "I": parseHour242,
    "j": parseDayOfYear2,
    "L": parseMilliseconds2,
    "m": parseMonthNumber2,
    "M": parseMinutes2,
    "p": parsePeriod,
    "q": parseQuarter2,
    "Q": parseUnixTimestamp2,
    "s": parseUnixTimestampSeconds2,
    "S": parseSeconds2,
    "u": parseWeekdayNumberMonday2,
    "U": parseWeekNumberSunday2,
    "V": parseWeekNumberISO2,
    "w": parseWeekdayNumberSunday2,
    "W": parseWeekNumberMonday2,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear2,
    "Y": parseFullYear2,
    "Z": parseZone2,
    "%": parseLiteralPercent2
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i2 = -1, j = 0, n3 = specifier.length, c, pad3, format3;
      if (!(date2 instanceof Date))
        date2 = /* @__PURE__ */ new Date(+date2);
      while (++i2 < n3) {
        if (specifier.charCodeAt(i2) === 37) {
          string.push(specifier.slice(j, i2));
          if ((pad3 = pads2[c = specifier.charAt(++i2)]) != null)
            c = specifier.charAt(++i2);
          else
            pad3 = c === "e" ? " " : "0";
          if (format3 = formats2[c])
            c = format3(date2, pad3);
          string.push(c);
          j = i2 + 1;
        }
      }
      string.push(specifier.slice(j, i2));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate2(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string += "", 0), week, day4;
      if (i2 != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate2(newDate2(d.y, 0, 1)), day4 = week.getUTCDay();
          week = day4 > 4 || day4 === 0 ? utcMonday3.ceil(week) : utcMonday3(week);
          week = utcDay_default3.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate2(newDate2(d.y, 0, 1)), day4 = week.getDay();
          week = day4 > 4 || day4 === 0 ? monday3.ceil(week) : monday3(week);
          week = day_default3.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day4 = "Z" in d ? utcDate2(newDate2(d.y, 0, 1)).getUTCDay() : localDate2(newDate2(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day4 + 5) % 7 : d.w + d.U * 7 - (day4 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate2(d);
      }
      return localDate2(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i2 = 0, n3 = specifier.length, m = string.length, c, parse;
    while (i2 < n3) {
      if (j >= m)
        return -1;
      c = specifier.charCodeAt(i2++);
      if (c === 37) {
        c = specifier.charAt(i2++);
        parse = parses[c in pads2 ? specifier.charAt(i2++) : c];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i2) {
    var n3 = periodRe.exec(string.slice(i2));
    return n3 ? (d.p = periodLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortWeekday(d, string, i2) {
    var n3 = shortWeekdayRe.exec(string.slice(i2));
    return n3 ? (d.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseWeekday(d, string, i2) {
    var n3 = weekdayRe.exec(string.slice(i2));
    return n3 ? (d.w = weekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortMonth(d, string, i2) {
    var n3 = shortMonthRe.exec(string.slice(i2));
    return n3 ? (d.m = shortMonthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseMonth(d, string, i2) {
    var n3 = monthRe.exec(string.slice(i2));
    return n3 ? (d.m = monthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i2) {
    return parseSpecifier(d, locale_dateTime, string, i2);
  }
  function parseLocaleDate(d, string, i2) {
    return parseSpecifier(d, locale_date, string, i2);
  }
  function parseLocaleTime(d, string, i2) {
    return parseSpecifier(d, locale_time, string, i2);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads2 = { "-": "", "_": " ", "0": "0" };
var numberRe2 = /^\s*\d+/;
var percentRe2 = /^%/;
var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote2(s) {
  return s.replace(requoteRe2, "\\$&");
}
function formatRe2(names) {
  return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
}
function formatLookup2(names) {
  return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.w = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.u = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberSunday2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.U = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberISO2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.V = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberMonday2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.W = +n3[0], i2 + n3[0].length) : -1;
}
function parseFullYear2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 4));
  return n3 ? (d.y = +n3[0], i2 + n3[0].length) : -1;
}
function parseYear2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i2 + n3[0].length) : -1;
}
function parseZone2(d, string, i2) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i2, i2 + 6));
  return n3 ? (d.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i2 + n3[0].length) : -1;
}
function parseQuarter2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 1));
  return n3 ? (d.q = n3[0] * 3 - 3, i2 + n3[0].length) : -1;
}
function parseMonthNumber2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.m = n3[0] - 1, i2 + n3[0].length) : -1;
}
function parseDayOfMonth2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseDayOfYear2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 3));
  return n3 ? (d.m = 0, d.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseHour242(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.H = +n3[0], i2 + n3[0].length) : -1;
}
function parseMinutes2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.M = +n3[0], i2 + n3[0].length) : -1;
}
function parseSeconds2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 2));
  return n3 ? (d.S = +n3[0], i2 + n3[0].length) : -1;
}
function parseMilliseconds2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 3));
  return n3 ? (d.L = +n3[0], i2 + n3[0].length) : -1;
}
function parseMicroseconds2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2, i2 + 6));
  return n3 ? (d.L = Math.floor(n3[0] / 1e3), i2 + n3[0].length) : -1;
}
function parseLiteralPercent2(d, string, i2) {
  var n3 = percentRe2.exec(string.slice(i2, i2 + 1));
  return n3 ? i2 + n3[0].length : -1;
}
function parseUnixTimestamp2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2));
  return n3 ? (d.Q = +n3[0], i2 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds2(d, string, i2) {
  var n3 = numberRe2.exec(string.slice(i2));
  return n3 ? (d.s = +n3[0], i2 + n3[0].length) : -1;
}
function formatDayOfMonth2(d, p2) {
  return pad2(d.getDate(), p2, 2);
}
function formatHour242(d, p2) {
  return pad2(d.getHours(), p2, 2);
}
function formatHour122(d, p2) {
  return pad2(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear2(d, p2) {
  return pad2(1 + day_default3.count(year_default3(d), d), p2, 3);
}
function formatMilliseconds2(d, p2) {
  return pad2(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds2(d, p2) {
  return formatMilliseconds2(d, p2) + "000";
}
function formatMonthNumber2(d, p2) {
  return pad2(d.getMonth() + 1, p2, 2);
}
function formatMinutes2(d, p2) {
  return pad2(d.getMinutes(), p2, 2);
}
function formatSeconds2(d, p2) {
  return pad2(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday2(d) {
  var day4 = d.getDay();
  return day4 === 0 ? 7 : day4;
}
function formatWeekNumberSunday2(d, p2) {
  return pad2(sunday3.count(year_default3(d) - 1, d), p2, 2);
}
function dISO2(d) {
  var day4 = d.getDay();
  return day4 >= 4 || day4 === 0 ? thursday3(d) : thursday3.ceil(d);
}
function formatWeekNumberISO2(d, p2) {
  d = dISO2(d);
  return pad2(thursday3.count(year_default3(d), d) + (year_default3(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday2(d) {
  return d.getDay();
}
function formatWeekNumberMonday2(d, p2) {
  return pad2(monday3.count(year_default3(d) - 1, d), p2, 2);
}
function formatYear2(d, p2) {
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatYearISO2(d, p2) {
  d = dISO2(d);
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatFullYear2(d, p2) {
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO2(d, p2) {
  var day4 = d.getDay();
  d = day4 >= 4 || day4 === 0 ? thursday3(d) : thursday3.ceil(d);
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatZone2(d) {
  var z2 = d.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad2(z2 / 60 | 0, "0", 2) + pad2(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth2(d, p2) {
  return pad2(d.getUTCDate(), p2, 2);
}
function formatUTCHour242(d, p2) {
  return pad2(d.getUTCHours(), p2, 2);
}
function formatUTCHour122(d, p2) {
  return pad2(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear2(d, p2) {
  return pad2(1 + utcDay_default3.count(utcYear_default3(d), d), p2, 3);
}
function formatUTCMilliseconds2(d, p2) {
  return pad2(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds2(d, p2) {
  return formatUTCMilliseconds2(d, p2) + "000";
}
function formatUTCMonthNumber2(d, p2) {
  return pad2(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes2(d, p2) {
  return pad2(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds2(d, p2) {
  return pad2(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday2(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday2(d, p2) {
  return pad2(utcSunday3.count(utcYear_default3(d) - 1, d), p2, 2);
}
function UTCdISO2(d) {
  var day4 = d.getUTCDay();
  return day4 >= 4 || day4 === 0 ? utcThursday3(d) : utcThursday3.ceil(d);
}
function formatUTCWeekNumberISO2(d, p2) {
  d = UTCdISO2(d);
  return pad2(utcThursday3.count(utcYear_default3(d), d) + (utcYear_default3(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday2(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday2(d, p2) {
  return pad2(utcMonday3.count(utcYear_default3(d) - 1, d), p2, 2);
}
function formatUTCYear2(d, p2) {
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO2(d, p2) {
  d = UTCdISO2(d);
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear2(d, p2) {
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO2(d, p2) {
  var day4 = d.getUTCDay();
  d = day4 >= 4 || day4 === 0 ? utcThursday3(d) : utcThursday3.ceil(d);
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone2() {
  return "+0000";
}
function formatLiteralPercent2() {
  return "%";
}
function formatUnixTimestamp2(d) {
  return +d;
}
function formatUnixTimestampSeconds2(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/defaultLocale.js
var locale3;
var timeFormat2;
var timeParse2;
var utcFormat2;
var utcParse2;
defaultLocale3({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale3(definition) {
  locale3 = formatLocale2(definition);
  timeFormat2 = locale3.format;
  timeParse2 = locale3.parse;
  utcFormat2 = locale3.utcFormat;
  utcParse2 = locale3.utcParse;
  return locale3;
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier2 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative2(date2) {
  return date2.toISOString();
}
var formatIso2 = Date.prototype.toISOString ? formatIsoNative2 : utcFormat2(isoSpecifier2);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative2(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso2 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative2 : utcParse2(isoSpecifier2);

// node_modules/@nivo/axes/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default2(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts2(x, p2) {
  if ((i2 = (x = p2 ? x.toExponential(p2 - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i2, coefficient = x.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i2 + 1)
  ];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/exponent.js
function exponent_default2(x) {
  return x = formatDecimalParts2(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatGroup.js
function formatGroup_default2(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t5 = [], j = 0, g2 = grouping[0], length = 0;
    while (i2 > 0 && g2 > 0) {
      if (length + g2 + 1 > width)
        g2 = Math.max(1, width - length);
      t5.push(value.substring(i2 -= g2, i2 + g2));
      if ((length += g2 + 1) > width)
        break;
      g2 = grouping[j = (j + 1) % grouping.length];
    }
    return t5.reverse().join(thousands);
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default2(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatSpecifier.js
var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier2(specifier) {
  if (!(match = re2.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier2({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier2.prototype = FormatSpecifier2.prototype;
function FormatSpecifier2(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier2.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTrim.js
function formatTrim_default2(s) {
  out:
    for (var n3 = s.length, i2 = 1, i0 = -1, i1; i2 < n3; ++i2) {
      switch (s[i2]) {
        case ".":
          i0 = i1 = i2;
          break;
        case "0":
          if (i0 === 0)
            i0 = i2;
          i1 = i2;
          break;
        default:
          if (!+s[i2])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent2;
function formatPrefixAuto_default2(x, p2) {
  var d = formatDecimalParts2(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i2 === n3 ? coefficient : i2 > n3 ? coefficient + new Array(i2 - n3 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts2(x, Math.max(0, p2 + i2 - 1))[0];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatRounded.js
function formatRounded_default2(x, p2) {
  var d = formatDecimalParts2(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTypes.js
var formatTypes_default2 = {
  "%": function(x, p2) {
    return (x * 100).toFixed(p2);
  },
  "b": function(x) {
    return Math.round(x).toString(2);
  },
  "c": function(x) {
    return x + "";
  },
  "d": formatDecimal_default2,
  "e": function(x, p2) {
    return x.toExponential(p2);
  },
  "f": function(x, p2) {
    return x.toFixed(p2);
  },
  "g": function(x, p2) {
    return x.toPrecision(p2);
  },
  "o": function(x) {
    return Math.round(x).toString(8);
  },
  "p": function(x, p2) {
    return formatRounded_default2(x * 100, p2);
  },
  "r": formatRounded_default2,
  "s": formatPrefixAuto_default2,
  "X": function(x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function(x) {
    return Math.round(x).toString(16);
  }
};

// node_modules/@nivo/axes/node_modules/d3-format/src/identity.js
function identity_default4(x) {
  return x;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/locale.js
var map6 = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default2(locale5) {
  var group3 = locale5.grouping === void 0 || locale5.thousands === void 0 ? identity_default4 : formatGroup_default2(map6.call(locale5.grouping, Number), locale5.thousands + ""), currencyPrefix = locale5.currency === void 0 ? "" : locale5.currency[0] + "", currencySuffix = locale5.currency === void 0 ? "" : locale5.currency[1] + "", decimal = locale5.decimal === void 0 ? "." : locale5.decimal + "", numerals = locale5.numerals === void 0 ? identity_default4 : formatNumerals_default2(map6.call(locale5.numerals, String)), percent = locale5.percent === void 0 ? "%" : locale5.percent + "", minus = locale5.minus === void 0 ? "-" : locale5.minus + "", nan = locale5.nan === void 0 ? "NaN" : locale5.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier2(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default2[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default2[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n3, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default2(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent2 / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n3 = value.length;
          while (++i2 < n3) {
            if (c = value.charCodeAt(i2), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group3(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group3(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix3(specifier, value) {
    var f = newFormat((specifier = formatSpecifier2(specifier), specifier.type = "f", specifier)), e4 = Math.max(-8, Math.min(8, Math.floor(exponent_default2(value) / 3))) * 3, k2 = Math.pow(10, -e4), prefix = prefixes2[8 + e4 / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix3
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/defaultLocale.js
var locale4;
var format2;
var formatPrefix2;
defaultLocale4({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale4(definition) {
  locale4 = locale_default2(definition);
  format2 = locale4.format;
  formatPrefix2 = locale4.formatPrefix;
  return locale4;
}

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_prop_types = __toESM(require_prop_types());
function v() {
  return v = Object.assign ? Object.assign.bind() : function(t5) {
    for (var e4 = 1; e4 < arguments.length; e4++) {
      var i2 = arguments[e4];
      for (var n3 in i2)
        Object.prototype.hasOwnProperty.call(i2, n3) && (t5[n3] = i2[n3]);
    }
    return t5;
  }, v.apply(this, arguments);
}
var p = function(t5) {
  var e4, i2 = t5.axis, n3 = t5.scale, r2 = t5.ticksPosition, a2 = t5.tickValues, o = t5.tickSize, s = t5.tickPadding, c = t5.tickRotation, f = t5.engine, x = void 0 === f ? "svg" : f, d = kn(n3, a2), y2 = pi[x], g2 = "bandwidth" in n3 ? pn(n3) : n3, k2 = { lineX: 0, lineY: 0 }, h2 = { textX: 0, textY: 0 }, p2 = "object" == typeof document && "rtl" === document.dir, b2 = y2.align.center, P2 = y2.baseline.center;
  return "x" === i2 ? (e4 = function(t6) {
    var e6;
    return { x: null != (e6 = g2(t6)) ? e6 : 0, y: 0 };
  }, k2.lineY = o * ("after" === r2 ? 1 : -1), h2.textY = (o + s) * ("after" === r2 ? 1 : -1), P2 = "after" === r2 ? y2.baseline.top : y2.baseline.bottom, 0 === c ? b2 = y2.align.center : "after" === r2 && c < 0 || "before" === r2 && c > 0 ? (b2 = y2.align[p2 ? "left" : "right"], P2 = y2.baseline.center) : ("after" === r2 && c > 0 || "before" === r2 && c < 0) && (b2 = y2.align[p2 ? "right" : "left"], P2 = y2.baseline.center)) : (e4 = function(t6) {
    var e6;
    return { x: 0, y: null != (e6 = g2(t6)) ? e6 : 0 };
  }, k2.lineX = o * ("after" === r2 ? 1 : -1), h2.textX = (o + s) * ("after" === r2 ? 1 : -1), b2 = "after" === r2 ? y2.align.left : y2.align.right), { ticks: d.map(function(t6) {
    return v({ key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, value: t6 }, e4(t6), k2, h2);
  }), textAlign: b2, textBaseline: P2 };
};
var b = function(t5, e4) {
  if (void 0 === t5 || "function" == typeof t5)
    return t5;
  if ("time" === e4.type) {
    var i2 = timeFormat2(t5);
    return function(t6) {
      return i2(t6 instanceof Date ? t6 : new Date(t6));
    };
  }
  return format2(t5);
};
var P = function(t5) {
  var e4, i2 = t5.width, n3 = t5.height, r2 = t5.scale, a2 = t5.axis, o = t5.values, l = (e4 = o, Array.isArray(e4) ? o : void 0) || kn(r2, o), s = "bandwidth" in r2 ? pn(r2) : r2, c = "x" === a2 ? l.map(function(t6) {
    var e6, i3;
    return { key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, x1: null != (e6 = s(t6)) ? e6 : 0, x2: null != (i3 = s(t6)) ? i3 : 0, y1: 0, y2: n3 };
  }) : l.map(function(t6) {
    var e6, n4;
    return { key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, x1: 0, x2: i2, y1: null != (e6 = s(t6)) ? e6 : 0, y2: null != (n4 = s(t6)) ? n4 : 0 };
  });
  return c;
};
var S = (0, import_react.memo)(function(t5) {
  var e4, n3 = t5.value, a2 = t5.format, o = t5.lineX, l = t5.lineY, c = t5.onClick, f = t5.textBaseline, x = t5.textAnchor, d = t5.animatedProps, u = Ut(), m = null != (e4 = null == a2 ? void 0 : a2(n3)) ? e4 : n3, k2 = (0, import_react.useMemo)(function() {
    var t6 = { opacity: d.opacity };
    return c ? { style: v({}, t6, { cursor: "pointer" }), onClick: function(t7) {
      return c(t7, m);
    } } : { style: t6 };
  }, [d.opacity, c, m]);
  return (0, import_jsx_runtime.jsxs)(animated.g, v({ transform: d.transform }, k2, { children: [(0, import_jsx_runtime.jsx)("line", { x1: 0, x2: o, y1: 0, y2: l, style: u.axis.ticks.line }), (0, import_jsx_runtime.jsx)(animated.text, { dominantBaseline: f, textAnchor: x, transform: d.textTransform, style: u.axis.ticks.text, children: "" + m })] }));
});
var T = (0, import_react.memo)(function(e4) {
  var n3 = e4.axis, l = e4.scale, f = e4.x, x = void 0 === f ? 0 : f, d = e4.y, u = void 0 === d ? 0 : d, m = e4.length, k2 = e4.ticksPosition, h2 = e4.tickValues, P2 = e4.tickSize, T2 = void 0 === P2 ? 5 : P2, O2 = e4.tickPadding, w2 = void 0 === O2 ? 5 : O2, A3 = e4.tickRotation, X3 = void 0 === A3 ? 0 : A3, Y3 = e4.format, W3 = e4.renderTick, B3 = void 0 === W3 ? S : W3, z2 = e4.legend, V2 = e4.legendPosition, C3 = void 0 === V2 ? "end" : V2, D2 = e4.legendOffset, R = void 0 === D2 ? 0 : D2, j = e4.onClick, E2 = e4.ariaHidden, q = Ut(), F = (0, import_react.useMemo)(function() {
    return b(Y3, l);
  }, [Y3, l]), H = p({ axis: n3, scale: l, ticksPosition: k2, tickValues: h2, tickSize: T2, tickPadding: w2, tickRotation: X3 }), N = H.ticks, I = H.textAlign, G = H.textBaseline, J2 = null;
  if (void 0 !== z2) {
    var K3, L2 = 0, M = 0, Q2 = 0;
    "y" === n3 ? (Q2 = -90, L2 = R, "start" === C3 ? (K3 = "start", M = m) : "middle" === C3 ? (K3 = "middle", M = m / 2) : "end" === C3 && (K3 = "end")) : (M = R, "start" === C3 ? K3 = "start" : "middle" === C3 ? (K3 = "middle", L2 = m / 2) : "end" === C3 && (K3 = "end", L2 = m)), J2 = (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + L2 + ", " + M + ") rotate(" + Q2 + ")", textAnchor: K3, style: v({ dominantBaseline: "central" }, q.axis.legend.text), children: z2 });
  }
  var U = $r(), Z = U.animate, $2 = U.config, _2 = useSpring({ transform: "translate(" + x + "," + u + ")", lineX2: "x" === n3 ? m : 0, lineY2: "x" === n3 ? 0 : m, config: $2, immediate: !Z }), tt = useTransition(N, { keys: function(t5) {
    return t5.key;
  }, initial: function(t5) {
    return { opacity: 1, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + X3 + ")" };
  }, from: function(t5) {
    return { opacity: 0, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + X3 + ")" };
  }, enter: function(t5) {
    return { opacity: 1, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + X3 + ")" };
  }, update: function(t5) {
    return { opacity: 1, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + X3 + ")" };
  }, leave: { opacity: 0 }, config: $2, immediate: !Z });
  return (0, import_jsx_runtime.jsxs)(animated.g, { transform: _2.transform, "aria-hidden": E2, children: [tt(function(e6, i2, n4, r2) {
    return t4.createElement(B3, v({ tickIndex: r2, format: F, rotate: X3, textBaseline: G, textAnchor: I, animatedProps: e6 }, i2, j ? { onClick: j } : {}));
  }), (0, import_jsx_runtime.jsx)(animated.line, { style: q.axis.domain.line, x1: 0, x2: _2.lineX2, y1: 0, y2: _2.lineY2 }), J2] });
});
var O = { ticksPosition: import_prop_types.default.oneOf(["before", "after"]), tickValues: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)])), import_prop_types.default.string]), tickSize: import_prop_types.default.number, tickPadding: import_prop_types.default.number, tickRotation: import_prop_types.default.number, format: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]), renderTick: import_prop_types.default.func, legend: import_prop_types.default.node, legendPosition: import_prop_types.default.oneOf(["start", "middle", "end"]), legendOffset: import_prop_types.default.number, ariaHidden: import_prop_types.default.bool };
var w = import_prop_types.default.shape(O);
var A2 = ["top", "right", "bottom", "left"];
var X2 = (0, import_react.memo)(function(t5) {
  var e4 = t5.xScale, i2 = t5.yScale, n3 = t5.width, r2 = t5.height, a2 = { top: t5.top, right: t5.right, bottom: t5.bottom, left: t5.left };
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: A2.map(function(t6) {
    var o = a2[t6];
    if (!o)
      return null;
    var l = "top" === t6 || "bottom" === t6;
    return (0, import_jsx_runtime.jsx)(T, v({}, o, { axis: l ? "x" : "y", x: "right" === t6 ? n3 : 0, y: "bottom" === t6 ? r2 : 0, scale: l ? e4 : i2, length: l ? n3 : r2, ticksPosition: "top" === t6 || "left" === t6 ? "before" : "after" }), t6);
  }) });
});
var Y2 = (0, import_react.memo)(function(t5) {
  var e4 = t5.animatedProps, i2 = Ut();
  return (0, import_jsx_runtime.jsx)(animated.line, v({}, e4, i2.grid.line));
});
var W2 = (0, import_react.memo)(function(t5) {
  var e4 = t5.lines, i2 = $r(), r2 = i2.animate, a2 = i2.config, l = useTransition(e4, { keys: function(t6) {
    return t6.key;
  }, initial: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, from: function(t6) {
    return { opacity: 0, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, enter: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, update: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, leave: { opacity: 0 }, config: a2, immediate: !r2 });
  return (0, import_jsx_runtime.jsx)("g", { children: l(function(t6, e6) {
    return (0, import_react.createElement)(Y2, v({}, e6, { key: e6.key, animatedProps: t6 }));
  }) });
});
var B2 = (0, import_react.memo)(function(t5) {
  var e4 = t5.width, n3 = t5.height, r2 = t5.xScale, a2 = t5.yScale, o = t5.xValues, l = t5.yValues, s = (0, import_react.useMemo)(function() {
    return !!r2 && P({ width: e4, height: n3, scale: r2, axis: "x", values: o });
  }, [r2, o, e4, n3]), c = (0, import_react.useMemo)(function() {
    return !!a2 && P({ width: e4, height: n3, scale: a2, axis: "y", values: l });
  }, [n3, e4, a2, l]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [s && (0, import_jsx_runtime.jsx)(W2, { lines: s }), c && (0, import_jsx_runtime.jsx)(W2, { lines: c })] });
});
var z = function(t5, e4) {
  var i2, n3 = e4.axis, r2 = e4.scale, a2 = e4.x, o = void 0 === a2 ? 0 : a2, l = e4.y, s = void 0 === l ? 0 : l, c = e4.length, x = e4.ticksPosition, d = e4.tickValues, u = e4.tickSize, m = void 0 === u ? 5 : u, y2 = e4.tickPadding, g2 = void 0 === y2 ? 5 : y2, k2 = e4.tickRotation, h2 = void 0 === k2 ? 0 : k2, v2 = e4.format, b2 = e4.legend, P2 = e4.legendPosition, S2 = void 0 === P2 ? "end" : P2, T2 = e4.legendOffset, O2 = void 0 === T2 ? 0 : T2, w2 = e4.theme, A3 = p({ axis: n3, scale: r2, ticksPosition: x, tickValues: d, tickSize: m, tickPadding: g2, tickRotation: h2, engine: "canvas" }), X3 = A3.ticks, Y3 = A3.textAlign, W3 = A3.textBaseline;
  t5.save(), t5.translate(o, s), t5.textAlign = Y3, t5.textBaseline = W3, t5.font = (w2.axis.ticks.text.fontWeight ? w2.axis.ticks.text.fontWeight + " " : "") + w2.axis.ticks.text.fontSize + "px " + w2.axis.ticks.text.fontFamily, (null != (i2 = w2.axis.domain.line.strokeWidth) ? i2 : 0) > 0 && (t5.lineWidth = Number(w2.axis.domain.line.strokeWidth), t5.lineCap = "square", w2.axis.domain.line.stroke && (t5.strokeStyle = w2.axis.domain.line.stroke), t5.beginPath(), t5.moveTo(0, 0), t5.lineTo("x" === n3 ? c : 0, "x" === n3 ? 0 : c), t5.stroke());
  var B3 = "function" == typeof v2 ? v2 : function(t6) {
    return "" + t6;
  };
  if (X3.forEach(function(e6) {
    var i3;
    (null != (i3 = w2.axis.ticks.line.strokeWidth) ? i3 : 0) > 0 && (t5.lineWidth = Number(w2.axis.ticks.line.strokeWidth), t5.lineCap = "square", w2.axis.ticks.line.stroke && (t5.strokeStyle = w2.axis.ticks.line.stroke), t5.beginPath(), t5.moveTo(e6.x, e6.y), t5.lineTo(e6.x + e6.lineX, e6.y + e6.lineY), t5.stroke());
    var n4 = B3(e6.value);
    t5.save(), t5.translate(e6.x + e6.textX, e6.y + e6.textY), t5.rotate(oi(h2)), w2.axis.ticks.text.fill && (t5.fillStyle = w2.axis.ticks.text.fill), t5.fillText(String(n4), 0, 0), t5.restore();
  }), void 0 !== b2) {
    var z2 = 0, V2 = 0, C3 = 0, D2 = "center";
    "y" === n3 ? (C3 = -90, z2 = O2, "start" === S2 ? (D2 = "start", V2 = c) : "middle" === S2 ? (D2 = "center", V2 = c / 2) : "end" === S2 && (D2 = "end")) : (V2 = O2, "start" === S2 ? D2 = "start" : "middle" === S2 ? (D2 = "center", z2 = c / 2) : "end" === S2 && (D2 = "end", z2 = c)), t5.translate(z2, V2), t5.rotate(oi(C3)), t5.font = (w2.axis.legend.text.fontWeight ? w2.axis.legend.text.fontWeight + " " : "") + w2.axis.legend.text.fontSize + "px " + w2.axis.legend.text.fontFamily, w2.axis.legend.text.fill && (t5.fillStyle = w2.axis.legend.text.fill), t5.textAlign = D2, t5.textBaseline = "middle", t5.fillText(b2, 0, 0);
  }
  t5.restore();
};
var V = function(t5, e4) {
  var i2 = e4.xScale, n3 = e4.yScale, r2 = e4.width, a2 = e4.height, o = e4.top, l = e4.right, s = e4.bottom, c = e4.left, f = e4.theme, x = { top: o, right: l, bottom: s, left: c };
  A2.forEach(function(e6) {
    var o2 = x[e6];
    if (!o2)
      return null;
    var l2 = "top" === e6 || "bottom" === e6, s2 = "top" === e6 || "left" === e6 ? "before" : "after", c2 = l2 ? i2 : n3, d = b(o2.format, c2);
    z(t5, v({}, o2, { axis: l2 ? "x" : "y", x: "right" === e6 ? r2 : 0, y: "bottom" === e6 ? a2 : 0, scale: c2, format: d, length: l2 ? r2 : a2, ticksPosition: s2, theme: f }));
  });
};
var C2 = function(t5, e4) {
  var i2 = e4.width, n3 = e4.height, r2 = e4.scale, a2 = e4.axis, o = e4.values;
  P({ width: i2, height: n3, scale: r2, axis: a2, values: o }).forEach(function(e6) {
    t5.beginPath(), t5.moveTo(e6.x1, e6.y1), t5.lineTo(e6.x2, e6.y2), t5.stroke();
  });
};

export {
  cn,
  dn,
  w,
  X2 as X,
  B2 as B,
  V,
  C2 as C
};
//# sourceMappingURL=chunk-6BAS3VUZ.js.map
